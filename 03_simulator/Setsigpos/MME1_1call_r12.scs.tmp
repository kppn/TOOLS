
set {
    generation_type = singleton;

    public node_mode = 1;
        public node_MME1 = 1;
        public node_MME2 = 2;
        public node_SGSN1 = 3;
        public node_SGSN2 = 4;

    public mode = 6;
        public MODE_3G  = 1;
        public MODE_LTE = 6;



    control cmd_attach;                          # attach(LTE)
    control cmd_detach;                          # detach
    control cmd_attach_kopera;
    control cmd_attach_y-mode;
    control cmd_attach_mvno;
    control cmd_attach_spmode;                   #
    control cmd_detach_all;
    control cmd_3g_attach;                       # attach(3G)
    control cmd_s1rel;                           # S1 Release
    control cmd_ue_service;                      # UE triggered Service Request
    control cmd_init_state;                      # init status


    control cmd_tau_without_sgwchg;              # TAU (without SGW change)
    control cmd_tau_with_sgwchg;                 # TAU (with SGW change)
    control cmd_ho_without_sgwchg_indirect;      # HO (without SGW change(indirect))
    control cmd_ho_without_sgwchg;               # HO (without SGW change)
    control cmd_ho_with_sgwchg_indirect;         # HO (with SGW change new(indirect))
    control cmd_ho_with_sgwchg;                  # HO (with SGW change new)
    control cmd_ho_with_sgwchg_old_indirect;     # HO (with SGW change old(indirect))
    control cmd_old_sgw_detach;                  # OLD SGW detach
    control cmd_oraora_delete;

    control cmd_enb; # TESTTESTTWETSE
    
    control ____________________________dummy1;
    control active_flag;
    control tau_w_sgwchange;
    control ho_w_sgwchange;
        private pgw_teid_c_tmp;
        private pgw_teid_c1;
        private pgw_teid_c2;
        private pgw_teid_c3;
        private sig_send_count;
    
    control intra_mme_ho;

    private res_cause=0;            # Response Cause
    private attach_kind=0;          # attach kind(0:LTE,1:3G)
    private indirect_kind=0;        # indirect sequence kind
    private tunnel_teid=0;
    private gtp_seq_no;
    private grekey;
    control teid;
    control teid2;
    control gregre;
    control gregre2;
    
    control d__________________________ummy1;
    control ebi_info;
    control enb_ipset = 0;
    control manset_enb_ipaddr = 0;
    
    control d__________________________ummy2;
    control set_i-mode_apn       = 0x79; # 'y':0x69, 'o':0x6f
    control set_mvno_apn         = 0x31; # '1':
    control set_mopera_apn       = 0x75; # 'u':0x75, 'i':0x69
    control set_spmode_apn       = 0x73; # 's':0x73, 't':0x74, 'q':0x71
    control set_User-Information = 0x01;
    
    control set_contract_mvno    = 0x00;	# MVNO契約有無。
    						# これを1にすると、y-modeやkoperaでもPEにMVNO契約情報の
    						# 載ったC.S.Reqを出す
    						
    control set_contract_limit_over = 0x00;	# Limit超過フラグ。
    private set_contract_limit      = 0x00;	# Limit契約有無。set_contract_limit_overを変更するとON
    						# Onの場合、y-modeとkoperaでPEにLimit契約情報の載ったC.S.Reqを出す
    						

    control set_contract_zantei_value = 0x00;   # 暫定開通フラグ。
    private set_contract_zantei       = 0x00;	# 暫定開通フラグ有無。set_contract_zantei_valueを変更するとON。
    						# Onの場合、y-modeでPEにLimit契約情報の載ったC.S.Reqを出す

    control set_contract_low_class_type = 0x00;   # Low Class Type値
    control set_contract_pack_sche_ind  = 0x00;   # Packet-Scheduling-Indicator値
    private set_contract_teigaku        = 0x00;	  # 定額契約有無。set_contract_low_class_type or set_contract_pack_sche_indを変更するとON。
    					          # Onの場合、y-modeとkoperaででPEにLow-Class-TypeとPacket-Scheduling-Indicatorの載ったC.S.Reqを出す



    control START_______________________TAU_RAU;
    control tau_wo_sgw_to_mme2_from_mme1;	# TAU without SGW change
    control rau_wo_sgw_to_sgsn2_from_mme1;	# RAU without SGW change
    control ho_wo_sgw_to_mme2_from_sgsn1;       # HO without SGW change
    control idrct_ho_wo_sgw_to_mme2_from_sgsn1; # Indirect HO without SGW change
    control idrct_ho_wo_sgw_to_sgsn2_from_mme1; # Indirect HO without SGW change
    control ho_wo_sgw_to_sgsn2_from_mme1;

    control END_________________________TAU_RAU;

    private sgw_teid_c;
    private sender_f_teid_c = 1;
    private sender_address = 0xc0a8d952;	# 192.168.217.82
        private IPADDR_MME1  = 0xC0A8D948;	# 192.168.217.72
        private IPADDR_MME2  = 0xC0A8D952;	# 192.168.217.82
        private IPADDR_SGSN1 = 0xC0A8D888;	# 192.168.216.136
        private IPADDR_SGSN2 = 0xC0A8D892;	# 192.168.216.146
    private send_mbr_ebi = 0;

    private ho_kind;
        private KIND_TAU=1;
	private KIND_RAU=2;
	private KIND_HO=3;
	private KIND_HO_INDIRECT=4;

    private isc_send_node;


    timer indirect_time           = 6000;

    control costum_control_apn;
    control ___________MOPERA_1;
    control ___________IMODE__2;
    control ___________MVNO___4;
    control ___________SPMODE_5;

    private isc_operation_code;
    private temporary            = 0;	# 汎用テンポラリ変数


    timer   wait_time = 10000; #10sec

    ### 呼種別考慮用 ###
    private activate_kind = 0;      # 0：初期値
    	public ACTIVATE_KIND_MOPERA  = 1;
    	public ACTIVATE_KIND_IMODE   = 2;
    	public ACTIVATE_KIND_MVNO    = 4;
    	public ACTIVATE_KIND_SPMODE  = 5;


    ### Multi考慮用 ###
    private active_bearer = 0;
    private ebi = 5;
    private active_ebi1 = 0;
    private active_ebi2 = 0;
    private active_ebi3 = 0;
    private active_ebi1_kind = 0;
    private active_ebi2_kind = 0;
    private active_ebi3_kind = 0;
    private active_ebi1_apn = 0;
    private active_ebi2_apn = 0;
    private active_ebi3_apn = 0;
    private last_ebi = 4;
    
    private enb_teid_u_index = 0;
    private enb_teid_u = 0;
    private tmp1_enb_teid_u = 0;
    private tmp2_enb_teid_u = 0;
    
    private enb_ipaddr = 0;
    private enb_ipaddr1 = 0;
    private enb_ipaddr2 = 0;
    private enb_ipaddr3 = 0;
    private enb_teid_u1 = 0;
    private enb_teid_u2 = 0;
    private enb_teid_u3 = 0;
    
    private ebi_enbip_flg = 0;
    private enb_ipaddr1_ebi_flg = 0;
    private enb_ipaddr2_ebi_flg = 0;
    private enb_ipaddr3_ebi_flg = 0;
    
    private ebi_info_flg = 0;
    
    private delete_bearer_request_ebi = 0;

	private addr_pos;
	private tmp_useraddr1 = 0; private tmp_useraddr2 = 0; private tmp_useraddr3 = 0; private tmp_useraddr4 = 0; 
	private active_ebi1_useraddr1 = 0; private active_ebi1_useraddr2 = 0; private active_ebi1_useraddr3 = 0; private active_ebi1_useraddr4 = 0;
	private active_ebi2_useraddr1 = 0; private active_ebi2_useraddr2 = 0; private active_ebi2_useraddr3 = 0; private active_ebi2_useraddr4 = 0;
	private active_ebi3_useraddr1 = 0; private active_ebi3_useraddr2 = 0; private active_ebi3_useraddr3 = 0; private active_ebi3_useraddr4 = 0;

    private ENB_IPADDR_192_168_216_76 = 0xC0A8D848;      # 192.168.216.72
    private ENB_IPADDR_192_168_216_86 = 0xC0A8D848;      # 192.168.216.72
    private ENB_IPADDR_192_168_216_98 = 0xC0AB2C48;      # 192.168.216.72
    private ENB_IPADDR_192_168_216_99 = 0xC0AB2C48;      # 192.168.216.72




















	private CREATE_INDIRECT_DATA_FORWARDING_TUNNEL_REQUEST_POS_BCTXT_EBI	= 20;
	private CREATE_INDIRECT_DATA_FORWARDING_TUNNEL_REQUEST_POS_NODE_IP	= 34;
	private CREATE_INDIRECT_DATA_FORWARDING_TUNNEL_REQUEST__3G_POS_BCTXT_EBI	= 20;
	private CREATE_INDIRECT_DATA_FORWARDING_TUNNEL_REQUEST__3G_POS_NODE_IP	= 30;
	private CREATE_SESSION_REQUEST_MVNO_POS_APN	= 111;
	private CREATE_SESSION_REQUEST_MVNO_POS_BCTXT_EBI	= 244;
	private CREATE_SESSION_REQUEST_MVNO_POS_USER_INFORMATION	= 300;
	private CREATE_SESSION_REQUEST_NOPERU_CONTRACT_LIMIT_POS_APN	= 111;
	private CREATE_SESSION_REQUEST_NOPERU_CONTRACT_LIMIT_POS_BCTXT_EBI	= 236;
	private CREATE_SESSION_REQUEST_NOPERU_CONTRACT_LIMIT_POS_LIMIT_FLAG	= 284;
	private CREATE_SESSION_REQUEST_NOPERU_CONTRACT_LIMIT_POS_USER_INFORMATION	= 291;
	private CREATE_SESSION_REQUEST_NOPERU_CONTRACT_LIMIT_TEIGAKU_POS_APN	= 111;
	private CREATE_SESSION_REQUEST_NOPERU_CONTRACT_LIMIT_TEIGAKU_POS_BCTXT_EBI	= 236;
	private CREATE_SESSION_REQUEST_NOPERU_CONTRACT_LIMIT_TEIGAKU_POS_LIMIT_FLAG	= 288;
	private CREATE_SESSION_REQUEST_NOPERU_CONTRACT_LIMIT_TEIGAKU_POS_LOW_CLASS_TYPE	= 284;
	private CREATE_SESSION_REQUEST_NOPERU_CONTRACT_LIMIT_TEIGAKU_POS_PACK_SHCE_IND	= 292;
	private CREATE_SESSION_REQUEST_NOPERU_CONTRACT_LIMIT_TEIGAKU_POS_USER_INFORMATION	= 299;
	private CREATE_SESSION_REQUEST_NOPERU_CONTRACT_MVNO_POS_APN	= 111;
	private CREATE_SESSION_REQUEST_NOPERU_CONTRACT_MVNO_POS_BCTXT_EBI	= 236;
	private CREATE_SESSION_REQUEST_NOPERU_CONTRACT_MVNO_POS_USER_INFORMATION	= 292;
	private CREATE_SESSION_REQUEST_NOPERU_CONTRACT_TEIGAKU_POS_APN	= 111;
	private CREATE_SESSION_REQUEST_NOPERU_CONTRACT_TEIGAKU_POS_BCTXT_EBI	= 236;
	private CREATE_SESSION_REQUEST_NOPERU_CONTRACT_TEIGAKU_POS_LIMIT_FLAG	= 288;
	private CREATE_SESSION_REQUEST_NOPERU_CONTRACT_TEIGAKU_POS_LOW_CLASS_TYPE	= 284;
	private CREATE_SESSION_REQUEST_NOPERU_CONTRACT_TEIGAKU_POS_PACK_SHCE_IND	= 288;
	private CREATE_SESSION_REQUEST_NOPERU_CONTRACT_TEIGAKU_POS_USER_INFORMATION	= 295;
	private CREATE_SESSION_REQUEST_NOPERU_CONTRACT_ZANTEI_POS_APN	= 111;
	private CREATE_SESSION_REQUEST_NOPERU_CONTRACT_ZANTEI_POS_BCTXT_EBI	= 236;
	private CREATE_SESSION_REQUEST_NOPERU_CONTRACT_ZANTEI_POS_USER_INFORMATION	= 291;
	private CREATE_SESSION_REQUEST_NOPERU_CONTRACT_ZANTEI_POS_ZANTEI	= 284;
	private CREATE_SESSION_REQUEST_NOPERU_POS_APN	= 111;
	private CREATE_SESSION_REQUEST_NOPERU_POS_BCTXT_EBI	= 244;
	private CREATE_SESSION_REQUEST_NOPERU_POS_USER_INFORMATION	= 295;
	private CREATE_SESSION_REQUEST_NOPERU__3G_POS_APN	= 106;
	private CREATE_SESSION_REQUEST_NOPERU__3G_POS_BCTXT_EBI	= 239;
	private CREATE_SESSION_REQUEST_SPMODE_CONTRACT_LIMIT_POS_APN	= 111;
	private CREATE_SESSION_REQUEST_SPMODE_CONTRACT_LIMIT_POS_BCTXT_EBI	= 256;
	private CREATE_SESSION_REQUEST_SPMODE_CONTRACT_LIMIT_POS_LIMIT_FLAG	= 304;
	private CREATE_SESSION_REQUEST_SPMODE_CONTRACT_LIMIT_POS_USER_INFORMATION	= 311;
	private CREATE_SESSION_REQUEST_SPMODE_POS_APN	= 111;
	private CREATE_SESSION_REQUEST_SPMODE_POS_BCTXT_EBI	= 264;
	private CREATE_SESSION_REQUEST_SPMODE_POS_USER_INFORMATION	= 315;
	private CREATE_SESSION_REQUEST_SPMODE__3G_POS_APN	= 106;
	private CREATE_SESSION_REQUEST_SPMODE__3G_POS_BCTXT_EBI	= 239;
	private CREATE_SESSION_REQUEST_YMODE_CONTRACT_LIMIT_POS_APN	= 111;
	private CREATE_SESSION_REQUEST_YMODE_CONTRACT_LIMIT_POS_BCTXT_EBI	= 259;
	private CREATE_SESSION_REQUEST_YMODE_CONTRACT_LIMIT_POS_LIMIT_FLAG	= 307;
	private CREATE_SESSION_REQUEST_YMODE_CONTRACT_LIMIT_POS_USER_INFORMATION	= 314;
	private CREATE_SESSION_REQUEST_YMODE_CONTRACT_LIMIT_TEIGAKU_POS_APN	= 111;
	private CREATE_SESSION_REQUEST_YMODE_CONTRACT_LIMIT_TEIGAKU_POS_BCTXT_EBI	= 259;
	private CREATE_SESSION_REQUEST_YMODE_CONTRACT_LIMIT_TEIGAKU_POS_LIMIT_FLAG	= 311;
	private CREATE_SESSION_REQUEST_YMODE_CONTRACT_LIMIT_TEIGAKU_POS_LOW_CLASS_TYPE	= 307;
	private CREATE_SESSION_REQUEST_YMODE_CONTRACT_LIMIT_TEIGAKU_POS_PACK_SHCE_IND	= 315;
	private CREATE_SESSION_REQUEST_YMODE_CONTRACT_LIMIT_TEIGAKU_POS_USER_INFORMATION	= 322;
	private CREATE_SESSION_REQUEST_YMODE_CONTRACT_MVNO_POS_APN	= 111;
	private CREATE_SESSION_REQUEST_YMODE_CONTRACT_MVNO_POS_BCTXT_EBI	= 259;
	private CREATE_SESSION_REQUEST_YMODE_CONTRACT_MVNO_POS_USER_INFORMATION	= 315;
	private CREATE_SESSION_REQUEST_YMODE_CONTRACT_TEIGAKU_POS_APN	= 111;
	private CREATE_SESSION_REQUEST_YMODE_CONTRACT_TEIGAKU_POS_BCTXT_EBI	= 259;
	private CREATE_SESSION_REQUEST_YMODE_CONTRACT_TEIGAKU_POS_LIMIT_FLAG	= 311;
	private CREATE_SESSION_REQUEST_YMODE_CONTRACT_TEIGAKU_POS_LOW_CLASS_TYPE	= 307;
	private CREATE_SESSION_REQUEST_YMODE_CONTRACT_TEIGAKU_POS_PACK_SHCE_IND	= 311;
	private CREATE_SESSION_REQUEST_YMODE_CONTRACT_TEIGAKU_POS_USER_INFORMATION	= 318;
	private CREATE_SESSION_REQUEST_YMODE_CONTRACT_ZANTEI_POS_APN	= 111;
	private CREATE_SESSION_REQUEST_YMODE_CONTRACT_ZANTEI_POS_BCTXT_EBI	= 259;
	private CREATE_SESSION_REQUEST_YMODE_CONTRACT_ZANTEI_POS_USER_INFORMATION	= 314;
	private CREATE_SESSION_REQUEST_YMODE_CONTRACT_ZANTEI_POS_ZANTEI	= 307;
	private CREATE_SESSION_REQUEST_YMODE_POS_APN	= 111;
	private CREATE_SESSION_REQUEST_YMODE_POS_BCTXT_EBI	= 259;
	private CREATE_SESSION_REQUEST_YMODE_POS_USER_INFORMATION	= 310;
	private DELETE_SESSION_REQUEST_POS_BCTXT_EBI	= 16;
	private DELETE_SESSION_REQUEST_POS_HEADER_TEID	= 4;
	private DELETE_SESSION_REQUEST_POS_INDICATION	= 21;
	private DELETE_SESSION_REQUEST_RAU_WO_SGW_TARGET_SGSN_POS_BCTXT_EBI	= 22;
	private DELETE_SESSION_REQUEST_RAU_WO_SGW_TARGET_SGSN_POS_HEADER_TEID	= 4;
	private DELETE_SESSION_REQUEST_RAU_WO_SGW_TARGET_SGSN_POS_INDICATION	= 27;
	private DELETE_SESSION_REQUEST_SGWCHANGE_POS_INDICATION	= 16;
	private MODIFY_BEARER_REQUEST_HO_WO_SGW_POS_EBI	= 44;
	private MODIFY_BEARER_REQUEST_HO_WO_SGW_POS_HEADER_TEID	= 4;
	private MODIFY_BEARER_REQUEST_HO_WO_SGW_POS_INDICATION	= 21;
	private MODIFY_BEARER_REQUEST_HO_WO_SGW_POS_SENDER_ADDRESS	= 32;
	private MODIFY_BEARER_REQUEST_HO_WO_SGW_POS_SENDER_F_TEID_C	= 28;
	private MODIFY_BEARER_REQUEST_HO_WO_SGW__3G_POS_EBI	= 44;
	private MODIFY_BEARER_REQUEST_HO_WO_SGW__3G_POS_HEADER_TEID	= 4;
	private MODIFY_BEARER_REQUEST_HO_WO_SGW__3G_POS_INDICATION	= 21;
	private MODIFY_BEARER_REQUEST_HO_WO_SGW__3G_POS_SENDER_ADDRESS	= 32;
	private MODIFY_BEARER_REQUEST_HO_WO_SGW__3G_POS_SENDER_F_TEID_C	= 28;
	private MODIFY_BEARER_REQUEST_POS_BCTXT_EBI	= 26;
	private MODIFY_BEARER_REQUEST_POS_BCTXT_ENB_IPADDR_U	= 36;
	private MODIFY_BEARER_REQUEST_POS_BCTXT_ENB_TEID_U	= 32;
	private MODIFY_BEARER_REQUEST_RAU_WO_SGW_TARGET_SGSN_POS_EBI	= 44;
	private MODIFY_BEARER_REQUEST_RAU_WO_SGW_TARGET_SGSN_POS_HEADER_TEID	= 4;
	private MODIFY_BEARER_REQUEST_RAU_WO_SGW_TARGET_SGSN_POS_INDICATION	= 21;
	private MODIFY_BEARER_REQUEST_RAU_WO_SGW_TARGET_SGSN_POS_SENDER_ADDRESS	= 32;
	private MODIFY_BEARER_REQUEST_RAU_WO_SGW_TARGET_SGSN_POS_SENDER_F_TEID_C	= 28;
	private MODIFY_BEARER_REQUEST_TAU_WO_SGW_TARGET_MME_POS_EBI	= 39;
	private MODIFY_BEARER_REQUEST_TAU_WO_SGW_TARGET_MME_POS_HEADER_TEID	= 4;
	private MODIFY_BEARER_REQUEST_TAU_WO_SGW_TARGET_MME_POS_INDICATION	= 16;
	private MODIFY_BEARER_REQUEST_TAU_WO_SGW_TARGET_MME_POS_SENDER_ADDRESS	= 27;
	private MODIFY_BEARER_REQUEST_TAU_WO_SGW_TARGET_MME_POS_SENDER_F_TEID_C	= 23;
	private MODIFY_BEARER_REQUEST_UE_SERV_POS_BCTXT_EBI	= 36;
	private MODIFY_BEARER_REQUEST_UE_SERV_POS_BCTXT_ENB_IPADDR_U	= 46;
	private MODIFY_BEARER_REQUEST_UE_SERV_POS_BCTXT_ENB_TEID_U	= 42;
	private TAU_CREATE_SESSION_REQUEST_NOPERU_POS_APN	= 84;
	private TAU_CREATE_SESSION_REQUEST_NOPERU_POS_BCTXT_EBI	= 148;
	private TAU_CREATE_SESSION_REQUEST_NOPERU_POS_EBI	= 139;
	private TAU_CREATE_SESSION_REQUEST_NOPERU_POS_INDICATION	= 52;
	private TAU_CREATE_SESSION_REQUEST_NOPERU_POS_PAA	= 126;
	private TAU_CREATE_SESSION_REQUEST_NOPERU_POS_PGW_TEID_C	= 72;
	private TAU_CREATE_SESSION_REQUEST_YMODE_POS_APN	= 84;
	private TAU_CREATE_SESSION_REQUEST_YMODE_POS_BCTXT_EBI	= 168;
	private TAU_CREATE_SESSION_REQUEST_YMODE_POS_EBI	= 159;
	private TAU_CREATE_SESSION_REQUEST_YMODE_POS_INDICATION	= 52;
	private TAU_CREATE_SESSION_REQUEST_YMODE_POS_PAA	= 134;
	private TAU_CREATE_SESSION_REQUEST_YMODE_POS_PGW_TEID_C	= 72;

    transit_execute(STATE_TEST);
}


#==================================================================================================
in STATE_TEST {
#    case execution(){
#        snap("abort!!");
#        abort();
#    }
    case control( cmd_attach ){                           # @attchコマンド投入時
        setvariable( attach_kind, 0 );
        transit_execute( STATE_ATTACH );
    }
    case control( cmd_detach ){                           # @detachコマンド投入時
        transit_execute( STATE_DETACH );
    }
    case control( cmd_attach_kopera ){
        setvariable( activate_kind, ACTIVATE_KIND_MOPERA );
        transit_execute( STATE_ATTACH );
    }
    case control( cmd_attach_y-mode ){
        setvariable( activate_kind, ACTIVATE_KIND_IMODE );
        transit_execute( STATE_ATTACH );
    }
    case control( cmd_attach_mvno ){
        setvariable( activate_kind, ACTIVATE_KIND_MVNO );
        transit_execute( STATE_ATTACH );
    }
    case control( cmd_attach_spmode ){
        setvariable( activate_kind, ACTIVATE_KIND_SPMODE );
        transit_execute( STATE_ATTACH );
    }
    case control( cmd_detach_all ){
        transit_execute( STATE_DETACH_ALL );
    }
    case control( cmd_3g_attach ){                        # @3g_attchコマンド投入時 本当はSGSNから送信!(仮)
        setvariable( attach_kind, 1 );
        transit_execute( STATE_ATTACH );
    }
    case control( cmd_s1rel ){                            # @s1relコマンド投入時
        transit_execute( STATE_S1REL );
    }
    case control( cmd_ue_service ){                       # @ue_serviceコマンド投入時
        transit_execute( STATE_UE_SERV );
    }

    ########## 1)TA Update Without SGW Change ##########
    case control( cmd_tau_without_sgwchg ){               # @tau_without_sgwchgコマンド投入時
        if( attach_kind == 0x01 ){                        # MME not change
            isc_send(SGW_PCRF, SYNCHRO, 15);              # 擬似SGW用PCRFにrat_changeシーケンス通知
        }
        transit_execute( STATE_TAU_WITHOUT_SGWCHG );
    }
    ########## 2)TA Update With SGW Change ##########
    case control( cmd_tau_with_sgwchg ){                  # @tau_with_sgwchgコマンド投入時
        isc_send(SGW_PCRF, SYNCHRO, 11);                  # 擬似SGW用PCRFにattachシーケンス通知

        transit_execute( STATE_TAU_WITH_SGWCHG );
    }
    ########## 3)HO Without SGW Change ##########
    case control( cmd_ho_without_sgwchg_indirect){        # @tau_without_sgwchg_indirectコマンド投入時
        if( attach_kind == 0x01 ){
            isc_send(SGW_PCRF, SYNCHRO, 15);              # 擬似SGW用PCRFにrat_changeシーケンス通知
        }
        setvariable( indirect_kind, 0x01 );               # 1 = H.O. Without SGW Change Indirect
        transit_execute( STATE_HO_INDIRECT_CRE_OLD );
    }
    case control( cmd_ho_without_sgwchg ){                # @ho_without_sgwchgコマンド投入時
        if( attach_kind == 0x01 ){
            isc_send(SGW_PCRF, SYNCHRO, 15);              # 擬似SGW用PCRFにrat_changeシーケンス通知
        }
        transit_execute( STATE_HO_WITHOUT_SGWCHG );
    }
    ########## 4)HO With SGW Change(NEW) ##########
    case control( cmd_ho_with_sgwchg_indirect){           # @ho_with_sgwchg_indirectコマンド投入時
        setvariable( indirect_kind, 0x02 );               # 2 = H.O. With SGW Change Indirect
        transit_execute( STATE_HO_WITH_SGWCHG );
    }
    case control( cmd_ho_with_sgwchg ){                   # @ho_with_sgwchgコマンド投入時
        transit_execute( STATE_HO_WITH_SGWCHG );
    }
    ########## 5)HO With SGW Change(OLD) ##########
    case control( cmd_ho_with_sgwchg_old_indirect ){      # @ho_with_sgwchg_oldコマンド投入時
        setvariable( indirect_kind, 0x03 );               # 3 = H.O. With SGW Change Old Indirect
        
        transit_execute( STATE_HO_INDIRECT_CRE_OLD );
    }
    case control( cmd_old_sgw_detach ){                   # @old_sgw_detachコマンド投入時
        isc_send(SGW_PCRF, SYNCHRO, 12);                  # 擬似SGW用PCRFにdetachシーケンス通知
        transit_execute( STATE_OLD_SGW_DETACH );
    }
    
    
    ##############################################################
    case control(intra_mme_ho) {
    	transit_execute(STATE_INTRA_MME_HO);
    }
    
    
    ##############################################################
    #  TAU w S-GW (Target)   SHIFT  MME1 to S-GW1 Intaraction
    #  
    #        MME1                       S-GW1
    #         |      500                  |
    #         |-------------------------->|
    #         |                           |
    #         |  510-515 Active EBI/TEIDs |
    #         |<--------------------------|
    #         |  560-589 EUIP             |
    #         |<--------------------------|
    #         |  590-592 Active apn char  |
    #         |<--------------------------|
    #         |                           |
    #         |      520                  |
    #         |<--------------------------|
    #         |                           |
    #     Do C.S.Req                      |
    #  
    case control( tau_w_sgwchange )
    case control( ho_w_sgwchange ) {
    	isc_send(S-GW1, SYNCHRO, 500);
    }
    case isc_receive (SYNCHRO, 510, active_ebi1_kind) { snap("ebi1 kind receive from S-GW1", active_ebi1_kind); }
    case isc_receive (SYNCHRO, 511, active_ebi2_kind) { snap("ebi2 kind receive from S-GW1", active_ebi2_kind); }
    case isc_receive (SYNCHRO, 512, active_ebi3_kind) { snap("ebi3 kind receive from S-GW1", active_ebi3_kind); }
    case isc_receive (SYNCHRO, 513, pgw_teid_c1)      { snap("pgw_teid_c receive from S-GW1", pgw_teid_c1); }
    case isc_receive (SYNCHRO, 514, pgw_teid_c2)      { snap("pgw_teid_c receive from S-GW1", pgw_teid_c2); }
    case isc_receive (SYNCHRO, 515, pgw_teid_c3)      { snap("pgw_teid_c receive from S-GW1", pgw_teid_c3); }
    case isc_receive (SYNCHRO, 590, active_ebi1_apn)  { snap("apn character receive from S-GW1", active_ebi1_apn); }
    case isc_receive (SYNCHRO, 591, active_ebi2_apn)  { snap("apn character receive from S-GW1", active_ebi2_apn); }
    case isc_receive (SYNCHRO, 592, active_ebi3_apn)  { snap("apn character receive from S-GW1", active_ebi3_apn); }
    case isc_receive (SYNCHRO, 560, active_ebi1_useraddr1) { snap("ebi1 useraddr receive from S-GW1", active_ebi1_useraddr1); }
    case isc_receive (SYNCHRO, 561, active_ebi1_useraddr2) {}
    case isc_receive (SYNCHRO, 562, active_ebi1_useraddr3) {}
    case isc_receive (SYNCHRO, 563, active_ebi1_useraddr4) {}
    case isc_receive (SYNCHRO, 570, active_ebi2_useraddr1) { snap("ebi2 useraddr receive from S-GW1", active_ebi2_useraddr1); }
    case isc_receive (SYNCHRO, 571, active_ebi2_useraddr2) {}
    case isc_receive (SYNCHRO, 572, active_ebi2_useraddr3) {}
    case isc_receive (SYNCHRO, 573, active_ebi2_useraddr4) {}
    case isc_receive (SYNCHRO, 580, active_ebi3_useraddr1) { snap("ebi3 useraddr receive from S-GW1", active_ebi3_useraddr1); }
    case isc_receive (SYNCHRO, 581, active_ebi3_useraddr2) {}
    case isc_receive (SYNCHRO, 582, active_ebi3_useraddr3) {}
    case isc_receive (SYNCHRO, 583, active_ebi3_useraddr4) {}
    case isc_receive (SYNCHRO, 520) {
    	transit_execute(STATE_TAU_WITH_SGWCHG);
    }
    
    
    
    ##############################################################
    #  TAU w S-GW (Source)   SHIFT  MME1 to S-GW1 Intaraction
    #  
    #        MME1                       S-GW1
    #         |      200                  |
    #         |<--------------------------|
    #         |                           |
    #         | 210-215 Active KIND/TEIDs |
    #         |-------------------------->|
    #         |  260-289 EUIP             |
    #         |-------------------------->|
    #         |  290-292 Active apn char  |
    #         |-------------------------->|
    #         |      220                  |
    #         |-------------------------->|
    #         |                           |
    #         |                        Do PBU
    #         |                           |
    #         |      250                  |
    #         |<--------------------------|
    #         |                           |
    #     Do D.S.Req                      |
    # 
    case isc_receive(SYNCHRO, 200) {
    	isc_send(S-GW1, SYNCHRO, 210, active_ebi1_kind);
    	isc_send(S-GW1, SYNCHRO, 211, active_ebi2_kind);
    	isc_send(S-GW1, SYNCHRO, 212, active_ebi3_kind);
    	isc_send(S-GW1, SYNCHRO, 213, pgw_teid_c1);
    	isc_send(S-GW1, SYNCHRO, 214, pgw_teid_c2);
    	isc_send(S-GW1, SYNCHRO, 215, pgw_teid_c3);
	isc_send(S-GW1, SYNCHRO, 260, active_ebi1_useraddr1); 
	isc_send(S-GW1, SYNCHRO, 261, active_ebi1_useraddr2); 
	isc_send(S-GW1, SYNCHRO, 262, active_ebi1_useraddr3); 
	isc_send(S-GW1, SYNCHRO, 263, active_ebi1_useraddr4); 
	isc_send(S-GW1, SYNCHRO, 270, active_ebi2_useraddr1); 
	isc_send(S-GW1, SYNCHRO, 271, active_ebi2_useraddr2); 
	isc_send(S-GW1, SYNCHRO, 272, active_ebi2_useraddr3); 
	isc_send(S-GW1, SYNCHRO, 273, active_ebi2_useraddr4); 
	isc_send(S-GW1, SYNCHRO, 280, active_ebi3_useraddr1); 
	isc_send(S-GW1, SYNCHRO, 281, active_ebi3_useraddr2); 
	isc_send(S-GW1, SYNCHRO, 282, active_ebi3_useraddr3); 
	isc_send(S-GW1, SYNCHRO, 283, active_ebi3_useraddr4); 
	isc_send(S-GW1, SYNCHRO, 290, active_ebi1_apn); 
	isc_send(S-GW1, SYNCHRO, 291, active_ebi2_apn); 
	isc_send(S-GW1, SYNCHRO, 292, active_ebi3_apn); 
	
    	isc_send(S-GW1, SYNCHRO, 220);
    }
    case isc_receive(SYNCHRO, 250) {
    	#send(DELETE_SESSION_REQUEST_SGWCHANGE);
    	#snap("Delete old S-GW session");

        setvariable( indirect_kind, 0x03 );               # 3 = H.O. With SGW Change Old Indirect
        transit_execute( STATE_HO_INDIRECT_CRE_OLD );

    	setvariable(active_ebi1, 0);
    	setvariable(active_ebi2, 0);
    	setvariable(active_ebi3, 0);
    }
    

    ##############################################################
    #  TAU without S-GW change Target MME2 from MME1
    #  
    #        MME2                        MME1
    #         |      300                  |
    #         |-------------------------->|
    #         |                           |
    #         |  301-398 Parameter send   |
    #         |<--------------------------|
    #         |                           |
    #         |      399 End report       |
    #         |<--------------------------|
    #         |                           |
    #     Do M.B.Req
    #  
    case control( tau_wo_sgw_to_mme2_from_mme1 ){
    	isc_send( MME1, SYNCHRO, 300 );
        setvariable( ho_kind, KIND_TAU );
    }
    case isc_receive( SYNCHRO, 300 ){
	isc_send( MME2, SYNCHRO, 310, active_ebi1 ); 
	isc_send( MME2, SYNCHRO, 311, active_ebi1_kind ); 
	isc_send( MME2, SYNCHRO, 312, active_ebi1_apn ); 
	isc_send( MME2, SYNCHRO, 313, active_ebi1_useraddr1 ); 
	isc_send( MME2, SYNCHRO, 314, active_ebi1_useraddr2 ); 
	isc_send( MME2, SYNCHRO, 315, active_ebi1_useraddr3 ); 
	isc_send( MME2, SYNCHRO, 316, active_ebi1_useraddr4 ); 
	isc_send( MME2, SYNCHRO, 317, enb_ipaddr1 ); 
	isc_send( MME2, SYNCHRO, 318, enb_ipaddr1_ebi_flg ); 
	isc_send( MME2, SYNCHRO, 319, enb_teid_u1 ); 
	isc_send( MME2, SYNCHRO, 320, pgw_teid_c1 ); 

	isc_send( MME2, SYNCHRO, 330, active_ebi2 ); 
	isc_send( MME2, SYNCHRO, 331, active_ebi2_kind ); 
	isc_send( MME2, SYNCHRO, 332, active_ebi2_apn ); 
	isc_send( MME2, SYNCHRO, 333, active_ebi2_useraddr1 ); 
	isc_send( MME2, SYNCHRO, 334, active_ebi2_useraddr2 ); 
	isc_send( MME2, SYNCHRO, 335, active_ebi2_useraddr3 ); 
	isc_send( MME2, SYNCHRO, 336, active_ebi2_useraddr4 ); 
	isc_send( MME2, SYNCHRO, 337, enb_ipaddr2 ); 
	isc_send( MME2, SYNCHRO, 338, enb_ipaddr2_ebi_flg ); 
	isc_send( MME2, SYNCHRO, 339, enb_teid_u2 ); 
	isc_send( MME2, SYNCHRO, 340, pgw_teid_c2 ); 

	isc_send( MME2, SYNCHRO, 350, active_ebi3 ); 
	isc_send( MME2, SYNCHRO, 351, active_ebi3_kind ); 
	isc_send( MME2, SYNCHRO, 352, active_ebi3_apn ); 
	isc_send( MME2, SYNCHRO, 353, active_ebi3_useraddr1 ); 
	isc_send( MME2, SYNCHRO, 354, active_ebi3_useraddr2 ); 
	isc_send( MME2, SYNCHRO, 355, active_ebi3_useraddr3 ); 
	isc_send( MME2, SYNCHRO, 356, active_ebi3_useraddr4 ); 
	isc_send( MME2, SYNCHRO, 357, enb_ipaddr3 ); 
	isc_send( MME2, SYNCHRO, 358, enb_ipaddr3_ebi_flg ); 
	isc_send( MME2, SYNCHRO, 359, enb_teid_u3 ); 
	isc_send( MME2, SYNCHRO, 360, pgw_teid_c3 ); 

	isc_send( MME2, SYNCHRO, 370, active_bearer ); 
	isc_send( MME2, SYNCHRO, 371, last_ebi ); 
	isc_send( MME2, SYNCHRO, 372, sgw_teid_c ); 

    	isc_send( MME2, SYNCHRO, 399 );			# 終了通知
    }
    case isc_receive( SYNCHRO, 399 ){
        transit_execute( STATE_TAU_WO_SGW_TARGET_MME );
    }
    
    ##############################################################
    #  RAU without S-GW change Target SGSN2 from MME1
    #  
    #       SGSN2                        MME1
    #         |      600                  |
    #         |-------------------------->|
    #         |                           |
    #         |  301-398 Parameter send   |
    #         |<--------------------------|
    #         |                           |
    #         |      601 End report       |
    #         |<--------------------------|
    #         |                           |
    #     Do M.B.Req
    #  
    case control( rau_wo_sgw_to_sgsn2_from_mme1 ){
    	isc_send( MME1, SYNCHRO, 600 );
        setvariable( ho_kind, KIND_RAU );
    }
    case isc_receive( SYNCHRO, 600 ){
	isc_send( SGSN2, SYNCHRO, 310, active_ebi1 ); 
	isc_send( SGSN2, SYNCHRO, 311, active_ebi1_kind ); 
	isc_send( SGSN2, SYNCHRO, 312, active_ebi1_apn ); 
	isc_send( SGSN2, SYNCHRO, 313, active_ebi1_useraddr1 ); 
	isc_send( SGSN2, SYNCHRO, 314, active_ebi1_useraddr2 ); 
	isc_send( SGSN2, SYNCHRO, 315, active_ebi1_useraddr3 ); 
	isc_send( SGSN2, SYNCHRO, 316, active_ebi1_useraddr4 ); 
	isc_send( SGSN2, SYNCHRO, 317, enb_ipaddr1 ); 
	isc_send( SGSN2, SYNCHRO, 318, enb_ipaddr1_ebi_flg ); 
	isc_send( SGSN2, SYNCHRO, 319, enb_teid_u1 ); 
	isc_send( SGSN2, SYNCHRO, 320, pgw_teid_c1 ); 

	isc_send( SGSN2, SYNCHRO, 330, active_ebi2 ); 
	isc_send( SGSN2, SYNCHRO, 331, active_ebi2_kind ); 
	isc_send( SGSN2, SYNCHRO, 332, active_ebi2_apn ); 
	isc_send( SGSN2, SYNCHRO, 333, active_ebi2_useraddr1 ); 
	isc_send( SGSN2, SYNCHRO, 334, active_ebi2_useraddr2 ); 
	isc_send( SGSN2, SYNCHRO, 335, active_ebi2_useraddr3 ); 
	isc_send( SGSN2, SYNCHRO, 336, active_ebi2_useraddr4 ); 
	isc_send( SGSN2, SYNCHRO, 337, enb_ipaddr2 ); 
	isc_send( SGSN2, SYNCHRO, 338, enb_ipaddr2_ebi_flg ); 
	isc_send( SGSN2, SYNCHRO, 339, enb_teid_u2 ); 
	isc_send( SGSN2, SYNCHRO, 340, pgw_teid_c2 ); 

	isc_send( SGSN2, SYNCHRO, 350, active_ebi3 ); 
	isc_send( SGSN2, SYNCHRO, 351, active_ebi3_kind ); 
	isc_send( SGSN2, SYNCHRO, 352, active_ebi3_apn ); 
	isc_send( SGSN2, SYNCHRO, 353, active_ebi3_useraddr1 ); 
	isc_send( SGSN2, SYNCHRO, 354, active_ebi3_useraddr2 ); 
	isc_send( SGSN2, SYNCHRO, 355, active_ebi3_useraddr3 ); 
	isc_send( SGSN2, SYNCHRO, 356, active_ebi3_useraddr4 ); 
	isc_send( SGSN2, SYNCHRO, 357, enb_ipaddr3 ); 
	isc_send( SGSN2, SYNCHRO, 358, enb_ipaddr3_ebi_flg ); 
	isc_send( SGSN2, SYNCHRO, 359, enb_teid_u3 ); 
	isc_send( SGSN2, SYNCHRO, 360, pgw_teid_c3 ); 

	isc_send( SGSN2, SYNCHRO, 370, active_bearer ); 
	isc_send( SGSN2, SYNCHRO, 371, last_ebi ); 
	isc_send( SGSN2, SYNCHRO, 372, sgw_teid_c ); 

    	isc_send( SGSN2, SYNCHRO, 601 );			# 終了通知
    }
    case isc_receive( SYNCHRO, 601 ){
        transit_execute( STATE_RAU_WO_SGW_TARGET_SGSN );
    }

    ##############################################################
    #  Indirect HO without S-GW change Target MME2 from SGSN1
    #  
    #        MME2                       SGSN1
    #         |      602                  |
    #         |-------------------------->|
    #         |                           |
    #         |  301-398 Parameter send   |
    #         |<--------------------------|
    #         |                           |
    #         |      603 End report       |
    #         |<--------------------------|
    #         |      604 EBI              |
    #         |-------------------------->|
    #         |                           |Do Create Indirect Data
    #     Do M.B.Req                          Forwarding Tunnel Request
    #  
    case control( ho_wo_sgw_to_mme2_from_sgsn1 ){
        setvariable( ho_kind, KIND_HO );
    	isc_send( SGSN1, SYNCHRO, 602, ho_kind );
    }
    case control( idrct_ho_wo_sgw_to_mme2_from_sgsn1 ){
        setvariable( ho_kind, KIND_HO_INDIRECT );
    	isc_send( SGSN1, SYNCHRO, 602, ho_kind );
    }
    case isc_receive( SYNCHRO, 602, ho_kind ){
	isc_send( MME2, SYNCHRO, 310, active_ebi1 ); 
	isc_send( MME2, SYNCHRO, 311, active_ebi1_kind ); 
	isc_send( MME2, SYNCHRO, 312, active_ebi1_apn ); 
	isc_send( MME2, SYNCHRO, 313, active_ebi1_useraddr1 ); 
	isc_send( MME2, SYNCHRO, 314, active_ebi1_useraddr2 ); 
	isc_send( MME2, SYNCHRO, 315, active_ebi1_useraddr3 ); 
	isc_send( MME2, SYNCHRO, 316, active_ebi1_useraddr4 ); 
	isc_send( MME2, SYNCHRO, 317, enb_ipaddr1 ); 
	isc_send( MME2, SYNCHRO, 318, enb_ipaddr1_ebi_flg ); 
	isc_send( MME2, SYNCHRO, 319, enb_teid_u1 ); 
	isc_send( MME2, SYNCHRO, 320, pgw_teid_c1 ); 

	isc_send( MME2, SYNCHRO, 330, active_ebi2 ); 
	isc_send( MME2, SYNCHRO, 331, active_ebi2_kind ); 
	isc_send( MME2, SYNCHRO, 332, active_ebi2_apn ); 
	isc_send( MME2, SYNCHRO, 333, active_ebi2_useraddr1 ); 
	isc_send( MME2, SYNCHRO, 334, active_ebi2_useraddr2 ); 
	isc_send( MME2, SYNCHRO, 335, active_ebi2_useraddr3 ); 
	isc_send( MME2, SYNCHRO, 336, active_ebi2_useraddr4 ); 
	isc_send( MME2, SYNCHRO, 337, enb_ipaddr2 ); 
	isc_send( MME2, SYNCHRO, 338, enb_ipaddr2_ebi_flg ); 
	isc_send( MME2, SYNCHRO, 339, enb_teid_u2 ); 
	isc_send( MME2, SYNCHRO, 340, pgw_teid_c2 ); 

	isc_send( MME2, SYNCHRO, 350, active_ebi3 ); 
	isc_send( MME2, SYNCHRO, 351, active_ebi3_kind ); 
	isc_send( MME2, SYNCHRO, 352, active_ebi3_apn ); 
	isc_send( MME2, SYNCHRO, 353, active_ebi3_useraddr1 ); 
	isc_send( MME2, SYNCHRO, 354, active_ebi3_useraddr2 ); 
	isc_send( MME2, SYNCHRO, 355, active_ebi3_useraddr3 ); 
	isc_send( MME2, SYNCHRO, 356, active_ebi3_useraddr4 ); 
	isc_send( MME2, SYNCHRO, 357, enb_ipaddr3 ); 
	isc_send( MME2, SYNCHRO, 358, enb_ipaddr3_ebi_flg ); 
	isc_send( MME2, SYNCHRO, 359, enb_teid_u3 ); 
	isc_send( MME2, SYNCHRO, 360, pgw_teid_c3 ); 

	isc_send( MME2, SYNCHRO, 370, active_bearer ); 
	isc_send( MME2, SYNCHRO, 371, last_ebi ); 
	isc_send( MME2, SYNCHRO, 372, sgw_teid_c ); 


	if( ho_kind == KIND_HO_INDIRECT ){
            transit_execute( STATE_HO_WITHOUT_SGWCHG_INDIRECT_SOURCE );
	} else {
    	    isc_send( MME2, SYNCHRO, 603 );			# 終了通知
	}
    }
    case isc_receive( SYNCHRO, 603 ){
        if( mode == MODE_LTE ){
            transit_execute( STATE_TAU_WO_SGW_TARGET_MME );
	}
	else {    # MODE_3G
            transit_execute( STATE_RAU_WO_SGW_TARGET_SGSN );
	}
    }

    ##############################################################
    #  Direct/Indirect HO without S-GW change Target SGSN2 from MME1
    #  
    #       SGSN2                        MME1
    #         |      408/410              |
    #         |-------------------------->|
    #         |                           |
    #         |  301-398 Parameter send   |
    #         |<--------------------------|
    #         |                           |
    #         |      458 End report       |(Direct)
    #         |<--------------------------|
    #         |                           |
    #         |                           |Do Create Indirect Data
    #         |                           |   Forwarding Tunnel Request
    #         |      460 End report       |(Indirect)
    #         |<--------------------------|
    #         |                           |wait
    #     Do M.B.Req                      |
    #         |                           |
    #         |                           |Do Deleate Indirect Data
    #         |                           |   Forwarding Tunnel Request
    #  
    case control( ho_wo_sgw_to_sgsn2_from_mme1 ){

        setvariable( isc_operation_code, 408 );
        setvariable( ho_kind, KIND_HO );
    	isc_send( MME1, SYNCHRO, isc_operation_code, isc_operation_code );
   
    }
    case control( idrct_ho_wo_sgw_to_sgsn2_from_mme1 ){

        setvariable( isc_operation_code, 410 );
        setvariable( ho_kind, KIND_HO_INDIRECT );
    	isc_send( MME1, SYNCHRO, isc_operation_code, isc_operation_code );

    }
    case isc_receive( SYNCHRO, 408, isc_operation_code ){

        transit_execute( STATE_ISC_SEND_PARAMETERS );

    }
    case isc_receive( SYNCHRO, 410, isc_operation_code ){

        transit_execute( STATE_ISC_SEND_PARAMETERS );

    }
    case isc_receive( SYNCHRO, 458 )
    case isc_receive( SYNCHRO, 460 ){

        transit_execute( STATE_RAU_WO_SGW_TARGET_SGSN );

    }


    ##############################################################
    ### ISC Send Parameters 共通部
    ##############################################################
    case isc_receive( SYNCHRO, 310, active_ebi1 ){}
    case isc_receive( SYNCHRO, 311, active_ebi1_kind ){}
    case isc_receive( SYNCHRO, 312, active_ebi1_apn ){}
    case isc_receive( SYNCHRO, 313, active_ebi1_useraddr1 ){}
    case isc_receive( SYNCHRO, 314, active_ebi1_useraddr2 ){}
    case isc_receive( SYNCHRO, 315, active_ebi1_useraddr3 ){}
    case isc_receive( SYNCHRO, 316, active_ebi1_useraddr4 ){}
    case isc_receive( SYNCHRO, 317, enb_ipaddr1 ){}
    case isc_receive( SYNCHRO, 318, enb_ipaddr1_ebi_flg ){}
    case isc_receive( SYNCHRO, 319, enb_teid_u1 ){}
    case isc_receive( SYNCHRO, 320, pgw_teid_c1 ){}

    case isc_receive( SYNCHRO, 330, active_ebi2 ){}
    case isc_receive( SYNCHRO, 331, active_ebi2_kind ){}
    case isc_receive( SYNCHRO, 332, active_ebi2_apn ){}
    case isc_receive( SYNCHRO, 333, active_ebi2_useraddr1 ){}
    case isc_receive( SYNCHRO, 334, active_ebi2_useraddr2 ){}
    case isc_receive( SYNCHRO, 335, active_ebi2_useraddr3 ){}
    case isc_receive( SYNCHRO, 336, active_ebi2_useraddr4 ){}
    case isc_receive( SYNCHRO, 337, enb_ipaddr2 ){}
    case isc_receive( SYNCHRO, 338, enb_ipaddr2_ebi_flg ){}
    case isc_receive( SYNCHRO, 339, enb_teid_u2 ){}
    case isc_receive( SYNCHRO, 340, pgw_teid_c2 ){}

    case isc_receive( SYNCHRO, 350, active_ebi3 ){}
    case isc_receive( SYNCHRO, 351, active_ebi3_kind ){}
    case isc_receive( SYNCHRO, 352, active_ebi3_apn ){}
    case isc_receive( SYNCHRO, 353, active_ebi3_useraddr1 ){}
    case isc_receive( SYNCHRO, 354, active_ebi3_useraddr2 ){}
    case isc_receive( SYNCHRO, 355, active_ebi3_useraddr3 ){}
    case isc_receive( SYNCHRO, 356, active_ebi3_useraddr4 ){}
    case isc_receive( SYNCHRO, 357, enb_ipaddr3 ){}
    case isc_receive( SYNCHRO, 358, enb_ipaddr3_ebi_flg ){}
    case isc_receive( SYNCHRO, 359, enb_teid_u3 ){}
    case isc_receive( SYNCHRO, 360, pgw_teid_c3 ){}

    case isc_receive( SYNCHRO, 370, active_bearer ){}
    case isc_receive( SYNCHRO, 371, last_ebi ){}
    case isc_receive( SYNCHRO, 372, sgw_teid_c ){ snap( "sgw_teid_c = ", sgw_teid_c ); }


    ##############################################################
    case control( costum_control_apn ){
        snap( "costum_control_apn = ", costum_control_apn );
        transit( STATE_TEST );
    }
    
    ##############################################################
    case control ( ebi_info ) {
          snap("---------- 現在の呼情報を表示 ----------");
          
          if( active_bearer == 0 ){
              snap(" 接続呼なし ");
              transit( STATE_TEST ) ;
          }
          setvariable( ebi_info_flg, 0 );
          

          snap( "接続ベアラ数 = ", active_bearer );
          
          snap("---- PDN1 Infomation ----");
          
          if( active_ebi1 != 0 ){
              snap( "EBI = ", active_ebi1 );
              if( active_ebi1_kind == 1 ){ snap( "呼種 = mopera呼" );   }
              if( active_ebi1_kind == 2 ){ snap( "呼種 = i-mode呼" );   }
              if( active_ebi1_kind == 3 ){ snap( "呼種 = Open ISP" );   }
              if( active_ebi1_kind == 4 ){ snap( "呼種 = MVNO" );       }
              if( active_ebi1_kind == 5 ){ snap( "呼種 = spmode呼" );   }
              snap("APN文字 = ", active_ebi1_apn);
              
              if( enb_ipaddr1_ebi_flg == 1 ){ snap( "eNB IPアドレス = ", enb_ipaddr1 ); snap( "eNB TEID = ", enb_teid_u1 ); }
              if( enb_ipaddr2_ebi_flg == 1 ){ snap( "eNB IPアドレス = ", enb_ipaddr2 ); snap( "eNB TEID = ", enb_teid_u2 ); }
              if( enb_ipaddr3_ebi_flg == 1 ){ snap( "eNB IPアドレス = ", enb_ipaddr3 ); snap( "eNB TEID = ", enb_teid_u3 ); }
              increase(ebi_info_flg);
          }
          if( active_ebi2 != 0 ){
              if( ebi_info_flg == 1 ){ 
                  snap("---- PDN2 Infomation ----");
              }
              snap( "EBI = ", active_ebi2 );
              
              if( active_ebi2_kind == 1 ){ snap( "呼種 = mopera呼" );   }
              if( active_ebi2_kind == 2 ){ snap( "呼種 = i-mode呼" );   }
              if( active_ebi2_kind == 3 ){ snap( "呼種 = Open ISP" );   }
              if( active_ebi2_kind == 4 ){ snap( "呼種 = MVNO" );       }
              if( active_ebi1_kind == 5 ){ snap( "呼種 = spmode呼" );   }
              snap("APN文字 = ", active_ebi2_apn);
              
              if( enb_ipaddr1_ebi_flg == 2 ){ snap( "eNB IPアドレス = ", enb_ipaddr1 ); snap( "eNB TEID = ", enb_teid_u1 ); }
              if( enb_ipaddr2_ebi_flg == 2 ){ snap( "eNB IPアドレス = ", enb_ipaddr2 ); snap( "eNB TEID = ", enb_teid_u2 ); }
              if( enb_ipaddr3_ebi_flg == 2 ){ snap( "eNB IPアドレス = ", enb_ipaddr3 ); snap( "eNB TEID = ", enb_teid_u3 ); }
              increase(ebi_info_flg);
          }
          if( active_ebi3 != 0 ){
              if( ebi_info_flg == 1 ){
                  snap("---- PDN2 Infomation ----");
              }
              if( ebi_info_flg == 2 ){
                  snap("---- PDN3 Infomation ----");
              }
              
              if( active_ebi3_kind == 1 ){ snap( "呼種 = mopera呼" );   }
              if( active_ebi3_kind == 2 ){ snap( "呼種 = i-mode呼" );   }
              if( active_ebi3_kind == 3 ){ snap( "呼種 = Open ISP" );   }
              if( active_ebi3_kind == 4 ){ snap( "呼種 = MVNO" );       }
              if( active_ebi1_kind == 5 ){ snap( "呼種 = spmode呼" );   }
              snap("APN文字 = ", active_ebi3_apn);
              
              if( enb_ipaddr1_ebi_flg == 3 ){ snap( "eNB IPアドレス = ", enb_ipaddr1 ); snap( "eNB TEID = ", enb_teid_u1 ); }
              if( enb_ipaddr2_ebi_flg == 3 ){ snap( "eNB IPアドレス = ", enb_ipaddr2 ); snap( "eNB TEID = ", enb_teid_u2 ); }
              if( enb_ipaddr3_ebi_flg == 3 ){ snap( "eNB IPアドレス = ", enb_ipaddr3 ); snap( "eNB TEID = ", enb_teid_u3 ); }
          }          
    }
}




#==================================================================================================
  in STATE_ATTACH {
      ######## Attach ########
      case execution() {

          setvariable( ebi, last_ebi );
          increase(ebi);
          if( ebi > 15 ){
              setvariable( ebi, 5 );
          }          
          
          setsigdata(	CREATE_SESSION_REQUEST_NOPERU ,                       ebi, CREATE_SESSION_REQUEST_NOPERU_POS_BCTXT_EBI,                       1, 0xFF);
          setsigdata(	CREATE_SESSION_REQUEST_NOPERU_CONTRACT_MVNO ,         ebi, CREATE_SESSION_REQUEST_NOPERU_CONTRACT_MVNO_POS_BCTXT_EBI,         1, 0xFF);
          setsigdata(	CREATE_SESSION_REQUEST_NOPERU_CONTRACT_LIMIT ,        ebi, CREATE_SESSION_REQUEST_NOPERU_CONTRACT_LIMIT_POS_BCTXT_EBI,        1, 0xFF);
          setsigdata(	CREATE_SESSION_REQUEST_NOPERU_CONTRACT_LIMIT_TEIGAKU, ebi, CREATE_SESSION_REQUEST_NOPERU_CONTRACT_LIMIT_TEIGAKU_POS_BCTXT_EBI,1, 0xFF);
          setsigdata(	CREATE_SESSION_REQUEST_NOPERU_CONTRACT_ZANTEI ,       ebi, CREATE_SESSION_REQUEST_NOPERU_CONTRACT_ZANTEI_POS_BCTXT_EBI,       1, 0xFF);
          setsigdata(	CREATE_SESSION_REQUEST_NOPERU_CONTRACT_TEIGAKU ,      ebi, CREATE_SESSION_REQUEST_NOPERU_CONTRACT_TEIGAKU_POS_BCTXT_EBI,      1, 0xFF);

          setsigdata(	CREATE_SESSION_REQUEST_YMODE ,                        ebi, CREATE_SESSION_REQUEST_YMODE_POS_BCTXT_EBI,                        1, 0xFF);
          setsigdata(	CREATE_SESSION_REQUEST_YMODE_CONTRACT_MVNO ,          ebi, CREATE_SESSION_REQUEST_YMODE_CONTRACT_MVNO_POS_BCTXT_EBI,          1, 0xFF);
          setsigdata(	CREATE_SESSION_REQUEST_YMODE_CONTRACT_LIMIT,          ebi, CREATE_SESSION_REQUEST_YMODE_CONTRACT_LIMIT_POS_BCTXT_EBI,         1, 0xFF);
          setsigdata(	CREATE_SESSION_REQUEST_YMODE_CONTRACT_LIMIT_TEIGAKU,  ebi, CREATE_SESSION_REQUEST_YMODE_CONTRACT_LIMIT_TEIGAKU_POS_BCTXT_EBI, 1, 0xFF);
          setsigdata(	CREATE_SESSION_REQUEST_YMODE_CONTRACT_ZANTEI,         ebi, CREATE_SESSION_REQUEST_YMODE_CONTRACT_ZANTEI_POS_BCTXT_EBI,        1, 0xFF);
          setsigdata(	CREATE_SESSION_REQUEST_YMODE_CONTRACT_TEIGAKU,        ebi, CREATE_SESSION_REQUEST_YMODE_CONTRACT_TEIGAKU_POS_BCTXT_EBI,       1, 0xFF);

          setsigdata(	CREATE_SESSION_REQUEST_SPMODE ,                       ebi, CREATE_SESSION_REQUEST_SPMODE_POS_BCTXT_EBI,                       1, 0xFF);
          #setsigdata(	CREATE_SESSION_REQUEST_SPMODE_CONTRACT_MVNO ,         ebi, CREATE_SESSION_REQUEST_SPMODE_CONTRACT_MVNO_POS_BCTXT_EBI,         1, 0xFF);
          setsigdata(	CREATE_SESSION_REQUEST_SPMODE_CONTRACT_LIMIT ,        ebi, CREATE_SESSION_REQUEST_SPMODE_CONTRACT_LIMIT_POS_BCTXT_EBI,        1, 0xFF);
          #setsigdata(	CREATE_SESSION_REQUEST_SPMODE_CONTRACT_LIMIT_TEIGAKU, ebi, CREATE_SESSION_REQUEST_SPMODE_CONTRACT_LIMIT_TEIGAKU_POS_BCTXT_EBI,1, 0xFF);
          #setsigdata(	CREATE_SESSION_REQUEST_SPMODE_CONTRACT_ZANTEI ,       ebi, CREATE_SESSION_REQUEST_SPMODE_CONTRACT_ZANTEI_POS_BCTXT_EBI,       1, 0xFF);
          #setsigdata(	CREATE_SESSION_REQUEST_SPMODE_CONTRACT_TEIGAKU ,      ebi, CREATE_SESSION_REQUEST_SPMODE_CONTRACT_TEIGAKU_POS_BCTXT_EBI,      1, 0xFF);

          setsigdata(	CREATE_SESSION_REQUEST_MVNO,                          ebi, CREATE_SESSION_REQUEST_MVNO_POS_BCTXT_EBI,                         1, 0xFF);
	  
          setsigdata(	CREATE_SESSION_REQUEST_NOPERU__3G, ebi,
                        CREATE_SESSION_REQUEST_NOPERU__3G_POS_BCTXT_EBI, 1, 0xFF);
          setsigdata(	CREATE_SESSION_REQUEST_SPMODE__3G, ebi,
                        CREATE_SESSION_REQUEST_SPMODE__3G_POS_BCTXT_EBI, 1, 0xFF);


          ##################
          # Send MOPERA
          if( activate_kind == ACTIVATE_KIND_MOPERA) {
		  if ( set_contract_mvno == 1) {
                 	send(CREATE_SESSION_REQUEST_NOPERU_CONTRACT_MVNO);
                        snap("send:CREATE_SESSION_REQUEST_NOPERU_CONTRACT_MVNO");
                 	transit();
		  }
		  if ( set_contract_limit == 1) {
		        if ( set_contract_teigaku == 1) {
                            send(CREATE_SESSION_REQUEST_NOPERU_CONTRACT_LIMIT_TEIGAKU);
                            snap("send:CREATE_SESSION_REQUEST_NOPERU_CONTRACT_LIMIT_TEIGAKU");
                 	    transit();
                        }
                        
                 	send(CREATE_SESSION_REQUEST_YMODE_CONTRACT_LIMIT);
                        snap("send:CREATE_SESSION_REQUEST_YMODE_CONTRACT_LIMIT");
                 	transit();
                  }
		  if ( set_contract_teigaku == 1) {
                        send(CREATE_SESSION_REQUEST_NOPERU_CONTRACT_TEIGAKU);
                        snap("send:CREATE_SESSION_REQUEST_NOPERU_CONTRACT_TEIGAKU");
                 	transit();
		  }
		  
		  if ( set_contract_zantei == 1) {
                 	send(CREATE_SESSION_REQUEST_NOPERU_CONTRACT_ZANTEI);
                        snap("send:CREATE_SESSION_REQUEST_NOPERU_CONTRACT_ZANTEI");
                 	transit();
                  }
                  
		  if( mode == MODE_3G ) {
                 	send( CREATE_SESSION_REQUEST_NOPERU__3G );
                        snap( "send:CREATE_SESSION_REQUEST_NOPERU__3G" );
                 	transit();
		  }

                  send(CREATE_SESSION_REQUEST_NOPERU);
                  snap("send:CREATE_SESSION_REQUEST_NOPERU");
          }
          
          ##################
          # Send IMODE
          if( activate_kind == ACTIVATE_KIND_IMODE) {
		  if ( set_contract_mvno == 1) {
                 	send(CREATE_SESSION_REQUEST_YMODE_CONTRACT_MVNO);
                        snap("send:CREATE_SESSION_REQUEST_YMODE_CONTRACT_MVNO");
                 	transit();
		  }
		  if ( set_contract_limit == 1) {
		        if ( set_contract_teigaku == 1) {
                            send(CREATE_SESSION_REQUEST_YMODE_CONTRACT_LIMIT_TEIGAKU);
                            snap("send:CREATE_SESSION_REQUEST_YMODE_CONTRACT_LIMIT_TEIGAKU");
                 	    transit();
                  }
                        
                 	send(CREATE_SESSION_REQUEST_YMODE_CONTRACT_LIMIT);
                        snap("send:CREATE_SESSION_REQUEST_YMODE_CONTRACT_LIMIT");
                 	transit();
                  }
		  if ( set_contract_teigaku == 1) {
                        send(CREATE_SESSION_REQUEST_YMODE_CONTRACT_TEIGAKU);
                        snap("send:CREATE_SESSION_REQUEST_YMODE_CONTRACT_TEIGAKU");
                 	transit();
		  }
		  if ( set_contract_zantei == 1) {
                 	send(CREATE_SESSION_REQUEST_YMODE_CONTRACT_ZANTEI);
                        snap("send:CREATE_SESSION_REQUEST_YMODE_CONTRACT_ZANTEI");
                 	transit();
                  }
                  
                  send(CREATE_SESSION_REQUEST_YMODE);
                  snap("send:CREATE_SESSION_REQUEST_YMODE");
          }

          ##################
          # Send SP-MODE
          if( activate_kind == ACTIVATE_KIND_SPMODE) {
                  if ( set_contract_limit == 1) {
                          send(CREATE_SESSION_REQUEST_SPMODE_CONTRACT_LIMIT);
                          snap("send:CREATE_SESSION_REQUEST_SPMODE_CONTRACT_LIMIT");
                  } else { if( mode == MODE_3G ) {
                          send(CREATE_SESSION_REQUEST_SPMODE__3G);
                          snap("send:CREATE_SESSION_REQUEST_SPMODE__3G");
                  } else {
                          send(CREATE_SESSION_REQUEST_SPMODE);
                          snap("send:CREATE_SESSION_REQUEST_SPMODE");
                  }}
          }

          ##################
          # Send MVNO
          if( activate_kind == ACTIVATE_KIND_MVNO) {
                  send(CREATE_SESSION_REQUEST_MVNO);
                  snap("send:CREATE_SESSION_REQUEST_MVNO");
          }
          
      }
      
      
      case receive(GTPv2:CREATE_SESSION_RESPONSE) {
              snap("recv:CREATE_SESSION_RESPONSE");
              
              getsigdata( res_cause, 16, 1, 0xFF );
              if ( res_cause != 0x10 ) { if( res_cause != 0x12 ){
                  snap( "Response Cause NG = ", res_cause );
                  transit( STATE_TEST ) ;
              }}
          
              snap( "Response Cause OK = ", res_cause );

              ### S-GW TEID 取得処理
              if( activate_kind == ACTIVATE_KIND_IMODE ){
                  getsigdata( sgw_teid_c, 94, 4, 0xFFFFFFFF );
              }
              if( activate_kind == ACTIVATE_KIND_MOPERA ){
                  getsigdata( sgw_teid_c, 87, 4, 0xFFFFFFFF );
              }
              if( activate_kind == ACTIVATE_KIND_MVNO ){
                  getsigdata( sgw_teid_c, 81, 4, 0xFFFFFFFF );
              }
              if( activate_kind == ACTIVATE_KIND_SPMODE ){
                  getsigdata( sgw_teid_c, 87, 4, 0xFFFFFFFF );
              }
              snap( "SGW TEID C = ", sgw_teid_c );

              ### 3G Attach 内部変数設定共通処理を実施 ###
              if( active_ebi1 == 0 ){
                  setvariable( active_ebi1, ebi );
                  setvariable( active_ebi1_kind, activate_kind );
                  if (activate_kind == ACTIVATE_KIND_MOPERA) { setvariable( active_ebi1_apn, set_mopera_apn);   }
                  if (activate_kind == ACTIVATE_KIND_IMODE)  { setvariable( active_ebi1_apn, set_i-mode_apn); }
                  if (activate_kind == ACTIVATE_KIND_MVNO)   { setvariable( active_ebi1_apn, set_mvno_apn);   }
                  if (activate_kind == ACTIVATE_KIND_SPMODE) { setvariable( active_ebi1_apn, set_spmode_apn);   }
                  setvariable( pgw_teid_c1, pgw_teid_c_tmp);
                  setvariable( active_ebi1_useraddr1, tmp_useraddr1); 
                  setvariable( active_ebi1_useraddr2, tmp_useraddr2); 
                  setvariable( active_ebi1_useraddr3, tmp_useraddr3); 
                  setvariable( active_ebi1_useraddr4, tmp_useraddr4); 
              }
              else{ 
                  if( active_ebi2 == 0 ){
                      setvariable( active_ebi2, ebi );
                      setvariable( active_ebi2_kind, activate_kind );
                      if (activate_kind == ACTIVATE_KIND_MOPERA) { setvariable( active_ebi2_apn, set_mopera_apn);   }
                      if (activate_kind == ACTIVATE_KIND_IMODE)  { setvariable( active_ebi2_apn, set_i-mode_apn); }
                      if (activate_kind == ACTIVATE_KIND_MVNO)   { setvariable( active_ebi2_apn, set_mvno_apn);   }
                      if (activate_kind == ACTIVATE_KIND_SPMODE) { setvariable( active_ebi2_apn, set_spmode_apn);   }
                      setvariable( pgw_teid_c2, pgw_teid_c_tmp);
                      setvariable( active_ebi2_useraddr1, tmp_useraddr1); 
                      setvariable( active_ebi2_useraddr2, tmp_useraddr2); 
                      setvariable( active_ebi2_useraddr3, tmp_useraddr3); 
                      setvariable( active_ebi2_useraddr4, tmp_useraddr4); 
                  }
                  else{ 
                      if( active_ebi3 == 0 ){
                      setvariable( active_ebi3, ebi );
                      setvariable( active_ebi3_kind, activate_kind );
                      if (activate_kind == ACTIVATE_KIND_MOPERA) { setvariable( active_ebi3_apn, set_mopera_apn);   }
                      if (activate_kind == ACTIVATE_KIND_IMODE)  { setvariable( active_ebi3_apn, set_i-mode_apn); }
                      if (activate_kind == ACTIVATE_KIND_MVNO)   { setvariable( active_ebi3_apn, set_mvno_apn);   }
                      if (activate_kind == ACTIVATE_KIND_SPMODE) { setvariable( active_ebi3_apn, set_spmode_apn);   }
                      setvariable( pgw_teid_c3, pgw_teid_c_tmp);
                      setvariable( active_ebi3_useraddr1, tmp_useraddr1); 
                      setvariable( active_ebi3_useraddr2, tmp_useraddr2); 
                      setvariable( active_ebi3_useraddr3, tmp_useraddr3); 
                      setvariable( active_ebi3_useraddr4, tmp_useraddr4); 
                      }
                  }
              }

              increase(active_bearer);
              setvariable( last_ebi, ebi );


              ### 3Gの場合はM.B.Reqを投げない
	      if( mode == MODE_3G ){
	          transit( STATE_TEST ) ;
	      }

              ### P-GW TEID / EUIP 一時取得処理
              if( activate_kind == ACTIVATE_KIND_MOPERA) {
                  getsigdata(pgw_teid_c_tmp, 94, 4, 0xFFFFFFFF);
                  setvariable(addr_pos, 72);
              }
              if( activate_kind == ACTIVATE_KIND_IMODE) {
                  getsigdata(pgw_teid_c_tmp, 107, 4, 0xFFFFFFFF);
                  setvariable(addr_pos, 73);
              }
              if( activate_kind == ACTIVATE_KIND_SPMODE) {
                  getsigdata(pgw_teid_c_tmp, 94, 4, 0xFFFFFFFF);
                  setvariable(addr_pos, 72);
              }
              # MVNOはP-GW TEID / EUIP を疑似呼間で受け渡す必要が無いため取得なし。

              increase( addr_pos, 0); getsigdata(tmp_useraddr1 , addr_pos, 4, 0xFFFFFFFF);
              increase( addr_pos, 4); getsigdata(tmp_useraddr2 , addr_pos, 4, 0xFFFFFFFF);
              increase( addr_pos, 4); getsigdata(tmp_useraddr3 , addr_pos, 4, 0xFFFFFFFF);
              increase( addr_pos, 4); getsigdata(tmp_useraddr4 , addr_pos, 4, 0xFFFFFFFF);
              
              
              ### eNB IP設定処理 ###                                  # ★ESPGW-G用SHIFTのeNBアドレスになっている
              setvariable( enb_ipaddr, ENB_IPADDR_192_168_216_76 );
              if( enb_ipaddr == enb_ipaddr1){
                  setvariable( enb_ipaddr, ENB_IPADDR_192_168_216_86 );
                  if( enb_ipaddr == enb_ipaddr2 ){
                      setvariable( enb_ipaddr, ENB_IPADDR_192_168_216_98 );
                  }
                  else {
                      if( enb_ipaddr == enb_ipaddr3){
                          setvariable( enb_ipaddr, ENB_IPADDR_192_168_216_98 );
                      }
                  }
              }
              else {
                  if( enb_ipaddr == enb_ipaddr2){
                      setvariable( enb_ipaddr, ENB_IPADDR_192_168_216_86 );
                      if( enb_ipaddr == enb_ipaddr1 ){
                          setvariable( enb_ipaddr, ENB_IPADDR_192_168_216_98 );
                      }
                      else {
                         if( enb_ipaddr == enb_ipaddr3){
                              setvariable( enb_ipaddr, ENB_IPADDR_192_168_216_98 );
                          }
                      }
                  }
                  else {
                      if( enb_ipaddr == enb_ipaddr3){
                          setvariable( enb_ipaddr, ENB_IPADDR_192_168_216_86 );
                          if( enb_ipaddr == enb_ipaddr1 ){
                              setvariable( enb_ipaddr, ENB_IPADDR_192_168_216_98 );
                          }
                          else {
                              if( enb_ipaddr == enb_ipaddr3){
                                  setvariable( enb_ipaddr, ENB_IPADDR_192_168_216_98 );
                              }
                          }
                      }
                  }
              }
              
              setvariable( enb_teid_u, 0 );
              multiply( enb_ipaddr, 0x1000000, tmp1_enb_teid_u);
              divide( tmp1_enb_teid_u, 0x100, tmp2_enb_teid_u);
              multiply( ebi, 0x1000000, tmp1_enb_teid_u);
              increase( enb_teid_u, tmp1_enb_teid_u );
              increase( enb_teid_u, tmp2_enb_teid_u );
              increase( enb_teid_u, enb_teid_u_index );
              
              if (manset_enb_ipaddr != 0) {
                  setvariable(enb_ipaddr, manset_enb_ipaddr);
              }
              
              setsigdata( MODIFY_BEARER_REQUEST, ebi,        MODIFY_BEARER_REQUEST_POS_BCTXT_EBI,           1, 0xFF);
              setsigdata( MODIFY_BEARER_REQUEST, enb_teid_u, MODIFY_BEARER_REQUEST_POS_BCTXT_ENB_TEID_U,    4, 0xFFFFFFFF);
              setsigdata( MODIFY_BEARER_REQUEST, enb_ipaddr, MODIFY_BEARER_REQUEST_POS_BCTXT_ENB_IPADDR_U,  4, 0xFFFFFFFF);
              
              send(MODIFY_BEARER_REQUEST);
              snap("send:MODIFY_BEARER_REQUEST");
              increase(enb_teid_u_index);
      }
      
      
      
      
      case receive(GTPv2:MODIFY_BEARER_RESPONSE) {
          snap("recv:MODIFY_BEARER_RESPONSE_TEST");
          getsigdata( res_cause, 16, 1, 0xFF );
          
          if( res_cause != 0x10 ){                         # Response accepted
              snap( "Response Cause = ", res_cause );
              transit( STATE_TEST );
          }
          
          
          snap( "Response Cause OK" );
          
          if( active_ebi1 == 0 ){
              setvariable( ebi_enbip_flg, 1 );
          }
          else{ 
              if( active_ebi2 == 0 ){
                  setvariable( ebi_enbip_flg, 2 );
              }
              else{ 
                  if( active_ebi3 == 0 ){
                  setvariable( ebi_enbip_flg, 3 );
                  }
              }
          }
          
          if( enb_ipaddr1 == 0 ){
              setvariable( enb_ipaddr1, enb_ipaddr );
              setvariable( enb_ipaddr1_ebi_flg, ebi_enbip_flg );
              setvariable( enb_teid_u1, enb_teid_u );
          }
          else { 
              if( enb_ipaddr2 == 0 ){
                  setvariable( enb_ipaddr2, enb_ipaddr );
                  setvariable( enb_ipaddr2_ebi_flg, ebi_enbip_flg );
                  setvariable( enb_teid_u2, enb_teid_u );
              }
              else { 
                  if( enb_ipaddr3 == 0 ){
                      setvariable( enb_ipaddr3, enb_ipaddr );
                      setvariable( enb_ipaddr3_ebi_flg, ebi_enbip_flg );
                      setvariable( enb_teid_u3, enb_teid_u );
                  }
              }
          }
          
          transit( STATE_TEST );
          
      }
  }




#==================================================================================================
in STATE_DETACH {
    ######## Detach ########
    case execution() {

        if( node_mode == node_MME2 ){
            setsigdata( DELETE_SESSION_REQUEST, sgw_teid_c, 
                        DELETE_SESSION_REQUEST_POS_HEADER_TEID, 4, 0xFFFFFFFF);
        }
        if( node_mode == node_SGSN2 ){
            setsigdata( DELETE_SESSION_REQUEST, sgw_teid_c, 
                        DELETE_SESSION_REQUEST_POS_HEADER_TEID, 4, 0xFFFFFFFF);
        }

        setsigdata( DELETE_SESSION_REQUEST, cmd_detach, 
                    DELETE_SESSION_REQUEST_POS_BCTXT_EBI, 1, 0xFF);
        send(DELETE_SESSION_REQUEST);
        snap("send:DELETE_SESSION_REQUEST");

    }
    case receive(GTPv2:DELETE_SESSION_RESPONSE) {
        snap("recv:DELETE_SESSION_RESPONSE");
        # up_close();
        getsigdata( res_cause, 16, 1, 0xFF );
        if( res_cause == 0x10 ) {                         # Response accepted
            snap( "Response Cause OK" );
        
            if( active_ebi1 == cmd_detach ){
                setvariable( active_ebi1, 0 );
                if( enb_ipaddr1_ebi_flg == 1 ){
                    setvariable( enb_ipaddr1, 0 );
                    setvariable( enb_teid_u1, 0 );
                    setvariable( enb_ipaddr1_ebi_flg, 0 );
                }
                if( enb_ipaddr2_ebi_flg == 1 ){
                    setvariable( enb_ipaddr2, 0 );
                    setvariable( enb_teid_u2, 0 );
                    setvariable( enb_ipaddr2_ebi_flg, 0 );
                }
                if( enb_ipaddr3_ebi_flg == 1 ){
                    setvariable( enb_ipaddr3, 0 );
                    setvariable( enb_teid_u3, 0 );
                    setvariable( enb_ipaddr3_ebi_flg, 0 );
                }
            }
            if( active_ebi2 == cmd_detach ){
                setvariable( active_ebi2, 0 );
                if( enb_ipaddr1_ebi_flg == 2 ){
                    setvariable( enb_ipaddr1, 0 );
                    setvariable( enb_teid_u1, 0 );
                    setvariable( enb_ipaddr1_ebi_flg, 0 );
                }
                if( enb_ipaddr2_ebi_flg == 2 ){
                    setvariable( enb_ipaddr2, 0 );
                    setvariable( enb_teid_u2, 0 );
                    setvariable( enb_ipaddr2_ebi_flg, 0 );
                }
                if( enb_ipaddr3_ebi_flg == 2 ){
                    setvariable( enb_ipaddr3, 0 );
                    setvariable( enb_teid_u3, 0 );
                    setvariable( enb_ipaddr3_ebi_flg, 0 );
                }
            }
            if( active_ebi3 == cmd_detach ){
                setvariable( active_ebi3, 0 );
                if( enb_ipaddr1_ebi_flg == 3 ){
                    setvariable( enb_ipaddr1, 0 );
                    setvariable( enb_teid_u1, 0 );
                    setvariable( enb_ipaddr1_ebi_flg, 0 );
                }
                if( enb_ipaddr2_ebi_flg == 3 ){
                    setvariable( enb_ipaddr2, 0 );
                    setvariable( enb_teid_u2, 0 );
                    setvariable( enb_ipaddr2_ebi_flg, 0 );
                }
                if( enb_ipaddr3_ebi_flg == 3 ){
                    setvariable( enb_ipaddr3, 0 );
                    setvariable( enb_teid_u3, 0 );
                    setvariable( enb_ipaddr3_ebi_flg, 0 );
                }
            }
            decrease( active_bearer );
        }
        else {                                            # Response error
            snap( "Response Cause = ", res_cause );
        }
        transit( STATE_TEST ) ;
    }
}




#==================================================================================================
in STATE_DETACH_ALL {
    ######## Detach ########
    case execution() {
        
        if( node_mode == node_MME2 ){
            setsigdata( DELETE_SESSION_REQUEST, sgw_teid_c, 
                        DELETE_SESSION_REQUEST_POS_HEADER_TEID, 4, 0xFFFFFFFF);
        }
        if( node_mode == node_SGSN2 ){
            setsigdata( DELETE_SESSION_REQUEST, sgw_teid_c, 
                        DELETE_SESSION_REQUEST_POS_HEADER_TEID, 4, 0xFFFFFFFF);
        }
        
        if( active_ebi1 != 0 ){
            setsigdata( DELETE_SESSION_REQUEST, active_ebi1, 
            DELETE_SESSION_REQUEST_POS_BCTXT_EBI, 1, 0xFF);
            send(DELETE_SESSION_REQUEST);
            snap("send:DELETE_SESSION_REQUEST");
        }
        if( active_ebi2 != 0 ){
            setsigdata( DELETE_SESSION_REQUEST, active_ebi2, 
            DELETE_SESSION_REQUEST_POS_BCTXT_EBI, 1, 0xFF);
            send(DELETE_SESSION_REQUEST);
            snap("send:DELETE_SESSION_REQUEST");
        }
        if( active_ebi3 != 0 ){
            setsigdata( DELETE_SESSION_REQUEST, active_ebi3, 
            DELETE_SESSION_REQUEST_POS_BCTXT_EBI, 1, 0xFF);
            send(DELETE_SESSION_REQUEST);
            snap("send:DELETE_SESSION_REQUEST");
        }
        setvariable( active_ebi1, 0 );
        setvariable( active_ebi2, 0 );
        setvariable( active_ebi3, 0 );
        setvariable( enb_ipaddr1, 0 );
        setvariable( enb_ipaddr2, 0 );
        setvariable( enb_ipaddr3, 0 );
        setvariable( enb_teid_u1, 0 );
        setvariable( enb_teid_u2, 0 );
        setvariable( enb_teid_u3, 0 );
        setvariable( enb_ipaddr1_ebi_flg, 0 );
        setvariable( enb_ipaddr2_ebi_flg, 0 );
        setvariable( enb_ipaddr3_ebi_flg, 0 );

    }
    case receive(GTPv2:DELETE_SESSION_RESPONSE) {
        snap("recv:DELETE_SESSION_RESPONSE");
        # up_close();
        getsigdata( res_cause, 16, 1, 0xFF );
        if( res_cause == 0x10 ) {                         # Response accepted
            snap( "Response Cause OK" );
        }
        else {                                            # Response error
            snap( "Response Cause = ", res_cause );
        }
        transit( STATE_TEST ) ;
    }
}





#==================================================================================================
in STATE_S1REL {
    ######## S1 Release ########
    case execution() {
       send(RELEASE_ACCESS_BEARERS_REQUEST);
       snap("send:RELEASE_ACCESS_BEARERS_REQUEST");

        setvariable( enb_ipaddr1, 0 );
        setvariable( enb_ipaddr2, 0 );
        setvariable( enb_ipaddr3, 0 );
        setvariable( enb_ipaddr1_ebi_flg, 0 );
        setvariable( enb_ipaddr2_ebi_flg, 0 );
        setvariable( enb_ipaddr3_ebi_flg, 0 );
    }
    case receive(GTPv2:RELEASE_ACCESS_BEARERS_RESPONSE) {
        snap("recv:RELEASE_ACCESS_BEARERS_RESPONSE");
        getsigdata( res_cause, 16, 1, 0xFF );
        if( res_cause == 0x10 ) {                         # Response accepted
            snap( "Response Cause OK" );
        }
        else {                                            # Response error
            snap( "Response Cause = ", res_cause );
        }
        transit( STATE_TEST ) ;
    }
 }





#==================================================================================================
in STATE_UE_SERV {
    ######## UE triggered Service Request ########
    case execution() {
        if( active_ebi1 != 0 ){
            setvariable( enb_ipaddr1, ENB_IPADDR_192_168_216_76 );
            
            setvariable( enb_teid_u1, 0 );
            multiply( enb_ipaddr1, 0x1000000, tmp1_enb_teid_u);
            divide( tmp1_enb_teid_u, 0x100, tmp2_enb_teid_u);
            multiply( active_ebi1, 0x1000000, tmp1_enb_teid_u);
            increase( enb_teid_u1, tmp1_enb_teid_u );
            increase( enb_teid_u1, tmp2_enb_teid_u );
            increase( enb_teid_u1, enb_teid_u_index );
            
            setsigdata( MODIFY_BEARER_REQUEST_UE_SERV, active_ebi1, MODIFY_BEARER_REQUEST_UE_SERV_POS_BCTXT_EBI, 1, 0xFF);
            setsigdata( MODIFY_BEARER_REQUEST_UE_SERV, enb_teid_u1, MODIFY_BEARER_REQUEST_UE_SERV_POS_BCTXT_ENB_TEID_U, 4, 0xFFFFFFFF);
            setsigdata( MODIFY_BEARER_REQUEST_UE_SERV, enb_ipaddr1, MODIFY_BEARER_REQUEST_UE_SERV_POS_BCTXT_ENB_IPADDR_U, 4, 0xFFFFFFFF);
            setvariable( enb_ipaddr1_ebi_flg, 1 );
            
            send(MODIFY_BEARER_REQUEST_UE_SERV);
            snap("send:MODIFY_BEARER_REQUEST_UE_SERV");
            increase(enb_teid_u_index);
        }
        if( active_ebi2 != 0 ){
            setvariable( enb_ipaddr2, ENB_IPADDR_192_168_216_86 );
            
            setvariable( enb_teid_u2, 0 );
            multiply( enb_ipaddr2, 0x1000000, tmp1_enb_teid_u);
            divide( tmp1_enb_teid_u, 0x100, tmp2_enb_teid_u);
            multiply( active_ebi2, 0x1000000, tmp1_enb_teid_u);
            increase( enb_teid_u2, tmp1_enb_teid_u );
            increase( enb_teid_u2, tmp2_enb_teid_u );
            increase( enb_teid_u2, enb_teid_u_index );
            
            setsigdata( MODIFY_BEARER_REQUEST_UE_SERV, active_ebi2, MODIFY_BEARER_REQUEST_UE_SERV_POS_BCTXT_EBI, 1, 0xFF);
            setsigdata( MODIFY_BEARER_REQUEST_UE_SERV, enb_teid_u2, MODIFY_BEARER_REQUEST_UE_SERV_POS_BCTXT_ENB_TEID_U, 4, 0xFFFFFFFF);
            setsigdata( MODIFY_BEARER_REQUEST_UE_SERV, enb_ipaddr2, MODIFY_BEARER_REQUEST_UE_SERV_POS_BCTXT_ENB_IPADDR_U, 4, 0xFFFFFFFF);
            setvariable( enb_ipaddr2_ebi_flg, 2 );
            
            send(MODIFY_BEARER_REQUEST_UE_SERV);
            snap("send:MODIFY_BEARER_REQUEST_UE_SERV");
            increase(enb_teid_u_index);
        }
        if( active_ebi3 != 0 ){
            setvariable( enb_ipaddr3, ENB_IPADDR_192_168_216_98 );
            
            setvariable( enb_teid_u3, 0 );
            multiply( enb_ipaddr3, 0x1000000, tmp1_enb_teid_u);
            divide( tmp1_enb_teid_u, 0x100, tmp2_enb_teid_u);
            multiply( active_ebi3, 0x1000000, tmp1_enb_teid_u);
            increase( enb_teid_u3, tmp1_enb_teid_u );
            increase( enb_teid_u3, tmp2_enb_teid_u );
            increase( enb_teid_u3, enb_teid_u_index );
            
            setsigdata( MODIFY_BEARER_REQUEST_UE_SERV, active_ebi3, MODIFY_BEARER_REQUEST_UE_SERV_POS_BCTXT_EBI, 1, 0xFF);
            setsigdata( MODIFY_BEARER_REQUEST_UE_SERV, enb_teid_u3, MODIFY_BEARER_REQUEST_UE_SERV_POS_BCTXT_ENB_TEID_U, 4, 0xFFFFFFFF);
            setsigdata( MODIFY_BEARER_REQUEST_UE_SERV, enb_ipaddr3, MODIFY_BEARER_REQUEST_UE_SERV_POS_BCTXT_ENB_IPADDR_U, 4, 0xFFFFFFFF);
            setvariable( enb_ipaddr3_ebi_flg, 2 );
            
            send(MODIFY_BEARER_REQUEST_UE_SERV);
            snap("send:MODIFY_BEARER_REQUEST_UE_SERV");
            increase(enb_teid_u_index);
        }
    }
    
    
    
    case receive(GTPv2:MODIFY_BEARER_RESPONSE) {
        snap("recv:MODIFY_BEARER_RESPONSE");
        getsigdata( res_cause, 16, 1, 0xFF );
        if( res_cause == 0x10 ) {                         # Response accepted
            snap( "Response Cause OK" );

        }
        else {                                            # Response error
            snap( "Response Cause = ", res_cause );
        }
        transit(STATE_TEST);
    }
}





#==================================================================================================
in STATE_INTRA_MME_HO {
    ######## UE triggered Service Request ########
    case execution() {
        if( active_ebi1 != 0 ){
            setvariable( enb_ipaddr1, ENB_IPADDR_192_168_216_76 );
            
            setvariable( enb_teid_u1, 0 );
            multiply( enb_ipaddr1, 0x1000000, tmp1_enb_teid_u);
            divide( tmp1_enb_teid_u, 0x100, tmp2_enb_teid_u);
            multiply( active_ebi1, 0x1000000, tmp1_enb_teid_u);
            increase( enb_teid_u1, tmp1_enb_teid_u );
            increase( enb_teid_u1, tmp2_enb_teid_u );
            increase( enb_teid_u1, enb_teid_u_index );
            
            setsigdata( MODIFY_BEARER_REQUEST, active_ebi1, MODIFY_BEARER_REQUEST_POS_BCTXT_EBI, 1, 0xFF);
            setsigdata( MODIFY_BEARER_REQUEST, enb_teid_u1, MODIFY_BEARER_REQUEST_POS_BCTXT_ENB_TEID_U, 4, 0xFFFFFFFF);
            setsigdata( MODIFY_BEARER_REQUEST, enb_ipaddr1, MODIFY_BEARER_REQUEST_POS_BCTXT_ENB_IPADDR_U, 4, 0xFFFFFFFF);
            setvariable( enb_ipaddr1_ebi_flg, 1 );
            
            send(MODIFY_BEARER_REQUEST);
            snap("send:MODIFY_BEARER_REQUEST");
            increase(enb_teid_u_index);
        }
        if( active_ebi2 != 0 ){
            setvariable( enb_ipaddr2, ENB_IPADDR_192_168_216_86 );
            
            setvariable( enb_teid_u2, 0 );
            multiply( enb_ipaddr2, 0x1000000, tmp1_enb_teid_u);
            divide( tmp1_enb_teid_u, 0x100, tmp2_enb_teid_u);
            multiply( active_ebi2, 0x1000000, tmp1_enb_teid_u);
            increase( enb_teid_u2, tmp1_enb_teid_u );
            increase( enb_teid_u2, tmp2_enb_teid_u );
            increase( enb_teid_u2, enb_teid_u_index );
            
            setsigdata( MODIFY_BEARER_REQUEST, active_ebi2, MODIFY_BEARER_REQUEST_POS_BCTXT_EBI, 1, 0xFF);
            setsigdata( MODIFY_BEARER_REQUEST, enb_teid_u2, MODIFY_BEARER_REQUEST_POS_BCTXT_ENB_TEID_U, 4, 0xFFFFFFFF);
            setsigdata( MODIFY_BEARER_REQUEST, enb_ipaddr2, MODIFY_BEARER_REQUEST_POS_BCTXT_ENB_IPADDR_U, 4, 0xFFFFFFFF);
            setvariable( enb_ipaddr2_ebi_flg, 2 );
            
            send(MODIFY_BEARER_REQUEST);
            snap("send:MODIFY_BEARER_REQUEST");
            increase(enb_teid_u_index);
        }
        if( active_ebi3 != 0 ){
            setvariable( enb_ipaddr3, ENB_IPADDR_192_168_216_98 );
            
            setvariable( enb_teid_u3, 0 );
            multiply( enb_ipaddr3, 0x1000000, tmp1_enb_teid_u);
            divide( tmp1_enb_teid_u, 0x100, tmp2_enb_teid_u);
            multiply( active_ebi3, 0x1000000, tmp1_enb_teid_u);
            increase( enb_teid_u3, tmp1_enb_teid_u );
            increase( enb_teid_u3, tmp2_enb_teid_u );
            increase( enb_teid_u3, enb_teid_u_index );
            
            setsigdata( MODIFY_BEARER_REQUEST, active_ebi3, MODIFY_BEARER_REQUEST_POS_BCTXT_EBI, 1, 0xFF);
            setsigdata( MODIFY_BEARER_REQUEST, enb_teid_u3, MODIFY_BEARER_REQUEST_POS_BCTXT_ENB_TEID_U, 4, 0xFFFFFFFF);
            setsigdata( MODIFY_BEARER_REQUEST, enb_ipaddr3, MODIFY_BEARER_REQUEST_POS_BCTXT_ENB_IPADDR_U, 4, 0xFFFFFFFF);
            setvariable( enb_ipaddr3_ebi_flg, 2 );
            
            send(MODIFY_BEARER_REQUEST);
            snap("send:MODIFY_BEARER_REQUEST");
            increase(enb_teid_u_index);
        }
    }
    
    
    
    case receive(GTPv2:MODIFY_BEARER_RESPONSE) {
        snap("recv:MODIFY_BEARER_RESPONSE");
        getsigdata( res_cause, 16, 1, 0xFF );
        if( res_cause == 0x10 ) {                         # Response accepted
            snap( "Response Cause OK" );

        }
        else {                                            # Response error
            snap( "Response Cause = ", res_cause );
        }
        transit(STATE_TEST);
    }
}





#==================================================================================================
in STATE_TAU_WITHOUT_SGWCHG {
    ########## 1)TA Update Without SGW Change ##########
    #### @3g_attach -> @tau_without_sgwchg ####
    case execution() {
        send(TAUOUT_MODIFY_BEARER_REQUEST);
        snap("send:MODIFY_BEARER_REQUEST");
    }
    case receive(GTPv2:MODIFY_BEARER_RESPONSE) {
        snap("recv:MODIFY_BEARER_RESPONSE");
        getsigdata( res_cause, 16, 1, 0xFF );
        if( res_cause == 0x10 ) {                         # Response accepted
            snap( "Response Cause OK" );
        }
        else {                                            # Response error
            snap( "Response Cause = ", res_cause );
        }
        isc_send(PGW_PCRF, SYNCHRO, 15);                  # 擬似SGW用PCRFにrat_changeシーケンス通知
        transit(STATE_TEST);
    }
}






#==================================================================================================
in STATE_TAU_WITH_SGWCHG {
	case execution() {
		if (pgw_teid_c1 != 0) { increase(sig_send_count, 1); }
		if (pgw_teid_c2 != 0) { increase(sig_send_count, 1); }
		if (pgw_teid_c3 != 0) { increase(sig_send_count, 1); }
		
		if (ho_w_sgwchange == 1) {
			setsigdata(TAU_CREATE_SESSION_REQUEST_YMODE,  0x0004, TAU_CREATE_SESSION_REQUEST_YMODE_POS_INDICATION,  2, 0xFFFF);
			setsigdata(TAU_CREATE_SESSION_REQUEST_NOPERU, 0x0004, TAU_CREATE_SESSION_REQUEST_NOPERU_POS_INDICATION, 2, 0xFFFF);
		}
		
		if (pgw_teid_c1 != 0) {
			setvariable(active_ebi1, 5);
			if (active_ebi1_kind == ACTIVATE_KIND_IMODE) {
				setsigdata( TAU_CREATE_SESSION_REQUEST_YMODE, active_ebi1, TAU_CREATE_SESSION_REQUEST_YMODE_POS_EBI,   1, 0xFF );
				setsigdata( TAU_CREATE_SESSION_REQUEST_YMODE, active_ebi1, TAU_CREATE_SESSION_REQUEST_YMODE_POS_BCTXT_EBI,   1, 0xFF );
				setsigdata( TAU_CREATE_SESSION_REQUEST_YMODE, pgw_teid_c1, TAU_CREATE_SESSION_REQUEST_YMODE_POS_PGW_TEID_C,  4, 0xFFFFFFFF );
				
				setvariable(addr_pos, TAU_CREATE_SESSION_REQUEST_YMODE_POS_PAA);
				increase(addr_pos, 0); setsigdata( TAU_CREATE_SESSION_REQUEST_YMODE, active_ebi1_useraddr1, addr_pos, 4, 0xFFFFFFFF);
				increase(addr_pos, 4); setsigdata( TAU_CREATE_SESSION_REQUEST_YMODE, active_ebi1_useraddr2, addr_pos, 4, 0xFFFFFFFF);
				increase(addr_pos, 4); setsigdata( TAU_CREATE_SESSION_REQUEST_YMODE, active_ebi1_useraddr3, addr_pos, 4, 0xFFFFFFFF);
				increase(addr_pos, 4); setsigdata( TAU_CREATE_SESSION_REQUEST_YMODE, active_ebi1_useraddr4, addr_pos, 4, 0xFFFFFFFF);
				
				setsigdata(TAU_CREATE_SESSION_REQUEST_YMODE,   active_ebi1_apn,  TAU_CREATE_SESSION_REQUEST_YMODE_POS_APN,                         2, 0x00FF);
				
				send(TAU_CREATE_SESSION_REQUEST_YMODE);
			}
			if (active_ebi1_kind == ACTIVATE_KIND_MOPERA) {
				setsigdata( TAU_CREATE_SESSION_REQUEST_NOPERU, active_ebi1, TAU_CREATE_SESSION_REQUEST_NOPERU_POS_EBI,   1, 0xFF );
				setsigdata( TAU_CREATE_SESSION_REQUEST_NOPERU, active_ebi1, TAU_CREATE_SESSION_REQUEST_NOPERU_POS_BCTXT_EBI,   1, 0xFF );
				setsigdata( TAU_CREATE_SESSION_REQUEST_NOPERU, pgw_teid_c1, TAU_CREATE_SESSION_REQUEST_NOPERU_POS_PGW_TEID_C,  4, 0xFFFFFFFF );
				setsigdata( TAU_CREATE_SESSION_REQUEST_NOPERU, active_ebi1_useraddr1, TAU_CREATE_SESSION_REQUEST_NOPERU_POS_PAA, 4, 0xFFFFFFFF);
				
				setvariable(temporary, TAU_CREATE_SESSION_REQUEST_NOPERU_POS_APN);
				increase(   temporary, 6);
				setsigdata(            TAU_CREATE_SESSION_REQUEST_NOPERU, active_ebi1_apn,  temporary,  1, 0xFF);
				
				send(TAU_CREATE_SESSION_REQUEST_NOPERU);
			}
		}
		if (pgw_teid_c2 != 0) {
			setvariable(active_ebi2, 6);
			if (active_ebi2_kind == ACTIVATE_KIND_IMODE) {
				setsigdata( TAU_CREATE_SESSION_REQUEST_YMODE, active_ebi2, TAU_CREATE_SESSION_REQUEST_YMODE_POS_EBI,   1, 0xFF );
				setsigdata( TAU_CREATE_SESSION_REQUEST_YMODE, active_ebi2, TAU_CREATE_SESSION_REQUEST_YMODE_POS_BCTXT_EBI,   1, 0xFF );
				setsigdata( TAU_CREATE_SESSION_REQUEST_YMODE, pgw_teid_c2, TAU_CREATE_SESSION_REQUEST_YMODE_POS_PGW_TEID_C,  4, 0xFFFFFFFF );
				
				setvariable(addr_pos, TAU_CREATE_SESSION_REQUEST_YMODE_POS_PAA);
				increase(addr_pos, 0); setsigdata( TAU_CREATE_SESSION_REQUEST_YMODE, active_ebi2_useraddr1, addr_pos, 4, 0xFFFFFFFF);
				increase(addr_pos, 4); setsigdata( TAU_CREATE_SESSION_REQUEST_YMODE, active_ebi2_useraddr2, addr_pos, 4, 0xFFFFFFFF);
				increase(addr_pos, 4); setsigdata( TAU_CREATE_SESSION_REQUEST_YMODE, active_ebi2_useraddr3, addr_pos, 4, 0xFFFFFFFF);
				increase(addr_pos, 4); setsigdata( TAU_CREATE_SESSION_REQUEST_YMODE, active_ebi2_useraddr4, addr_pos, 4, 0xFFFFFFFF);
				
				setsigdata(TAU_CREATE_SESSION_REQUEST_YMODE, active_ebi2_apn,  TAU_CREATE_SESSION_REQUEST_YMODE_POS_APN,                         2, 0x00FF);
				
				send(TAU_CREATE_SESSION_REQUEST_YMODE);
			}
			if (active_ebi2_kind == ACTIVATE_KIND_MOPERA) {
				setsigdata( TAU_CREATE_SESSION_REQUEST_NOPERU, active_ebi2, TAU_CREATE_SESSION_REQUEST_NOPERU_POS_EBI,   1, 0xFF );
				setsigdata( TAU_CREATE_SESSION_REQUEST_NOPERU, active_ebi2, TAU_CREATE_SESSION_REQUEST_NOPERU_POS_BCTXT_EBI,   1, 0xFF );
				setsigdata( TAU_CREATE_SESSION_REQUEST_NOPERU, pgw_teid_c2, TAU_CREATE_SESSION_REQUEST_NOPERU_POS_PGW_TEID_C,  4, 0xFFFFFFFF );
				setsigdata( TAU_CREATE_SESSION_REQUEST_NOPERU, active_ebi2_useraddr1, TAU_CREATE_SESSION_REQUEST_NOPERU_POS_PAA, 4, 0xFFFFFFFF);
				
				setvariable(temporary, TAU_CREATE_SESSION_REQUEST_NOPERU_POS_APN);
				increase(   temporary, 6);
				setsigdata(            TAU_CREATE_SESSION_REQUEST_NOPERU, active_ebi2_apn,  temporary,  1, 0xFF);
				
				send(TAU_CREATE_SESSION_REQUEST_NOPERU);
			}
		}
		if (pgw_teid_c3 != 0) {
			setvariable(active_ebi3, 7);
			if (active_ebi3_kind == ACTIVATE_KIND_IMODE) {
				setsigdata( TAU_CREATE_SESSION_REQUEST_YMODE, active_ebi3, TAU_CREATE_SESSION_REQUEST_YMODE_POS_EBI,   1, 0xFF );
				setsigdata( TAU_CREATE_SESSION_REQUEST_YMODE, active_ebi3, TAU_CREATE_SESSION_REQUEST_YMODE_POS_BCTXT_EBI,   1, 0xFF );
				
				setsigdata( TAU_CREATE_SESSION_REQUEST_YMODE, pgw_teid_c3, TAU_CREATE_SESSION_REQUEST_YMODE_POS_PGW_TEID_C,  4, 0xFFFFFFFF );
				increase(addr_pos, 0); setsigdata( TAU_CREATE_SESSION_REQUEST_YMODE, active_ebi3_useraddr1, addr_pos, 4, 0xFFFFFFFF);
				increase(addr_pos, 4); setsigdata( TAU_CREATE_SESSION_REQUEST_YMODE, active_ebi3_useraddr2, addr_pos, 4, 0xFFFFFFFF);
				increase(addr_pos, 4); setsigdata( TAU_CREATE_SESSION_REQUEST_YMODE, active_ebi3_useraddr3, addr_pos, 4, 0xFFFFFFFF);
				increase(addr_pos, 4); setsigdata( TAU_CREATE_SESSION_REQUEST_YMODE, active_ebi3_useraddr4, addr_pos, 4, 0xFFFFFFFF);
				
				setsigdata(TAU_CREATE_SESSION_REQUEST_YMODE, active_ebi3_apn,  TAU_CREATE_SESSION_REQUEST_YMODE_POS_APN,                         2, 0x00FF);
				
				send(TAU_CREATE_SESSION_REQUEST_YMODE);
			}
			if (active_ebi3_kind == ACTIVATE_KIND_MOPERA) {
				setsigdata( TAU_CREATE_SESSION_REQUEST_NOPERU, active_ebi3, TAU_CREATE_SESSION_REQUEST_NOPERU_POS_EBI,   1, 0xFF );
				setsigdata( TAU_CREATE_SESSION_REQUEST_NOPERU, active_ebi3, TAU_CREATE_SESSION_REQUEST_NOPERU_POS_BCTXT_EBI,   1, 0xFF );
				setsigdata( TAU_CREATE_SESSION_REQUEST_NOPERU, pgw_teid_c3, TAU_CREATE_SESSION_REQUEST_NOPERU_POS_PGW_TEID_C,  4, 0xFFFFFFFF );
				setsigdata( TAU_CREATE_SESSION_REQUEST_NOPERU, active_ebi3_useraddr1, TAU_CREATE_SESSION_REQUEST_NOPERU_POS_PAA, 4, 0xFFFFFFFF);
				
				setvariable(temporary, TAU_CREATE_SESSION_REQUEST_NOPERU_POS_APN);
				increase(   temporary, 6);
				setsigdata(            TAU_CREATE_SESSION_REQUEST_NOPERU,  active_ebi3_apn,  temporary,  1, 0xFF);
				
				send(TAU_CREATE_SESSION_REQUEST_NOPERU);
			}
		}
	}
	
	case receive(GTPv2:CREATE_SESSION_RESPONSE) {
		decrease(sig_send_count, 1);
		
		snap("recv:CREATE_SESSION_RESPONSE");
		getsigdata( res_cause, 16, 1, 0xFF );
		if( res_cause == 0x10 ) { snap( "Response Cause OK" ); 			}
		else { 			  snap( "Response Cause = ", res_cause );	}
		
		if (sig_send_count == 0) {
			if (active_flag == 1) {
				transit_execute( STATE_INTRA_MME_HO );
			}
			if (ho_w_sgwchange == 1) {
				transit_execute( STATE_INTRA_MME_HO );
			}
			transit( STATE_TEST ) ;
		}
	}
}






#==================================================================================================
in STATE_HO_INDIRECT_CRE_OLD{
    ########## 3)H.O. Without SGW Change(Indirect) ##########
    #### @3g_attach -> @ho_without_sgwchg_indirect
    ########## 4)HO With SGW Change(NEW)(Indirect) ##########
    #### @3g_attach -> @old_sgw_detach -> @cmd_ho_with_sgwchg_indirect ####
    ########## 5)HO With SGW Change(OLD)(Indirect) ##########
    #### @3g_attach -> @ho_with_sgwchg_old_indiret
    case execution() {
        setsigdata( CREATE_INDIRECT_DATA_FORWARDING_TUNNEL_REQUEST,
                        sgw_teid_c, 4, 4, 0xFFFFFFFF );
        send(CREATE_INDIRECT_DATA_FORWARDING_TUNNEL_REQUEST);
        snap("send:CREATE_INDIRECT_DATA_FORWARDING_TUNNEL_REQUEST");
    }
    case receive(GTPv2:CREATE_INDIRECT_DATA_FORWARDING_TUNNEL_RESPONSE) {
        snap("recv:CREATE_INDIRECT_DATA_FORWARDING_TUNNEL_RESPONSE");
        getsigdata( res_cause, 16, 1, 0xFF );
        getsigdata( tunnel_teid, 4, 4, 0xFFFFFFFF );
        if( res_cause == 0x10 ) {                         # Response accepted
            snap( "Response Cause OK" );
            if( indirect_kind == 0x01 ) {
                transit_execute( STATE_HO_WITHOUT_SGWCHG );
            }
            if( indirect_kind == 0x02 ) {
                transit_execute( STATE_HO_WITH_SGWCHG_INDIRECT );
            }
            if( indirect_kind == 0x03 ) {
                start_timer(indirect_time);
                #transit_execute( STATE_OLD_SGW_DETACH );
            }
            if( indirect_kind == 0x04 ) {
                transit_execute( STATE_TEST );
            }
        }
        else {                                            # Response error
            snap( "Response Cause = ", res_cause );
            setvariable( indirect_kind, 0x00 );
        }
         transit( STATE_TEST );
    }

}




#==================================================================================================
in STATE_HO_INDIRECT_CRE_NEW{
    case execution() {
        send(CREATE_INDIRECT_DATA_FORWARDING_TUNNEL_REQUEST_NEW);
        snap("send:CREATE_INDIRECT_DATA_FORWARDING_TUNNEL_REQUEST_NEW");
    }
    case receive(GTPv2:CREATE_INDIRECT_DATA_FORWARDING_TUNNEL_RESPONSE) {
        snap("recv:CREATE_INDIRECT_DATA_FORWARDING_TUNNEL_RESPONSE");
        getsigdata( res_cause, 16, 1, 0xFF );
        getsigdata( tunnel_teid, 4, 4, 0xFFFFFFFF );
        if( res_cause == 0x10 ) {                         # Response accepted
            snap( "Response Cause OK" );
            if( indirect_kind == 0x01 ) {
                transit_execute( STATE_HO_WITHOUT_SGWCHG );
            }
            if( indirect_kind == 0x02 ) {
                transit_execute( STATE_HO_WITH_SGWCHG_INDIRECT );
            }
            if( indirect_kind == 0x03 ) {
                transit_execute( STATE_OLD_SGW_DETACH );
            }
            if( indirect_kind == 0x04 ) {
              transit();
            }
        }
        else {                                            # Response error
            snap( "Response Cause = ", res_cause );
            setvariable( indirect_kind, 0x00 );
        }
    }
    case receive(GTPv2:MODIFY_BEARER_RESPONSE) {
        snap("recv:MODIFY_BEARER_RESPONSE");
        # up_send(PING,4000);                                   # U-Plane試験をする際に必要
        getsigdata( res_cause, 16, 1, 0xFF );
        if( res_cause == 0x10 ) {                         # Response accepted
            snap( "Response Cause OK" );
        }
        else {                                            # Response error
            snap( "Response Cause = ", res_cause );
        }
        transit_execute( STATE_TEST );
    }

}





#==================================================================================================
  in STATE_HO_INDIRECT_DEL{
      ########## 3)H.O. Without SGW Change(Indirect続き) ##########
      ########## 4)HO With SGW Change(NEW)(Indirect続き) ##########
      ########## 5)HO With SGW Change(OLD)(Indirect続き) ##########
      case execution() {
          ## teidがマッピングできずShiftから送信されない。
          ## teidがShiftで設定できない？deleate後だからteidをマッピングできない。
          if( indirect_kind == 0x03 ) {
#              試験的に無理やり送信。呼がないためエラー応答。
#              increase( gtp_seq_no, 1 );
#              setsigdata( DELETE_INDIRECT_DATA_FORWARDING_TUNNEL_REQUEST, gtp_seq_no, 8, 2, 0xFFFF );
#              setsigdata( DELETE_INDIRECT_DATA_FORWARDING_TUNNEL_REQUEST, tunnel_teid, 4, 4, 0xFFFFFFFF );
#              send(DELETE_INDIRECT_DATA_FORWARDING_TUNNEL_REQUEST);
#              snap("send:DELETE_INDIRECT_DATA_FORWARDING_TUNNEL_REQUEST");
#              snap("D.S.R送受信済みのため、Shift上はResponseを待たない。");
#              ## 信号がうまく認識できないので。
#              setvariable( indirect_kind, 0x00 );

                 if (mode == MODE_LTE) {
                      setsigdata( DELETE_INDIRECT_DATA_FORWARDING_TUNNEL_REQUEST,
	                    sgw_teid_c, 4, 4, 0xFFFFFFFF );
	              send( DELETE_INDIRECT_DATA_FORWARDING_TUNNEL_REQUEST);
               	  }
                 if (mode == MODE_3G) {
                      setsigdata( DELETE_INDIRECT_DATA_FORWARDING_TUNNEL_REQUEST__3G,
	                    sgw_teid_c, 4, 4, 0xFFFFFFFF );
	              send( DELETE_INDIRECT_DATA_FORWARDING_TUNNEL_REQUEST__3G);
         	 }
	
          }
          else {
              send(DELETE_INDIRECT_DATA_FORWARDING_TUNNEL_REQUEST);
              snap("send:DELETE_INDIRECT_DATA_FORWARDING_TUNNEL_REQUEST");
              transit();
          }
      }
      case receive(GTPv2:DELETE_INDIRECT_DATA_FORWARDING_TUNNEL_RESPONSE){
          snap("recv:DELETE_INDIRECT_DATA_FORWARDING_TUNNEL_RESPONSE");
          getsigdata( res_cause, 16, 1, 0xFF );
          if( res_cause == 0x10 ) {                         # Response accepted
              snap( "Response Cause OK" );
          }
          else {                                            # Response error
              snap( "Response Cause = ", res_cause );
          }
          setvariable( indirect_kind, 0x00 );
          transit(STATE_TEST);
      }
  }





#==================================================================================================
in STATE_HO_WITHOUT_SGWCHG {
    ########## 3)H.O. Without SGW Change ##########
    #### @attach -> @ho_without_sgwchg ####
    case execution() {
        send(HOOUT_MODIFY_BEARER_REQUEST);
        snap("send:MODIFY_BEARER_REQUEST");
    }
    case receive(GTPv2:MODIFY_BEARER_RESPONSE) {
        snap("recv:MODIFY_BEARER_RESPONSE");
        getsigdata( res_cause, 16, 1, 0xFF );
        if( res_cause == 0x10 ) {                         # Response accepted
            snap( "Response Cause OK" );
        }
        else {                                            # Response error
            snap( "Response Cause = ", res_cause );
        }
        transit(STATE_TEST);
    }
}





#==================================================================================================
  in STATE_HO_WITH_SGWCHG_INDIRECT_NEW {
      ########## 4)HO With SGW Change(NEW) ##########
      #### @attach -> @old_sgw_detach -> @cmd_ho_with_sgwchg ####
      case execution() {
          setsigdata( HO_CREATE_SESSION_REQUEST, grekey, 72, 4, 0xFFFFFFFF );
          send(HO_CREATE_SESSION_REQUEST);
          snap("send:CREATE_SESSION_REQUEST");
      }
      case receive(GTPv2:CREATE_SESSION_RESPONSE) {
          snap("recv:CREATE_SESSION_RESPONSE");
#          up_open();                                       # U-Plane試験をする際に必要
          getsigdata( res_cause, 16, 1, 0xFF );
          if( res_cause == 0x10 ) {                         # Response accepted
              snap( "Response Cause OK" );
          }
          else {                                            # Response error
              snap( "Response Cause = ", res_cause );
              transit_execute( STATE_TEST ) ;
          }
      }
}





#==================================================================================================
  in STATE_HO_WITH_SGWCHG {
      ########## 4)HO With SGW Change(NEW) ##########
      #### @attach -> @old_sgw_detach -> @cmd_ho_with_sgwchg ####
      case execution() {
          setsigdata( HO_CREATE_SESSION_REQUEST, grekey, 72, 4, 0xFFFFFFFF );
          send(HO_CREATE_SESSION_REQUEST);
          snap("send:CREATE_SESSION_REQUEST");
      }
      case receive(GTPv2:CREATE_SESSION_RESPONSE) {
          snap("recv:CREATE_SESSION_RESPONSE");
#          up_open();                                       # U-Plane試験をする際に必要
          getsigdata( res_cause, 16, 1, 0xFF );
          if( res_cause == 0x10 ) {                         # Response accepted
              snap( "Response Cause OK" );
              if( indirect_kind == 0x02 ) {
                  transit_execute( STATE_HO_INDIRECT_CRE_OLD );
              }
              isc_send(SGW_PCRF, SYNCHRO, 11);              # 擬似SGW用PCRFにattachシーケンス通知
              send(HO_MODIFY_BEARER_REQUEST);
              snap("send:MODIFY_BEARER_REQUEST");
          }
          else {                                            # Response error
              snap( "Response Cause = ", res_cause );
              transit( STATE_TEST ) ;
          }
      }
      case receive(GTPv2:MODIFY_BEARER_RESPONSE) {
          snap("recv:MODIFY_BEARER_RESPONSE");
#          up_send(PING);                                   # U-Plane試験をする際に必要
          getsigdata( res_cause, 16, 1, 0xFF );
          if( res_cause == 0x10 ) {                         # Response accepted
              snap( "Response Cause OK" );
          }
          else {                                            # Response error
              snap( "Response Cause = ", res_cause );
          }
          transit(STATE_TEST);
      }
  }




#==================================================================================================
  in STATE_HO_WITH_SGWCHG_INDIRECT {
      case execution() {
          isc_send(SGW_PCRF, SYNCHRO, 11);              # 擬似SGW用PCRFにattachシーケンス通知
          send(HO_MODIFY_BEARER_REQUEST);
          snap("send:MODIFY_BEARER_REQUEST");
      }
      case receive(GTPv2:MODIFY_BEARER_RESPONSE) {
          snap("recv:MODIFY_BEARER_RESPONSE");
#          up_send(PING);                                   # U-Plane試験をする際に必要
          getsigdata( res_cause, 16, 1, 0xFF );
          if( res_cause == 0x10 ) {                         # Response accepted
              transit_execute( STATE_HO_INDIRECT_DEL );
          }
          else {                                            # Response error
              snap( "Response Cause = ", res_cause );
          }
          transit(STATE_TEST);
      }
  }




#==================================================================================================
  in STATE_OLD_SGW_DETACH {
      ########## 5)HO With SGW Change(OLD)(Detach only) ##########
      #### @attach -> @old_sgw_detach ####
      case execution() {
          if( indirect_kind == 0x03 ) {
              isc_send(SGW_PCRF, SYNCHRO, 12);              # 擬似SGW用PCRFにdetachシーケンス通知
          }
          setsigdata( OLD_SGW_DELETE_SESSION_REQUEST,
                       sgw_teid_c, 4, 4, 0xFFFFFFFF );
          send(OLD_SGW_DELETE_SESSION_REQUEST);
          snap("send:DELETE_SESSION_REQUEST");
      }
      case receive(GTPv2:DELETE_SESSION_RESPONSE) {
          snap("recv:DELETE_SESSION_RESPONSE");
          getsigdata( res_cause, 16, 1, 0xFF );
          getsigdata( gtp_seq_no, 8, 2, 0xFFFF );
          if( res_cause == 0x10 ) {                         # Response accepted
              snap( "Response Cause OK" );
              if( indirect_kind == 0x03 ){
                  transit_execute( STATE_HO_INDIRECT_DEL );
              }
          }
          else {                                            # Response error
              snap( "Response Cause = ", res_cause );
          }
          transit(STATE_TEST);
      }
  }




#==================================================================================================
in ANY_STATE {
	case receive( GTPv2:DELETE_BEARER_REQUEST){
		getsigdata(delete_bearer_request_ebi, 16, 1, 0xFF);

		if (delete_bearer_request_ebi == active_ebi1) {
			setvariable( active_ebi1, 0 ); setvariable( enb_ipaddr1, 0 ); setvariable( enb_teid_u1, 0 ); setvariable( enb_ipaddr1_ebi_flg, 0 );
		}
		if (delete_bearer_request_ebi == active_ebi2) {
			setvariable( active_ebi2, 0 ); setvariable( enb_ipaddr2, 0 ); setvariable( enb_teid_u2, 0 ); setvariable( enb_ipaddr2_ebi_flg, 0 );
		}
		if (delete_bearer_request_ebi == active_ebi3) {
			setvariable( active_ebi3, 0 ); setvariable( enb_ipaddr3, 0 ); setvariable( enb_teid_u3, 0 ); setvariable( enb_ipaddr3_ebi_flg, 0 );
		}
		
		setsigdata(DELETE_BEARER_RESPONSE, delete_bearer_request_ebi, 22, 1, 0x00FF);
		send( DELETE_BEARER_RESPONSE );
#		transit_execute( STATE_TEST);
		transit( STATE_ATTACH );
	}
    
    
    case receive( GTPv2:UPDATE_BEARER_REQUEST ){
        send( UPDATE_BEARER_RESPONSE );
        transit( STATE_TEST );
    }
    
    
    case receive(GTPv2:DOWNLINK_DATA_NOTIFICATION) {
        snap("recv:DOWNLINK_DATA_NOTIFICATION");
        send(DOWNLINK_DATA_NOTIFICATION_ACKNOWLEDGEMENT);
        snap("send:DOWNLINK_DATA_NOTIFICATION_ACKNOWLEDGEMENT");
        transit_execute(STATE_UE_SERV);
    }
    
    
    ###################
    # Set APN
	case control( set_i-mode_apn ) {
		setsigdata(CREATE_SESSION_REQUEST_YMODE,                       set_i-mode_apn,  CREATE_SESSION_REQUEST_YMODE_POS_APN,                         2, 0x00FF);
		setsigdata(CREATE_SESSION_REQUEST_YMODE_CONTRACT_MVNO,         set_i-mode_apn,  CREATE_SESSION_REQUEST_YMODE_CONTRACT_MVNO_POS_APN,           2, 0x00FF);
		setsigdata(CREATE_SESSION_REQUEST_YMODE_CONTRACT_LIMIT,        set_i-mode_apn,  CREATE_SESSION_REQUEST_YMODE_CONTRACT_LIMIT_POS_APN,          2, 0x00FF);
		setsigdata(CREATE_SESSION_REQUEST_YMODE_CONTRACT_LIMIT_TEIGAKU,set_i-mode_apn,  CREATE_SESSION_REQUEST_YMODE_CONTRACT_LIMIT_TEIGAKU_POS_APN,  2, 0x00FF);
		setsigdata(CREATE_SESSION_REQUEST_YMODE_CONTRACT_ZANTEI,       set_i-mode_apn,  CREATE_SESSION_REQUEST_YMODE_CONTRACT_ZANTEI_POS_APN,         2, 0x00FF);
		setsigdata(CREATE_SESSION_REQUEST_YMODE_CONTRACT_TEIGAKU,      set_i-mode_apn,  CREATE_SESSION_REQUEST_YMODE_CONTRACT_TEIGAKU_POS_APN,        2, 0x00FF);
		
		snap("set apn to : ", set_i-mode_apn);
	}
	case control( set_mvno_apn ) {
		setvariable(temporary, CREATE_SESSION_REQUEST_MVNO_POS_APN);
		increase(   temporary, 5);
		setsigdata(            CREATE_SESSION_REQUEST_MVNO, set_mvno_apn, temporary, 1, 0xFF);
    	
		snap("set apn to : ", set_mvno_apn);
	}
	case control( set_mopera_apn ) {
		setvariable(temporary, CREATE_SESSION_REQUEST_NOPERU_POS_APN);
		increase(   temporary, 6);
		setsigdata(            CREATE_SESSION_REQUEST_NOPERU,                        set_mopera_apn,  temporary,  1, 0xFF);
    	
		setvariable(temporary, CREATE_SESSION_REQUEST_NOPERU_CONTRACT_MVNO_POS_APN);
		increase(   temporary, 6);
		setsigdata(            CREATE_SESSION_REQUEST_NOPERU_CONTRACT_MVNO,          set_mopera_apn,  temporary,  1, 0xFF);
    	
		setvariable(temporary, CREATE_SESSION_REQUEST_NOPERU_CONTRACT_LIMIT_POS_APN);
		increase(   temporary, 6);
		setsigdata(            CREATE_SESSION_REQUEST_NOPERU_CONTRACT_LIMIT,         set_mopera_apn,  temporary,  1, 0xFF);
    	
		setvariable(temporary, CREATE_SESSION_REQUEST_NOPERU_CONTRACT_LIMIT_TEIGAKU_POS_APN);
		increase(   temporary, 6);
		setsigdata(            CREATE_SESSION_REQUEST_NOPERU_CONTRACT_LIMIT_TEIGAKU, set_mopera_apn,  temporary,  1, 0xFF);
    	
		setvariable(temporary, CREATE_SESSION_REQUEST_NOPERU_CONTRACT_ZANTEI_POS_APN);
		increase(   temporary, 6);
		setsigdata(            CREATE_SESSION_REQUEST_NOPERU_CONTRACT_ZANTEI        , set_mopera_apn,  temporary,  1, 0xFF);
    	
		setvariable(temporary, CREATE_SESSION_REQUEST_NOPERU_CONTRACT_TEIGAKU_POS_APN);
		increase(   temporary, 6);
		setsigdata(            CREATE_SESSION_REQUEST_NOPERU_CONTRACT_TEIGAKU        , set_mopera_apn,  temporary,  1, 0xFF);
    	
		snap("set apn to : ", set_mopera_apn);
	}
	case control( set_spmode_apn ) {
		setsigdata(CREATE_SESSION_REQUEST_SPMODE,                 set_spmode_apn,  CREATE_SESSION_REQUEST_SPMODE_POS_APN,                2, 0x00FF);
		setsigdata(CREATE_SESSION_REQUEST_SPMODE_CONTRACT_LIMIT,  set_spmode_apn,  CREATE_SESSION_REQUEST_SPMODE_CONTRACT_LIMIT_POS_APN, 2, 0x00FF);
		
		snap("set apn to : ", set_spmode_apn);
	}
    
    
    ###################
    # Set Limit
	case control( set_contract_limit_over ) {
		setsigdata(CREATE_SESSION_REQUEST_YMODE_CONTRACT_LIMIT,          set_contract_limit_over,  CREATE_SESSION_REQUEST_YMODE_CONTRACT_LIMIT_POS_LIMIT_FLAG,          4, 0x000000FF);
		setsigdata(CREATE_SESSION_REQUEST_YMODE_CONTRACT_LIMIT_TEIGAKU,  set_contract_limit_over,  CREATE_SESSION_REQUEST_YMODE_CONTRACT_LIMIT_TEIGAKU_POS_LIMIT_FLAG,  4, 0x000000FF);
		setsigdata(CREATE_SESSION_REQUEST_NOPERU_CONTRACT_LIMIT,         set_contract_limit_over,  CREATE_SESSION_REQUEST_NOPERU_CONTRACT_LIMIT_POS_LIMIT_FLAG,         4, 0x000000FF);
		setsigdata(CREATE_SESSION_REQUEST_NOPERU_CONTRACT_LIMIT_TEIGAKU, set_contract_limit_over,  CREATE_SESSION_REQUEST_NOPERU_CONTRACT_LIMIT_TEIGAKU_POS_LIMIT_FLAG, 4, 0x000000FF);
		setsigdata(CREATE_SESSION_REQUEST_SPMODE_CONTRACT_LIMIT,         set_contract_limit_over,  CREATE_SESSION_REQUEST_SPMODE_CONTRACT_LIMIT_POS_LIMIT_FLAG,         4, 0x000000FF);
		
		snap("Limit Flag Set:", set_contract_limit_over);
		if( set_contract_limit_over == 1 ) {
		        setvariable(set_contract_limit, 1);
		} else {
		        setvariable(set_contract_limit, 0);
		}
	}

    ###################
    # Set Zantei Flag
	case control( set_contract_zantei_value ) {
		setsigdata(CREATE_SESSION_REQUEST_YMODE_CONTRACT_ZANTEI,  set_contract_zantei_value, CREATE_SESSION_REQUEST_YMODE_CONTRACT_ZANTEI_POS_ZANTEI,   4, 0x000000FF);
		setsigdata(CREATE_SESSION_REQUEST_NOPERU_CONTRACT_ZANTEI,          set_contract_zantei_value, CREATE_SESSION_REQUEST_NOPERU_CONTRACT_ZANTEI_POS_ZANTEI,           4, 0x000000FF);
		
		snap("Zantei Set:", set_contract_zantei_value);
		setvariable(set_contract_zantei, 1); 
	}

    ###################
    # Set Teigaku (Low Class Type & Packet-Scheduling-Indicator)
	case control( set_contract_low_class_type ) {
		setsigdata(CREATE_SESSION_REQUEST_YMODE_CONTRACT_LIMIT_TEIGAKU,    set_contract_low_class_type, CREATE_SESSION_REQUEST_YMODE_CONTRACT_LIMIT_TEIGAKU_POS_LOW_CLASS_TYPE,   4, 0x000000FF);
		setsigdata(CREATE_SESSION_REQUEST_NOPERU_CONTRACT_LIMIT_TEIGAKU,   set_contract_low_class_type, CREATE_SESSION_REQUEST_NOPERU_CONTRACT_LIMIT_TEIGAKU_POS_LOW_CLASS_TYPE,  4, 0x000000FF);
		setsigdata(CREATE_SESSION_REQUEST_YMODE_CONTRACT_TEIGAKU,          set_contract_low_class_type, CREATE_SESSION_REQUEST_YMODE_CONTRACT_TEIGAKU_POS_LOW_CLASS_TYPE,         4, 0x000000FF);
		setsigdata(CREATE_SESSION_REQUEST_NOPERU_CONTRACT_TEIGAKU,         set_contract_low_class_type, CREATE_SESSION_REQUEST_NOPERU_CONTRACT_TEIGAKU_POS_LOW_CLASS_TYPE,        4, 0x000000FF);
		
		snap("Low Class Type Set:", set_contract_low_class_type);
		setvariable(set_contract_teigaku, 1); 
	}
	case control( set_contract_pack_sche_ind ) {
		setsigdata(CREATE_SESSION_REQUEST_YMODE_CONTRACT_LIMIT_TEIGAKU,    set_contract_low_class_type, CREATE_SESSION_REQUEST_YMODE_CONTRACT_LIMIT_TEIGAKU_POS_PACK_SHCE_IND,   4, 0x000000FF);
		setsigdata(CREATE_SESSION_REQUEST_NOPERU_CONTRACT_LIMIT_TEIGAKU,   set_contract_low_class_type, CREATE_SESSION_REQUEST_NOPERU_CONTRACT_LIMIT_TEIGAKU_POS_PACK_SHCE_IND,  4, 0x000000FF);
		setsigdata(CREATE_SESSION_REQUEST_YMODE_CONTRACT_TEIGAKU,          set_contract_low_class_type, CREATE_SESSION_REQUEST_YMODE_CONTRACT_TEIGAKU_POS_PACK_SHCE_IND,         4, 0x000000FF);
		setsigdata(CREATE_SESSION_REQUEST_NOPERU_CONTRACT_TEIGAKU,         set_contract_low_class_type, CREATE_SESSION_REQUEST_NOPERU_CONTRACT_TEIGAKU_POS_PACK_SHCE_IND,        4, 0x000000FF);
		
		snap("Packet-Scheduling-Indicator Set:", set_contract_pack_sche_ind);
		setvariable(set_contract_teigaku, 1); 
	}


    ###################
    # Set User-Information
	case control( set_User-Information ) {
		setsigdata(CREATE_SESSION_REQUEST_YMODE,                        set_User-Information,	CREATE_SESSION_REQUEST_YMODE_POS_USER_INFORMATION,                        3, 0x0000FF);
		setsigdata(CREATE_SESSION_REQUEST_YMODE_CONTRACT_MVNO,          set_User-Information,	CREATE_SESSION_REQUEST_YMODE_CONTRACT_MVNO_POS_USER_INFORMATION,          3, 0x0000FF);
		setsigdata(CREATE_SESSION_REQUEST_YMODE_CONTRACT_LIMIT,         set_User-Information,	CREATE_SESSION_REQUEST_YMODE_CONTRACT_LIMIT_POS_USER_INFORMATION,         3, 0x0000FF);
		setsigdata(CREATE_SESSION_REQUEST_YMODE_CONTRACT_LIMIT_TEIGAKU, set_User-Information,	CREATE_SESSION_REQUEST_YMODE_CONTRACT_LIMIT_TEIGAKU_POS_USER_INFORMATION, 3, 0x0000FF);
		setsigdata(CREATE_SESSION_REQUEST_YMODE_CONTRACT_ZANTEI,        set_User-Information,	CREATE_SESSION_REQUEST_YMODE_CONTRACT_ZANTEI_POS_USER_INFORMATION,        3, 0x0000FF);
		setsigdata(CREATE_SESSION_REQUEST_YMODE_CONTRACT_TEIGAKU,       set_User-Information,	CREATE_SESSION_REQUEST_YMODE_CONTRACT_TEIGAKU_POS_USER_INFORMATION,       3, 0x0000FF);

		setsigdata(CREATE_SESSION_REQUEST_NOPERU,                       set_User-Information,  CREATE_SESSION_REQUEST_NOPERU_POS_USER_INFORMATION,                        3, 0x0000FF);
		setsigdata(CREATE_SESSION_REQUEST_NOPERU_CONTRACT_MVNO,         set_User-Information,  CREATE_SESSION_REQUEST_NOPERU_CONTRACT_MVNO_POS_USER_INFORMATION,          3, 0x0000FF);
		setsigdata(CREATE_SESSION_REQUEST_NOPERU_CONTRACT_LIMIT,        set_User-Information,  CREATE_SESSION_REQUEST_NOPERU_CONTRACT_LIMIT_POS_USER_INFORMATION,         3, 0x0000FF);
		setsigdata(CREATE_SESSION_REQUEST_NOPERU_CONTRACT_LIMIT_TEIGAKU,set_User-Information,  CREATE_SESSION_REQUEST_NOPERU_CONTRACT_LIMIT_TEIGAKU_POS_USER_INFORMATION, 3, 0x0000FF);
		setsigdata(CREATE_SESSION_REQUEST_NOPERU_CONTRACT_ZANTEI,       set_User-Information,  CREATE_SESSION_REQUEST_NOPERU_CONTRACT_ZANTEI_POS_USER_INFORMATION,        3, 0x0000FF);
		setsigdata(CREATE_SESSION_REQUEST_NOPERU_CONTRACT_TEIGAKU,      set_User-Information,  CREATE_SESSION_REQUEST_NOPERU_CONTRACT_TEIGAKU_POS_USER_INFORMATION,       3, 0x0000FF);

		setsigdata(CREATE_SESSION_REQUEST_MVNO,                         set_User-Information,  CREATE_SESSION_REQUEST_MVNO_POS_USER_INFORMATION,                          3, 0x0000FF);

		snap("User Information Set:", set_User-Information);
	}
    
    case expiry(indirect_time) {
        if( indirect_kind == 0x03 ) {
            transit_execute( STATE_OLD_SGW_DETACH );
        }

        if (mode == MODE_LTE) {
            setsigdata( DELETE_INDIRECT_DATA_FORWARDING_TUNNEL_REQUEST,
	                sgw_teid_c, 4, 4, 0xFFFFFFFF );
	    send( DELETE_INDIRECT_DATA_FORWARDING_TUNNEL_REQUEST);
	}
        if (mode == MODE_3G) {
            setsigdata( DELETE_INDIRECT_DATA_FORWARDING_TUNNEL_REQUEST__3G,
	                sgw_teid_c, 4, 4, 0xFFFFFFFF );
	    send( DELETE_INDIRECT_DATA_FORWARDING_TUNNEL_REQUEST__3G);
	}

	transit( STATE_TEST );
    }
    
    case control( cmd_init_state ){
        transit( STATE_TEST );
    }
    case kill {
        transit(NULL_STATE);
    }
}



#==================================================================================================
in STATE_TAU_WO_SGW_TARGET_MME {
    ########## TAU without SGW Change Target MME ##########
    #
    case execution() {

        setvariable( sig_send_count, 0 );

        setsigdata( MODIFY_BEARER_REQUEST_TAU_WO_SGW_TARGET_MME,  sgw_teid_c,
                    MODIFY_BEARER_REQUEST_TAU_WO_SGW_TARGET_MME_POS_HEADER_TEID,  4,  0xFFFFFFFF );
        setsigdata( MODIFY_BEARER_REQUEST_TAU_WO_SGW_TARGET_MME,  sender_f_teid_c,
                    MODIFY_BEARER_REQUEST_TAU_WO_SGW_TARGET_MME_POS_SENDER_F_TEID_C,  4,  0xFFFFFFFF );
        setsigdata( MODIFY_BEARER_REQUEST_TAU_WO_SGW_TARGET_MME,  sender_address,
                    MODIFY_BEARER_REQUEST_TAU_WO_SGW_TARGET_MME_POS_SENDER_ADDRESS,  4,  0xFFFFFFFF );

        setsigdata( MODIFY_BEARER_REQUEST_HO_WO_SGW,  sgw_teid_c,
                    MODIFY_BEARER_REQUEST_HO_WO_SGW_POS_HEADER_TEID,  4,  0xFFFFFFFF );
        setsigdata( MODIFY_BEARER_REQUEST_HO_WO_SGW,  sender_f_teid_c,
                    MODIFY_BEARER_REQUEST_HO_WO_SGW_POS_SENDER_F_TEID_C,  4,  0xFFFFFFFF );
        setsigdata( MODIFY_BEARER_REQUEST_HO_WO_SGW,  sender_address,
                    MODIFY_BEARER_REQUEST_HO_WO_SGW_POS_SENDER_ADDRESS,  4,  0xFFFFFFFF );

        if( active_ebi1 != 0 ){
            snap( "active_ebi1 = ", active_ebi1 );
	    if( ho_kind == KIND_TAU ){
                setsigdata( MODIFY_BEARER_REQUEST_TAU_WO_SGW_TARGET_MME,  active_ebi1,
                            MODIFY_BEARER_REQUEST_TAU_WO_SGW_TARGET_MME_POS_EBI,  1,  0xFF );
                send( MODIFY_BEARER_REQUEST_TAU_WO_SGW_TARGET_MME );
                snap( "send:MODIFY_BEARER_REQUEST_TAU_WO_SGW_TARGET_MME" );
	    } else {
                setsigdata( MODIFY_BEARER_REQUEST_HO_WO_SGW,  active_ebi1,
                            MODIFY_BEARER_REQUEST_HO_WO_SGW_POS_EBI,  1,  0xFF );
                send( MODIFY_BEARER_REQUEST_HO_WO_SGW );
                snap( "send:MODIFY_BEARER_REQUEST_HO_WO_SGW" );
            }
            increase( sig_send_count );
        }
        if( active_ebi2 != 0 ){
            snap( "active_ebi2 = ", active_ebi2 );
	    if( ho_kind == KIND_TAU ){
                setsigdata( MODIFY_BEARER_REQUEST_TAU_WO_SGW_TARGET_MME,  active_ebi2,
                            MODIFY_BEARER_REQUEST_TAU_WO_SGW_TARGET_MME_POS_EBI,  1,  0xFF );
                send( MODIFY_BEARER_REQUEST_TAU_WO_SGW_TARGET_MME );
                snap( "send:MODIFY_BEARER_REQUEST_TAU_WO_SGW_TARGET_MME" );
	    } else {
                setsigdata( MODIFY_BEARER_REQUEST_HO_WO_SGW,  active_ebi2,
                            MODIFY_BEARER_REQUEST_HO_WO_SGW_POS_EBI,  1,  0xFF );
                send( MODIFY_BEARER_REQUEST_HO_WO_SGW );
                snap( "send:MODIFY_BEARER_REQUEST_HO_WO_SGW" );
            }
            increase( sig_send_count );
        }
        if( active_ebi3 != 0 ){
            snap( "active_ebi3 = ", active_ebi3 );
	    if( ho_kind == KIND_TAU ){
                setsigdata( MODIFY_BEARER_REQUEST_TAU_WO_SGW_TARGET_MME,  active_ebi3,
                            MODIFY_BEARER_REQUEST_TAU_WO_SGW_TARGET_MME_POS_EBI,  1,  0xFF );
                send( MODIFY_BEARER_REQUEST_TAU_WO_SGW_TARGET_MME );
                snap( "send:MODIFY_BEARER_REQUEST_TAU_WO_SGW_TARGET_MME" );
	    } else {
                setsigdata( MODIFY_BEARER_REQUEST_HO_WO_SGW,  active_ebi3,
                            MODIFY_BEARER_REQUEST_HO_WO_SGW_POS_EBI,  1,  0xFF );
                send( MODIFY_BEARER_REQUEST_HO_WO_SGW );
                snap( "send:MODIFY_BEARER_REQUEST_HO_WO_SGW" );
            }
            increase( sig_send_count );
        }
    }
    case receive(GTPv2:MODIFY_BEARER_RESPONSE) {
        snap("recv:MODIFY_BEARER_RESPONSE");

        getsigdata( res_cause, 16, 1, 0xFF );
        if( res_cause == 0x10 ) {                         # Response accepted
            snap( "Response Cause OK" );
        }
        else {                                            # Response error
            snap( "Response Cause = ", res_cause );
        }

        decrease( sig_send_count );
        if( sig_send_count == 0 ){
            transit(STATE_TEST);
        }
    }
}



#==================================================================================================
in STATE_RAU_WO_SGW_TARGET_SGSN {
    ########## RAU without SGW Change Target SGSN ##########
    #
    case execution() {
        ### 初期設定
        setvariable( send_mbr_ebi, 0 );
        setvariable( sender_f_teid_c, 0xA );
        if( node_mode == node_SGSN1 ){
            setvariable( sender_address, IPADDR_SGSN1 );
        } else { if( node_mode == node_SGSN2 ){
            setvariable( sender_address, IPADDR_SGSN2 );
        }}

        setsigdata( MODIFY_BEARER_REQUEST_RAU_WO_SGW_TARGET_SGSN,  sgw_teid_c,
                    MODIFY_BEARER_REQUEST_RAU_WO_SGW_TARGET_SGSN_POS_HEADER_TEID,  4,  0xFFFFFFFF );
        setsigdata( MODIFY_BEARER_REQUEST_RAU_WO_SGW_TARGET_SGSN,  sender_f_teid_c,
                    MODIFY_BEARER_REQUEST_RAU_WO_SGW_TARGET_SGSN_POS_SENDER_F_TEID_C,  4,  0xFFFFFFFF );
        setsigdata( MODIFY_BEARER_REQUEST_RAU_WO_SGW_TARGET_SGSN,  sender_address,
                    MODIFY_BEARER_REQUEST_RAU_WO_SGW_TARGET_SGSN_POS_SENDER_ADDRESS,  4,  0xFFFFFFFF );
        setsigdata( DELETE_SESSION_REQUEST, sgw_teid_c, 
                    DELETE_SESSION_REQUEST_POS_HEADER_TEID, 4, 0xFFFFFFFF);
        setsigdata( DELETE_SESSION_REQUEST_RAU_WO_SGW_TARGET_SGSN, sgw_teid_c, 
                    DELETE_SESSION_REQUEST_RAU_WO_SGW_TARGET_SGSN_POS_HEADER_TEID, 4, 0xFFFFFFFF);

        setsigdata( MODIFY_BEARER_REQUEST_HO_WO_SGW__3G,  sgw_teid_c,
                    MODIFY_BEARER_REQUEST_HO_WO_SGW__3G_POS_HEADER_TEID,  4,  0xFFFFFFFF );
        setsigdata( MODIFY_BEARER_REQUEST_HO_WO_SGW__3G,  sender_f_teid_c,
                    MODIFY_BEARER_REQUEST_HO_WO_SGW__3G_POS_SENDER_F_TEID_C,  4,  0xFFFFFFFF );
        setsigdata( MODIFY_BEARER_REQUEST_HO_WO_SGW__3G,  sender_address,
                    MODIFY_BEARER_REQUEST_HO_WO_SGW__3G_POS_SENDER_ADDRESS,  4,  0xFFFFFFFF );

        ### M.B.Reqを送信するEBIを決定
        # カスコン指定されたAPNが存在
        if( active_ebi1 != 0 ){ if( costum_control_apn == active_ebi1_kind ){ 
            setvariable( send_mbr_ebi, active_ebi1 );
        }}
        if( active_ebi2 != 0 ){ if( costum_control_apn == active_ebi2_kind ){
            setvariable( send_mbr_ebi, active_ebi2 );
        }}
        if( active_ebi3 != 0 ){ if( costum_control_apn == active_ebi3_kind ){
            setvariable( send_mbr_ebi, active_ebi3 );
	}}

	# カスコン指定されたAPNが無い場合、最大EBI
	if( send_mbr_ebi == 0 ){
		if( active_ebi1 != 0 ){
			setvariable( send_mbr_ebi, active_ebi1 );
		}
		if( active_ebi2 != 0 ){ if( active_ebi2 > send_mbr_ebi ){
			setvariable( send_mbr_ebi, active_ebi2 );
		}}
		if( active_ebi3 != 0 ){ if( active_ebi3 > send_mbr_ebi ){
			setvariable( send_mbr_ebi, active_ebi3 );
		}}
	}

        ### メッセージ送信
        if( active_ebi1 != 0 ){
            snap( "active_ebi1 = ", active_ebi1 );

            if( active_ebi1 == send_mbr_ebi ){
	        if( ho_kind == KIND_RAU ){
                    setsigdata( MODIFY_BEARER_REQUEST_RAU_WO_SGW_TARGET_SGSN,  active_ebi1,
                                MODIFY_BEARER_REQUEST_RAU_WO_SGW_TARGET_SGSN_POS_EBI,  1,  0xFF );
                    send( MODIFY_BEARER_REQUEST_RAU_WO_SGW_TARGET_SGSN );
                    snap( "send:MODIFY_BEARER_REQUEST_RAU_WO_SGW_TARGET_SGSN" );
		} else {
                    setsigdata( MODIFY_BEARER_REQUEST_HO_WO_SGW__3G,  active_ebi1,
                                MODIFY_BEARER_REQUEST_HO_WO_SGW__3G_POS_EBI,  1,  0xFF );
                    send( MODIFY_BEARER_REQUEST_HO_WO_SGW__3G );
                    snap( "send:MODIFY_BEARER_REQUEST_HO_WO_SGW__3G" );
		}
            } else {
                setsigdata( DELETE_SESSION_REQUEST_RAU_WO_SGW_TARGET_SGSN, active_ebi1, 
                            DELETE_SESSION_REQUEST_RAU_WO_SGW_TARGET_SGSN_POS_BCTXT_EBI, 1, 0xFF);
                send(DELETE_SESSION_REQUEST_RAU_WO_SGW_TARGET_SGSN);
                snap("send:DELETE_SESSION_REQUEST_RAU_WO_SGW_TARGET_SGSN");
            }
        }
        if( active_ebi2 != 0 ){
            snap( "active_ebi2 = ", active_ebi2 );

            if( active_ebi2 == send_mbr_ebi ){
	        if( ho_kind == KIND_RAU ){
                    setsigdata( MODIFY_BEARER_REQUEST_RAU_WO_SGW_TARGET_SGSN,  active_ebi2,
                                MODIFY_BEARER_REQUEST_RAU_WO_SGW_TARGET_SGSN_POS_EBI,  1,  0xFF );
                    send( MODIFY_BEARER_REQUEST_RAU_WO_SGW_TARGET_SGSN );
                    snap( "send:MODIFY_BEARER_REQUEST_RAU_WO_SGW_TARGET_SGSN" );
		} else {
                    setsigdata( MODIFY_BEARER_REQUEST_HO_WO_SGW__3G,  active_ebi2,
                                MODIFY_BEARER_REQUEST_HO_WO_SGW__3G_POS_EBI,  1,  0xFF );
                    send( MODIFY_BEARER_REQUEST_HO_WO_SGW__3G );
                    snap( "send:MODIFY_BEARER_REQUEST_HO_WO_SGW__3G" );
		}
            } else {
                setsigdata( DELETE_SESSION_REQUEST_RAU_WO_SGW_TARGET_SGSN, active_ebi2, 
                            DELETE_SESSION_REQUEST_RAU_WO_SGW_TARGET_SGSN_POS_BCTXT_EBI, 1, 0xFF);
                send(DELETE_SESSION_REQUEST_RAU_WO_SGW_TARGET_SGSN);
                snap("send:DELETE_SESSION_REQUEST_RAU_WO_SGW_TARGET_SGSN");
            }
        }
        if( active_ebi3 != 0 ){
            snap( "active_ebi3 = ", active_ebi3 );

            if( active_ebi3 == send_mbr_ebi ){
	        if( ho_kind == KIND_RAU ){
                    setsigdata( MODIFY_BEARER_REQUEST_RAU_WO_SGW_TARGET_SGSN,  active_ebi3,
                                MODIFY_BEARER_REQUEST_RAU_WO_SGW_TARGET_SGSN_POS_EBI,  1,  0xFF );
                    send( MODIFY_BEARER_REQUEST_RAU_WO_SGW_TARGET_SGSN );
                    snap( "send:MODIFY_BEARER_REQUEST_RAU_WO_SGW_TARGET_SGSN" );
		} else {
                    setsigdata( MODIFY_BEARER_REQUEST_HO_WO_SGW__3G,  active_ebi3,
                                MODIFY_BEARER_REQUEST_HO_WO_SGW__3G_POS_EBI,  1,  0xFF );
                    send( MODIFY_BEARER_REQUEST_HO_WO_SGW__3G );
                    snap( "send:MODIFY_BEARER_REQUEST_HO_WO_SGW__3G" );
		}
            } else {
                setsigdata( DELETE_SESSION_REQUEST_RAU_WO_SGW_TARGET_SGSN, active_ebi3, 
                            DELETE_SESSION_REQUEST_RAU_WO_SGW_TARGET_SGSN_POS_BCTXT_EBI, 1, 0xFF);
                send(DELETE_SESSION_REQUEST_RAU_WO_SGW_TARGET_SGSN);
                snap("send:DELETE_SESSION_REQUEST_RAU_WO_SGW_TARGET_SGSN");
            }
        }
    }
    case receive(GTPv2:MODIFY_BEARER_RESPONSE) {
        snap("recv MODIFY_BEARER_RESPONSE");

        getsigdata( res_cause, 16, 1, 0xFF );
        if( res_cause == 0x10 ) {                         # Response accepted
            snap( "Response Cause OK" );
        }
        else {                                            # Response error
            snap( "Response Cause = ", res_cause );
        }

        ### D.S.Rsp(TEID=0)のため受信検知不可
        ### M.B.RspでD.S.Rsp受信とみなす
        if( active_ebi1 != send_mbr_ebi ){
            setvariable( active_ebi1, 0 );
            if( enb_ipaddr1_ebi_flg == 1 ){
                setvariable( enb_ipaddr1, 0 );
                setvariable( enb_teid_u1, 0 );
                setvariable( enb_ipaddr1_ebi_flg, 0 );
            }
            if( enb_ipaddr2_ebi_flg == 1 ){
                setvariable( enb_ipaddr2, 0 );
                setvariable( enb_teid_u2, 0 );
                setvariable( enb_ipaddr2_ebi_flg, 0 );
            }
            if( enb_ipaddr3_ebi_flg == 1 ){
                setvariable( enb_ipaddr3, 0 );
                setvariable( enb_teid_u3, 0 );
                setvariable( enb_ipaddr3_ebi_flg, 0 );
            }
        }
        if( active_ebi2 != send_mbr_ebi ){
            setvariable( active_ebi2, 0 );
            if( enb_ipaddr1_ebi_flg == 2 ){
                setvariable( enb_ipaddr1, 0 );
                setvariable( enb_teid_u1, 0 );
                setvariable( enb_ipaddr1_ebi_flg, 0 );
            }
            if( enb_ipaddr2_ebi_flg == 2 ){
                setvariable( enb_ipaddr2, 0 );
                setvariable( enb_teid_u2, 0 );
                setvariable( enb_ipaddr2_ebi_flg, 0 );
            }
            if( enb_ipaddr3_ebi_flg == 2 ){
                setvariable( enb_ipaddr3, 0 );
                setvariable( enb_teid_u3, 0 );
                setvariable( enb_ipaddr3_ebi_flg, 0 );
            }
        }
        if( active_ebi3 != send_mbr_ebi ){
            setvariable( active_ebi3, 0 );
            if( enb_ipaddr1_ebi_flg == 3 ){
                setvariable( enb_ipaddr1, 0 );
                setvariable( enb_teid_u1, 0 );
                setvariable( enb_ipaddr1_ebi_flg, 0 );
            }
            if( enb_ipaddr2_ebi_flg == 3 ){
                setvariable( enb_ipaddr2, 0 );
                setvariable( enb_teid_u2, 0 );
                setvariable( enb_ipaddr2_ebi_flg, 0 );
            }
            if( enb_ipaddr3_ebi_flg == 3 ){
                setvariable( enb_ipaddr3, 0 );
                setvariable( enb_teid_u3, 0 );
                setvariable( enb_ipaddr3_ebi_flg, 0 );
            }
        }
        setvariable( active_bearer, 1 );

        transit(STATE_TEST);
    }
}


#==================================================================================================
in STATE_HO_WITHOUT_SGWCHG_INDIRECT_SOURCE {
    case execution () {

        ### C.I.D.F.T.Reqを送信するEBIを決定
        # カスコン指定されたAPNが存在
        setvariable( send_mbr_ebi, 0 );
        if( active_ebi1 != 0 ){ if( costum_control_apn == active_ebi1_kind ){ 
            setvariable( send_mbr_ebi, active_ebi1 );
        }}
        if( active_ebi2 != 0 ){ if( costum_control_apn == active_ebi2_kind ){
            setvariable( send_mbr_ebi, active_ebi2 );
        }}
        if( active_ebi3 != 0 ){ if( costum_control_apn == active_ebi3_kind ){
            setvariable( send_mbr_ebi, active_ebi3 );
	}}

	# カスコン指定されたAPNが無い場合、最大EBI
	if( send_mbr_ebi == 0 ){
		if( active_ebi1 != 0 ){
			setvariable( send_mbr_ebi, active_ebi1 );
		}
		if( active_ebi2 != 0 ){ if( active_ebi2 > send_mbr_ebi ){
			setvariable( send_mbr_ebi, active_ebi2 );
		}}
		if( active_ebi3 != 0 ){ if( active_ebi3 > send_mbr_ebi ){
			setvariable( send_mbr_ebi, active_ebi3 );
		}}
	}

        setsigdata( CREATE_INDIRECT_DATA_FORWARDING_TUNNEL_REQUEST,
	            sgw_teid_c, 4, 4, 0xFFFFFFFF);
        setsigdata( CREATE_INDIRECT_DATA_FORWARDING_TUNNEL_REQUEST__3G,
	            sgw_teid_c, 4, 4, 0xFFFFFFFF);
        setsigdata( CREATE_INDIRECT_DATA_FORWARDING_TUNNEL_REQUEST, send_mbr_ebi,
	            CREATE_INDIRECT_DATA_FORWARDING_TUNNEL_REQUEST_POS_BCTXT_EBI, 1, 0xFF);
        setsigdata( CREATE_INDIRECT_DATA_FORWARDING_TUNNEL_REQUEST__3G, send_mbr_ebi,
	            CREATE_INDIRECT_DATA_FORWARDING_TUNNEL_REQUEST__3G_POS_BCTXT_EBI, 1, 0xFF);
        if( mode == MODE_LTE ) { send( CREATE_INDIRECT_DATA_FORWARDING_TUNNEL_REQUEST     ); }
	if (mode == MODE_3G  ) { send( CREATE_INDIRECT_DATA_FORWARDING_TUNNEL_REQUEST__3G ); }
    }
    case receive (GTPv2:CREATE_INDIRECT_DATA_FORWARDING_TUNNEL_RESPONSE) {

        getsigdata( res_cause, 16, 1, 0xFF );
	if( res_cause == 0x10 ){
	    snap( "Response Cause OK" );
	} else {
	    snap( "Response Cause = ", res_cause );
	}

        if( mode == MODE_3G ){
            isc_send( MME2, SYNCHRO, 459 );    # End report
	}
        if( mode == MODE_LTE ){
            isc_send( SGSN2, SYNCHRO, 460 );    # End report
	}

	start_timer(indirect_time);
    }
}

in STATE_ISC_SEND_PARAMETERS {
    case execution () {

        #####################################################
	### Procedure                        = Operation Code
        # tau_wo_sgw_to_mme2_from_mme1       = 401
        # rau_wo_sgw_to_sgsn2_from_sgsn1     = 402
        # tau_wo_sgw_to_mme2_from_sgsn1      = 403
        # rau_wo_sgw_to_sgsn2_from_mme1      = 404 
        # ho_wo_sgw_to_mme2_from_mme1        = 405
        # ho_wo_sgw_to_sgsn2_from_sgsn1      = 406
        # ho_wo_sgw_to_mme2_from_sgsn1       = 407
        # ho_wo_sgw_to_sgsn2_from_mme1       = 408     
        # idrct_ho_wo_sgw_to_mme2_from_sgsn1 = 409
        # idrct_ho_wo_sgw_to_sgsn2_from_mme1 = 410

        if( isc_operation_code == 401 ){
            setvariable( isc_send_node, node_MME2 );
	}
        if( isc_operation_code == 402 ){
            setvariable( isc_send_node, node_SGSN2 );
	}
        if( isc_operation_code == 403 ){
            setvariable( isc_send_node, node_MME2 );
	}
        if( isc_operation_code == 404 ){
            setvariable( isc_send_node, node_SGSN2 );
	}
        if( isc_operation_code == 405 ){
            setvariable( isc_send_node, node_MME2 );
	}
        if( isc_operation_code == 406 ){
            setvariable( isc_send_node, node_SGSN2 );
	}
        if( isc_operation_code == 407 ){
            setvariable( isc_send_node, node_MME2 );
	}
        if( isc_operation_code == 408 ){
            setvariable( isc_send_node, node_SGSN2 );
	}
        if( isc_operation_code == 409 ){
            setvariable( isc_send_node, node_MME2 );
	}
        if( isc_operation_code == 410 ){
            setvariable( isc_send_node, node_SGSN2 );
	}

	if( isc_send_node == node_MME2 ){
            isc_send( MME2, SYNCHRO, 310, active_ebi1 ); 
            isc_send( MME2, SYNCHRO, 311, active_ebi1_kind ); 
            isc_send( MME2, SYNCHRO, 312, active_ebi1_apn ); 
            isc_send( MME2, SYNCHRO, 313, active_ebi1_useraddr1 ); 
            isc_send( MME2, SYNCHRO, 314, active_ebi1_useraddr2 ); 
            isc_send( MME2, SYNCHRO, 315, active_ebi1_useraddr3 ); 
            isc_send( MME2, SYNCHRO, 316, active_ebi1_useraddr4 ); 
            isc_send( MME2, SYNCHRO, 317, enb_ipaddr1 ); 
            isc_send( MME2, SYNCHRO, 318, enb_ipaddr1_ebi_flg ); 
            isc_send( MME2, SYNCHRO, 319, enb_teid_u1 ); 
            isc_send( MME2, SYNCHRO, 320, pgw_teid_c1 ); 
            
            isc_send( MME2, SYNCHRO, 330, active_ebi2 ); 
            isc_send( MME2, SYNCHRO, 331, active_ebi2_kind ); 
            isc_send( MME2, SYNCHRO, 332, active_ebi2_apn ); 
            isc_send( MME2, SYNCHRO, 333, active_ebi2_useraddr1 ); 
            isc_send( MME2, SYNCHRO, 334, active_ebi2_useraddr2 ); 
            isc_send( MME2, SYNCHRO, 335, active_ebi2_useraddr3 ); 
            isc_send( MME2, SYNCHRO, 336, active_ebi2_useraddr4 ); 
            isc_send( MME2, SYNCHRO, 337, enb_ipaddr2 ); 
            isc_send( MME2, SYNCHRO, 338, enb_ipaddr2_ebi_flg ); 
            isc_send( MME2, SYNCHRO, 339, enb_teid_u2 ); 
            isc_send( MME2, SYNCHRO, 340, pgw_teid_c2 ); 
            
            isc_send( MME2, SYNCHRO, 350, active_ebi3 ); 
            isc_send( MME2, SYNCHRO, 351, active_ebi3_kind ); 
            isc_send( MME2, SYNCHRO, 352, active_ebi3_apn ); 
            isc_send( MME2, SYNCHRO, 353, active_ebi3_useraddr1 ); 
            isc_send( MME2, SYNCHRO, 354, active_ebi3_useraddr2 ); 
            isc_send( MME2, SYNCHRO, 355, active_ebi3_useraddr3 ); 
            isc_send( MME2, SYNCHRO, 356, active_ebi3_useraddr4 ); 
            isc_send( MME2, SYNCHRO, 357, enb_ipaddr3 ); 
            isc_send( MME2, SYNCHRO, 358, enb_ipaddr3_ebi_flg ); 
            isc_send( MME2, SYNCHRO, 359, enb_teid_u3 ); 
            isc_send( MME2, SYNCHRO, 360, pgw_teid_c3 ); 
            
            isc_send( MME2, SYNCHRO, 370, active_bearer ); 
            isc_send( MME2, SYNCHRO, 371, last_ebi ); 
            isc_send( MME2, SYNCHRO, 372, sgw_teid_c ); 
	}
	if( isc_send_node == node_SGSN2 ){
            isc_send( SGSN2, SYNCHRO, 310, active_ebi1 ); 
            isc_send( SGSN2, SYNCHRO, 311, active_ebi1_kind ); 
            isc_send( SGSN2, SYNCHRO, 312, active_ebi1_apn ); 
            isc_send( SGSN2, SYNCHRO, 313, active_ebi1_useraddr1 ); 
            isc_send( SGSN2, SYNCHRO, 314, active_ebi1_useraddr2 ); 
            isc_send( SGSN2, SYNCHRO, 315, active_ebi1_useraddr3 ); 
            isc_send( SGSN2, SYNCHRO, 316, active_ebi1_useraddr4 ); 
            isc_send( SGSN2, SYNCHRO, 317, enb_ipaddr1 ); 
            isc_send( SGSN2, SYNCHRO, 318, enb_ipaddr1_ebi_flg ); 
            isc_send( SGSN2, SYNCHRO, 319, enb_teid_u1 ); 
            isc_send( SGSN2, SYNCHRO, 320, pgw_teid_c1 ); 
            
            isc_send( SGSN2, SYNCHRO, 330, active_ebi2 ); 
            isc_send( SGSN2, SYNCHRO, 331, active_ebi2_kind ); 
            isc_send( SGSN2, SYNCHRO, 332, active_ebi2_apn ); 
            isc_send( SGSN2, SYNCHRO, 333, active_ebi2_useraddr1 ); 
            isc_send( SGSN2, SYNCHRO, 334, active_ebi2_useraddr2 ); 
            isc_send( SGSN2, SYNCHRO, 335, active_ebi2_useraddr3 ); 
            isc_send( SGSN2, SYNCHRO, 336, active_ebi2_useraddr4 ); 
            isc_send( SGSN2, SYNCHRO, 337, enb_ipaddr2 ); 
            isc_send( SGSN2, SYNCHRO, 338, enb_ipaddr2_ebi_flg ); 
            isc_send( SGSN2, SYNCHRO, 339, enb_teid_u2 ); 
            isc_send( SGSN2, SYNCHRO, 340, pgw_teid_c2 ); 
            
            isc_send( SGSN2, SYNCHRO, 350, active_ebi3 ); 
            isc_send( SGSN2, SYNCHRO, 351, active_ebi3_kind ); 
            isc_send( SGSN2, SYNCHRO, 352, active_ebi3_apn ); 
            isc_send( SGSN2, SYNCHRO, 353, active_ebi3_useraddr1 ); 
            isc_send( SGSN2, SYNCHRO, 354, active_ebi3_useraddr2 ); 
            isc_send( SGSN2, SYNCHRO, 355, active_ebi3_useraddr3 ); 
            isc_send( SGSN2, SYNCHRO, 356, active_ebi3_useraddr4 ); 
            isc_send( SGSN2, SYNCHRO, 357, enb_ipaddr3 ); 
            isc_send( SGSN2, SYNCHRO, 358, enb_ipaddr3_ebi_flg ); 
            isc_send( SGSN2, SYNCHRO, 359, enb_teid_u3 ); 
            isc_send( SGSN2, SYNCHRO, 360, pgw_teid_c3 ); 
            
            isc_send( SGSN2, SYNCHRO, 370, active_bearer ); 
            isc_send( SGSN2, SYNCHRO, 371, last_ebi ); 
            isc_send( SGSN2, SYNCHRO, 372, sgw_teid_c ); 
	}

        if( isc_operation_code == 401 ){

	    isc_send( MME2, SYNCHRO, 451 );    # End Report

	}
        if( isc_operation_code == 402 ){

    	    isc_send( SGSN2, SYNCHRO, 452 );   # End Report

	}
        if( isc_operation_code == 403 ){

	    isc_send( MME2, SYNCHRO, 453 );    # End Report

	}
        if( isc_operation_code == 404 ){

    	    isc_send( SGSN2, SYNCHRO, 454 );   # End Report

	}
        if( isc_operation_code == 405 ){

	    isc_send( MME2, SYNCHRO, 455 );    # End Report

	}
        if( isc_operation_code == 406 ){

    	    isc_send( SGSN2, SYNCHRO, 456 );   # End Report

	}
        if( isc_operation_code == 407 ){

    	    isc_send( MME2, SYNCHRO, 457 );    # End Report

	}
        if( isc_operation_code == 408 ){

	    isc_send( SGSN2, SYNCHRO, 458 );   # End Report

	}
        if( isc_operation_code == 409 ){

	    transit_execute( STATE_HO_WITHOUT_SGWCHG_INDIRECT_SOURCE );

	}
        if( isc_operation_code == 410 ){

	    transit_execute( STATE_HO_WITHOUT_SGWCHG_INDIRECT_SOURCE );

	}

	transit( STATE_TEST );
    }
}


###########################################################################################
# PDU Definition
###########################################################################################


#=======================================================================================
#     #   #      #   #   ###   ###    #####  
#      # #       ## ##  #   #  #  #   #      
#       #   #### # # #  #   #  #   #  ####   
#       #        #   #  #   #  #  #   #      
#       #        #   #   ###   ###    #####  
#=======================================================================================
pdu CREATE_SESSION_REQUEST_YMODE {
	4820 0135 00000000 00000f00 
	01 0008 00 
		44101045000403f4
	4c 0006 00			# MSISDN
		180881171074		
	4b 0008 00 1111111111111111	# MEI
	56 000d 00 1844f0010903 44f00100 123450 	# ULI
	53 0003 00 44f001		# Serving network
	52 0001 00 06 			# RAT Type
	4d 0002 00 0004			# Indication
	57 0009 00			# F-TEID(I/F-Type=10(S11MME GTP-C interface))
		8a 00000003 ac1efc14
	57 0009 01 			# F-TEID(I/F-Type= 9(S5/S8 PGW PMIPv6 interface))
		89 00000000 AC1EBF84
	47 0027 00 
		06 792d6d6f6465 # "y-mode.docomo.ne.jp" #[POS_APN]
		06 646f636f6d6f
		02 6e65 
		02 6a70
		06 6d6e63303130	# "mnc010.mcc440.gprs"
		06 6d6363343430
		04 67707273
	80 0001 00		# selection mode 
		00
	63 0001 00		# PDN Type
		02
	4f 0012 00		# PAA
		02 00 0000000000000000 0000000000000000
	7f 0001 00
		00
	48 0008 00
		03e41800 03e41800	# AMBR
	
	### PCO
	4e 0030 00
		80	# ext
		## PAP
		c023
		16 01 00
		0016
			06 757365726e31
			0a 70617373776f72646e31
		## DNSv6 Address
		0003 00
		
		## TIP
		f001 06 
			01 0006 	 # FOMA端末識別
				01 03 45 #   FOMA外 / Dual / pad / pad / pad / U着 / PoC / 拡U着
		
		## DOCOMO EXTENSION
		f002 07
			0b 05 1234561212 # IMEISV
		
	### Bearer Context
	5d 001f 00		
		49 0001 00 	# EBI
			05 		#[POS_BCTXT_EBI]
		50 0016 00	# QoS
			7c 09 0000000000 0000000000 
			      0000000000 0000000000
			      
	03 0001 00 07	# Recovery
	
	### PE
	ff 0012 00
		0580 
		01 0001 0a 	# Subscribed-Carrier-Name
		02 0003 2143f5	# CA-Code
		#04 0001 01	# Low Class Type: 1:all, 2:A, 3:B, 4:C, 5:D
		#05 0001 01	# 暫定開通フラグ: 1:オン暫, 2:OTA暫
		#06 0001 00	# リミ契フラグ: 0:未超過, 1:超過
		#08 0002 01 02 	# MVNO: Oct1:MVNO-ID,  Oct2: pad / pad / pad / S5-Ind / 3big:MVNO-Kind 1:専, 2:汎基, 3:汎オ
		#09 0001 00	# Packet-Schceduling-Indicator: 0:非対象, 1:A, 2:B, 3:C
		11 0003 	# DOCOMO-CONTAINER
			00 01 01	# User-Information #[POS_USER_INFORMATION]
}




#=======================================================================================
#     #   #      #   #   ###   ###    #####     #      ###  #   #  ###  ##### 
#      # #       ## ##  #   #  #  #   #         #       #   ## ##   #     #   
#       #   #### # # #  #   #  #   #  ####      #       #   # # #   #     #   
#       #        #   #  #   #  #  #   #         #       #   #   #   #     #   
#       #        #   #   ###   ###    #####     #####  ###  #   #  ###    #   
#=======================================================================================
pdu CREATE_SESSION_REQUEST_YMODE_CONTRACT_LIMIT {
	4820 0139 00000000 00000f00 
	01 0008 00 
		44101045000403f4
	4c 0006 00			# MSISDN
		180881171074		
	4b 0008 00 1111111111111111	# MEI
	56 000d 00 1844f0010903 44f00100 123450 	# ULI
	53 0003 00 44f001		# Serving network
	52 0001 00 06 			# RAT Type
	4d 0002 00 0004			# Indication
	57 0009 00			# F-TEID(I/F-Type=10(S11MME GTP-C interface))
		8a 00000003 ac1efc14
	57 0009 01 			# F-TEID(I/F-Type= 9(S5/S8 PGW PMIPv6 interface))
		89 00000000 AC1EBE44
	47 0027 00 
		06 792d6d6f6465 # "y-mode.docomo.ne.jp" #[POS_APN]
		06 646f636f6d6f
		02 6e65 
		02 6a70
		06 6d6e63303130	# "mnc010.mcc440.gprs"
		06 6d6363343430
		04 67707273
	80 0001 00		# selection mode 
		00
	63 0001 00		# PDN Type
		02
	4f 0012 00		# PAA
		02 00 0000000000000000 0000000000000000
	7f 0001 00
		00
	48 0008 00
		03e41800 03e41800	# AMBR
	
	### PCO
	4e 0030 00
		80	# ext
		## PAP
		c023
		16 01 00
		0016
			06 757365726e31
			0a 70617373776f72646e31
		## DNSv6 Address
		0003 00
		
		## TIP
		f001 06 
			01 0006 	 # FOMA端末識別
				01 03 45 #   FOMA外 / Dual / pad / pad / pad / U着 / PoC / 拡U着
		
		## DOCOMO EXTENSION
		f002 07
			0b 05 1234561212 # IMEISV
		
	### Bearer Context
	5d 001f 00		
		49 0001 00 	# EBI
			05 		#[POS_BCTXT_EBI]
		50 0016 00	# QoS
			7c 09 0000000000 0000000000 
			      0000000000 0000000000
			      
	03 0001 00 07	# Recovery
	
	### PE
	ff 0016 00
		0580 
		01 0001 0a 	# Subscribed-Carrier-Name
		02 0003 2143f5	# CA-Code
		#04 0001 01	# Low Class Type: 1:all, 2:A, 3:B, 4:C, 5:D
		#05 0001 01	# 暫定開通フラグ: 1:オン暫, 2:OTA暫
		06 0001 00	# リミ契フラグ: 0:未超過, 1:超過   #[POS_LIMIT_FLAG]
		#08 0002 01 02 	# MVNO: Oct1:MVNO-ID,  Oct2: pad / pad / pad / S5-Ind / 3big:MVNO-Kind 1:専, 2:汎基, 3:汎オ
		#09 0001 00	# Packet-Schceduling-Indicator: 0:非対象, 1:A, 2:B, 3:C
		11 0003 	# DOCOMO-CONTAINER
			00 01 01	# User-Information #[POS_USER_INFORMATION]
}




#=======================================================================================
#     #   #      #   #   ###   ###    #####     #      ###  #   #  ###  #####    ##    #####  #####  ###   ###     #    #   #  #   #  
#      # #       ## ##  #   #  #  #   #         #       #   ## ##   #     #     #  #     #    #       #   #       # #   #  #   #   #  
#       #   #### # # #  #   #  #   #  ####      #       #   # # #   #     #      ## #    #    ####    #   #  ##  #####  ###    #   #  
#       #        #   #  #   #  #  #   #         #       #   #   #   #     #     #  #     #    #       #   #   #  #   #  # #    #   #  
#       #        #   #   ###   ###    #####     #####  ###  #   #  ###    #      ## #    #    #####  ###   ###   #   #  #  ##   ###   
#=======================================================================================
pdu CREATE_SESSION_REQUEST_YMODE_CONTRACT_LIMIT_TEIGAKU {
	4820 0141 00000000 00000f00 
	01 0008 00 
		44101045000403f4
	4c 0006 00			# MSISDN
		180881171074		
	4b 0008 00 1111111111111111	# MEI
	56 000d 00 1844f0010903 44f00100 123450 	# ULI
	53 0003 00 44f001		# Serving network
	52 0001 00 06 			# RAT Type
	4d 0002 00 0004			# Indication
	57 0009 00			# F-TEID(I/F-Type=10(S11MME GTP-C interface))
		8a 00000003 ac1efc14
	57 0009 01 			# F-TEID(I/F-Type= 9(S5/S8 PGW PMIPv6 interface))
		89 00000000 AC1EBE44
	47 0027 00 
		06 792d6d6f6465 # "y-mode.docomo.ne.jp" #[POS_APN]
		06 646f636f6d6f
		02 6e65 
		02 6a70
		06 6d6e63303130	# "mnc010.mcc440.gprs"
		06 6d6363343430
		04 67707273
	80 0001 00		# selection mode 
		00
	63 0001 00		# PDN Type
		02
	4f 0012 00		# PAA
		02 00 0000000000000000 0000000000000000
	7f 0001 00
		00
	48 0008 00
		03e41800 03e41800	# AMBR
	
	### PCO
	4e 0030 00
		80	# ext
		## PAP
		c023
		16 01 00
		0016
			06 757365726e31
			0a 70617373776f72646e31
		## DNSv6 Address
		0003 00
		
		## TIP
		f001 06 
			01 0006 	 # FOMA端末識別
				01 03 45 #   FOMA外 / Dual / pad / pad / pad / U着 / PoC / 拡U着
		
		## DOCOMO EXTENSION
		f002 07
			0b 05 1234561212 # IMEISV
		
	### Bearer Context
	5d 001f 00		
		49 0001 00 	# EBI
			05 		#[POS_BCTXT_EBI]
		50 0016 00	# QoS
			7c 09 0000000000 0000000000 
			      0000000000 0000000000
			      
	03 0001 00 07	# Recovery
	
	### PE
	ff 001e 00
		0580 
		01 0001 0a 	# Subscribed-Carrier-Name
		02 0003 2143f5	# CA-Code
		04 0001 01	# Low Class Type: 1:all, 2:A, 3:B, 4:C, 5:D #[POS_LOW_CLASS_TYPE]
		#05 0001 01	# 暫定開通フラグ: 1:オン暫, 2:OTA暫
		06 0001 00	# リミ契フラグ: 0:未超過, 1:超過   #[POS_LIMIT_FLAG]
		#08 0002 01 02 	# MVNO: Oct1:MVNO-ID,  Oct2: pad / pad / pad / S5-Ind / 3big:MVNO-Kind 1:専, 2:汎基, 3:汎オ
		09 0001 01	# Packet-Schceduling-Indicator: 0:非対象, 1:A, 2:B, 3:C  #[POS_PACK_SHCE_IND]
		11 0003 	# DOCOMO-CONTAINER
			00 01 01	# User-Information #[POS_USER_INFORMATION]
}




#=======================================================================================
#     #   #      #   #   ###   ###    #####    #####  #####  ###   ###     #    #   #  #   #  
#      # #       ## ##  #   #  #  #   #          #    #       #   #       # #   #  #   #   #  
#       #   #### # # #  #   #  #   #  ####       #    ####    #   #  ##  #####  ###    #   #  
#       #        #   #  #   #  #  #   #          #    #       #   #   #  #   #  # #    #   #  
#       #        #   #   ###   ###    #####      #    #####  ###   ###   #   #  #  ##   ###   
#=======================================================================================
pdu CREATE_SESSION_REQUEST_YMODE_CONTRACT_TEIGAKU {
	4820 013d 00000000 00000f00 
	01 0008 00 
		44101045000403f4
	4c 0006 00			# MSISDN
		180881171074		
	4b 0008 00 1111111111111111	# MEI
	56 000d 00 1844f0010903 44f00100 123450 	# ULI
	53 0003 00 44f001		# Serving network
	52 0001 00 06 			# RAT Type
	4d 0002 00 0004			# Indication
	57 0009 00			# F-TEID(I/F-Type=10(S11MME GTP-C interface))
		8a 00000003 ac1efc14
	57 0009 01 			# F-TEID(I/F-Type= 9(S5/S8 PGW PMIPv6 interface))
		89 00000000 AC1EBE44
	47 0027 00 
		06 792d6d6f6465 # "y-mode.docomo.ne.jp" #[POS_APN]
		06 646f636f6d6f
		02 6e65 
		02 6a70
		06 6d6e63303130	# "mnc010.mcc440.gprs"
		06 6d6363343430
		04 67707273
	80 0001 00		# selection mode 
		00
	63 0001 00		# PDN Type
		02
	4f 0012 00		# PAA
		02 00 0000000000000000 0000000000000000
	7f 0001 00
		00
	48 0008 00
		03e41800 03e41800	# AMBR
	
	### PCO
	4e 0030 00
		80	# ext
		## PAP
		c023
		16 01 00
		0016
			06 757365726e31
			0a 70617373776f72646e31
		## DNSv6 Address
		0003 00
		
		## TIP
		f001 06 
			01 0006 	 # FOMA端末識別
				01 03 45 #   FOMA外 / Dual / pad / pad / pad / U着 / PoC / 拡U着
		
		## DOCOMO EXTENSION
		f002 07
			0b 05 1234561212 # IMEISV
		
	### Bearer Context
	5d 001f 00		
		49 0001 00 	# EBI
			05 		#[POS_BCTXT_EBI]
		50 0016 00	# QoS
			7c 09 0000000000 0000000000 
			      0000000000 0000000000
			      
	03 0001 00 07	# Recovery
	
	### PE
	ff 001a 00
		0580 
		01 0001 0a 	# Subscribed-Carrier-Name
		02 0003 2143f5	# CA-Code
		04 0001 01	# Low Class Type: 1:all, 2:A, 3:B, 4:C, 5:D #[POS_LOW_CLASS_TYPE]
		#05 0001 01	# 暫定開通フラグ: 1:オン暫, 2:OTA暫
		#06 0001 00	# リミ契フラグ: 0:未超過, 1:超過   #[POS_LIMIT_FLAG]
		#08 0002 01 02 	# MVNO: Oct1:MVNO-ID,  Oct2: pad / pad / pad / S5-Ind / 3big:MVNO-Kind 1:専, 2:汎基, 3:汎オ
		09 0001 01	# Packet-Schceduling-Indicator: 0:非対象, 1:A, 2:B, 3:C  #[POS_PACK_SHCE_IND]
		11 0003 	# DOCOMO-CONTAINER
			00 01 01	# User-Information #[POS_USER_INFORMATION]
}





#=======================================================================================
#     #   #      #   #   ###   ###    #####        ###    ###   #   #  ##### 
#      # #       ## ##  #   #  #  #   #           #   #  #   #  ##  #    #   
#       #   #### # # #  #   #  #   #  ####        #      #   #  # # #    #   
#       #        #   #  #   #  #  #   #           #   #  #   #  #  ##    #   
#       #        #   #   ###   ###    #####        ###    ###   #   #    #   
#=======================================================================================
#### 
#### 「PEにMVNO有り」以外はYMODEと同じ、直接は弄らない
#### 
pdu CREATE_SESSION_REQUEST_YMODE_CONTRACT_MVNO {
	4820 013a 00000000 00000f00 
	01 0008 00 
		44101045000403f4
	4c 0006 00			# MSISDN
		180881171074		
	4b 0008 00 1111111111111111	# MEI
	56 000d 00 1844f0010903 44f00100 123450 	# ULI
	53 0003 00 44f001		# Serving network
	52 0001 00 06 			# RAT Type
	4d 0002 00 0004			# Indication
	57 0009 00			# F-TEID(I/F-Type=10(S11MME GTP-C interface))
		8a 00000003 ac1efc14
	57 0009 01 			# F-TEID(I/F-Type= 9(S5/S8 PGW PMIPv6 interface))
		89 00000000 AC1EBE44
	47 0027 00 
		06 792d6d6f6465 # "y-mode.docomo.ne.jp" #[POS_APN]
		06 646f636f6d6f
		02 6e65 
		02 6a70
		06 6d6e63303130	# "mnc010.mcc440.gprs"
		06 6d6363343430
		04 67707273
	80 0001 00		# selection mode 
		00
	63 0001 00		# PDN Type
		02
	4f 0012 00		# PAA
		02 00 0000000000000000 0000000000000000
	7f 0001 00
		00
	48 0008 00
		03e41800 03e41800	# AMBR
	
	### PCO
	4e 0030 00
		80	# ext
		## PAP
		c023
		16 01 00
		0016
			06 757365726e31
			0a 70617373776f72646e31
		## DNSv6 Address
		0003 00
		
		## TIP
		f001 06 
			01 0006 	 # FOMA端末識別
				01 03 45 #   FOMA外 / Dual / pad / pad / pad / U着 / PoC / 拡U着
		
		## DOCOMO EXTENSION
		f002 07
			0b 05 1234561212 # IMEISV
		
	### Bearer Context
	5d 001f 00		
		49 0001 00 	# EBI
			05 		#[POS_BCTXT_EBI]
		50 0016 00	# QoS
			7c 09 0000000000 0000000000 
			      0000000000 0000000000
			      
	03 0001 00 07	# Recovery
	
	### PE
	ff 0017 00
		0580 
		01 0001 0a 	# Subscribed-Carrier-Name
		02 0003 2143f5	# CA-Code
		#04 0001 01	# Low Class Type: 1:all, 2:A, 3:B, 4:C, 5:D
		#05 0001 01	# 暫定開通フラグ: 1:オン暫, 2:OTA暫
		#06 0001 00	# リミ契フラグ: 0:未超過, 1:超過
		08 0002 01 02 	# MVNO: Oct1:MVNO-ID,  Oct2: pad / pad / pad / S5-Ind / 3big:MVNO-Kind 1:専, 2:汎基, 3:汎オ
		#09 0001 00	# Packet-Schceduling-Indicator: 0:非対象, 1:A, 2:B, 3:C
		11 0003 	# DOCOMO-CONTAINER
			00 01 01	# User-Information #[POS_USER_INFORMATION]
}




#=======================================================================================
#     #   #      #   #   ###   ###    #####     #####    #    #   #  #####    #    ###  
#      # #       ## ##  #   #  #  #   #            #    # #   ##  #    #     # #    #   
#       #   #### # # #  #   #  #   #  ####        #    #####  # # #    #    #####   #   
#       #        #   #  #   #  #  #   #          #  #  #   #  #  ##    #    #   #   #   
#       #        #   #   ###   ###    #####     #####  #   #  #   #    #    #   #  ###  
#=======================================================================================
#### 
#### 「PEにMVNO有り」以外はYMODEと同じ、直接は弄らない
#### 
pdu CREATE_SESSION_REQUEST_YMODE_CONTRACT_ZANTEI {
	4820 0139 00000000 00000f00 
	01 0008 00 
		44101045000403f4
	4c 0006 00			# MSISDN
		180881171074		
	4b 0008 00 1111111111111111	# MEI
	56 000d 00 1844f0010903 44f00100 123450 	# ULI
	53 0003 00 44f001		# Serving network
	52 0001 00 06 			# RAT Type
	4d 0002 00 0004			# Indication
	57 0009 00			# F-TEID(I/F-Type=10(S11MME GTP-C interface))
		8a 00000003 ac1efc14
	57 0009 01 			# F-TEID(I/F-Type= 9(S5/S8 PGW PMIPv6 interface))
		89 00000000 AC1EBE44
	47 0027 00 
		06 792d6d6f6465 # "y-mode.docomo.ne.jp" #[POS_APN]
		06 646f636f6d6f
		02 6e65 
		02 6a70
		06 6d6e63303130	# "mnc010.mcc440.gprs"
		06 6d6363343430
		04 67707273
	80 0001 00		# selection mode 
		00
	63 0001 00		# PDN Type
		02
	4f 0012 00		# PAA
		02 00 0000000000000000 0000000000000000
	7f 0001 00
		00
	48 0008 00
		03e41800 03e41800	# AMBR
	
	### PCO
	4e 0030 00
		80	# ext
		## PAP
		c023
		16 01 00
		0016
			06 757365726e31
			0a 70617373776f72646e31
		## DNSv6 Address
		0003 00
		
		## TIP
		f001 06 
			01 0006 	 # FOMA端末識別
				01 03 45 #   FOMA外 / Dual / pad / pad / pad / U着 / PoC / 拡U着
		
		## DOCOMO EXTENSION
		f002 07
			0b 05 1234561212 # IMEISV
		
	### Bearer Context
	5d 001f 00		
		49 0001 00 	# EBI
			05 		#[POS_BCTXT_EBI]
		50 0016 00	# QoS
			7c 09 0000000000 0000000000 
			      0000000000 0000000000
			      
	03 0001 00 07	# Recovery
	
	### PE
	ff 0016 00
		0580 
		01 0001 0a 	# Subscribed-Carrier-Name
		02 0003 2143f5	# CA-Code
		#04 0001 01	# Low Class Type: 1:all, 2:A, 3:B, 4:C, 5:D
		05 0001 01	# 暫定開通フラグ: 1:オン暫, 2:OTA暫 #[POS_ZANTEI]
		#06 0001 00	# リミ契フラグ: 0:未超過, 1:超過
		#08 0002 01 02 	# MVNO: Oct1:MVNO-ID,  Oct2: pad / pad / pad / S5-Ind / 3big:MVNO-Kind 1:専, 2:汎基, 3:汎オ
		#09 0001 00	# Packet-Schceduling-Indicator: 0:非対象, 1:A, 2:B, 3:C
		11 0003 	# DOCOMO-CONTAINER
			00 01 01	# User-Information #[POS_USER_INFORMATION]
}







#=======================================================================================
#     #   #   ###   ####   #####  ####   #   #  
#     ##  #  #   #  #   #  #      #   #  #   #  
#     # # #  #   #  ####   ####   ####   #   #  
#     #  ##  #   #  #      #      #  #   #   #  
#     #   #   ###   #      #####  #   #   ###   tag_kopera
#=======================================================================================
pdu CREATE_SESSION_REQUEST_NOPERU
{
	4820 0126 00000000 00000f00 
	01 0008 00 
		44101045000403f4
	4c 0006 00			# MSISDN
		180881171074		
	4b 0008 00 1111111111111111	# MEI
	56 000d 00 1844f0010903 44f00100 123450 	# ULI
	53 0003 00 44f001		# Serving network
	52 0001 00 06 			# RAT Type
	4d 0002 00 0004			# Indication
	57 0009 00			# F-TEID(I/F-Type=10(S11MME GTP-C interface))
		8a 00000003 C0A8D948
	57 0009 01 			# F-TEID(I/F-Type= 9(S5/S8 PGW PMIPv6 interface))
		89 00000000 AC1EBF84
	47 0020 00 
		06 6b6f70657261 # "kopera.ne.jp" #[POS_APN]
		02 6e65 
		02 6a70
		06 6d6e63303130	# "mnc010.mcc440.gprs"
		06 6d6363343430
		04 67707273
	80 0001 00		# selection mode 
		00
	63 0001 00
		01
	4f 0005 00
		01 00000000 
	7f 0001 00
		00
	48 0008 00 03e41800 03e41800	# AMBR
	
	### PCO
	4e 0035 00
		80	# ext
		c023	# PAP
		18
		01
		00
		0018
			0d 646267406e65632e636f2e6a70
			05 6775657374
		8021 	# IPCP
		16
		01
		00
		0016
			03 06 00000000
			81 06 00000000
			83 06 00000000
	### Bearer Context
	5d 001f 00		
		49 0001 00 	# EBI
			05 		#[POS_BCTXT_EBI]
		50 0016 00	# QoS
			7c 09 0000000000 0000000000 
			      0000000000 0000000000
			      
	03 0001 00 07	# Recovery
	
	### PE
	ff 0012 00
		0580 
		01 0001 0a 	# Subscribed-Carrier-Name
		02 0003 2143f5	# CA-Code
		#04 0001 01	# Low Class Type: 1:all, 2:A, 3:B, 4:C, 5:D
		#05 0001 01	# 暫定開通フラグ: 1:オン暫, 2:OTA暫
		#06 0001 00	# リミ契フラグ: 0:未超過, 1:超過
		#08 0002 01 02 	# MVNO: Oct1:MVNO-ID,  Oct2: pad / pad / pad / S5-Ind / 3big:MVNO-Kind 1:専, 2:汎基, 3:汎オ
		#09 0001 00	# Packet-Schceduling-Indicator: 0:非対象, 1:A, 2:B, 3:C
		11 0003 	# DOCOMO-CONTAINER
			00 01 00	# User-Information #[POS_USER_INFORMATION]
}




#=======================================================================================
#     #   #   ###   ####   #####  ####   #   #      #      ###  #   #  ###  ##### 
#     ##  #  #   #  #   #  #      #   #  #   #      #       #   ## ##   #     #   
#     # # #  #   #  ####   ####   ####   #   #      #       #   # # #   #     #   
#     #  ##  #   #  #      #      #  #   #   #      #       #   #   #   #     #   
#     #   #   ###   #      #####  #   #   ###       #####  ###  #   #  ###    #   
#=======================================================================================
pdu CREATE_SESSION_REQUEST_NOPERU_CONTRACT_LIMIT
{
	4820 0122 00000000 00000f00 
	01 0008 00 
		44101045000403f4
	4c 0006 00			# MSISDN
		180881171074		
	4b 0008 00 1111111111111111	# MEI
	56 000d 00 1844f0010903 44f00100 123450 	# ULI
	53 0003 00 44f001		# Serving network
	52 0001 00 06 			# RAT Type
	4d 0002 00 0004			# Indication
	57 0009 00			# F-TEID(I/F-Type=10(S11MME GTP-C interface))
		8a 00000003 ac1efc14
	57 0009 01 			# F-TEID(I/F-Type= 9(S5/S8 PGW PMIPv6 interface))
		89 00000000 AC1EBE44
	47 0020 00 
		06 6b6f70657261 # "kopera.ne.jp" #[POS_APN]
		02 6e65 
		02 6a70
		06 6d6e63303130	# "mnc010.mcc440.gprs"
		06 6d6363343430
		04 67707273
	80 0001 00		# selection mode 
		00
	63 0001 00
		01
	4f 0005 00
		01 00000000 
	7f 0001 00
		00
	48 0008 00 03e41800 03e41800	# AMBR
	
	### PCO
	4e 002d 00
		80	# ext
		8021 	# IPCP
		10
		01
		00
		0010
			03 06 00000000
			81 06 00000000
		c023	# PAP
		16
		01
		00
		0016
			06 757365726e31
			0a 70617373776f72646e31
	### Bearer Context
	5d 001f 00		
		49 0001 00 	# EBI
			05 		#[POS_BCTXT_EBI]
		50 0016 00	# QoS
			7c 09 0000000000 0000000000 
			      0000000000 0000000000
			      
	03 0001 00 07	# Recovery
	
	### PE
	ff 0016 00
		0580 
		01 0001 0a 	# Subscribed-Carrier-Name
		02 0003 2143f5	# CA-Code
		#04 0001 01	# Low Class Type: 1:all, 2:A, 3:B, 4:C, 5:D
		#05 0001 01	# 暫定開通フラグ: 1:オン暫, 2:OTA暫
		06 0001 00	# リミ契フラグ: 0:未超過, 1:超過     #[POS_LIMIT_FLAG]
		#08 0002 01 02 	# MVNO: Oct1:MVNO-ID,  Oct2: pad / pad / pad / S5-Ind / 3big:MVNO-Kind 1:専, 2:汎基, 3:汎オ
		#09 0001 00	# Packet-Schceduling-Indicator: 0:非対象, 1:A, 2:B, 3:C
		11 0003 	# DOCOMO-CONTAINER
			00 01 01	# User-Information #[POS_USER_INFORMATION]
}




#=======================================================================================
#     #   #   ###   ####   #####  ####   #   #      #      ###  #   #  ###  #####    ##    #####  #####  ###   ###     #    #   #  #   #  
#     ##  #  #   #  #   #  #      #   #  #   #      #       #   ## ##   #     #     #  #     #    #       #   #       # #   #  #   #   #  
#     # # #  #   #  ####   ####   ####   #   #      #       #   # # #   #     #      ## #    #    ####    #   #  ##  #####  ###    #   #  
#     #  ##  #   #  #      #      #  #   #   #      #       #   #   #   #     #     #  #     #    #       #   #   #  #   #  # #    #   #  
#     #   #   ###   #      #####  #   #   ###       #####  ###  #   #  ###    #      ## #    #    #####  ###   ###   #   #  #  ##   ###   
#=======================================================================================
pdu CREATE_SESSION_REQUEST_NOPERU_CONTRACT_LIMIT_TEIGAKU
{
	4820 012a 00000000 00000f00 
	01 0008 00 
		44101045000403f4
	4c 0006 00			# MSISDN
		180881171074		
	4b 0008 00 1111111111111111	# MEI
	56 000d 00 1844f0010903 44f00100 123450 	# ULI
	53 0003 00 44f001		# Serving network
	52 0001 00 06 			# RAT Type
	4d 0002 00 0004			# Indication
	57 0009 00			# F-TEID(I/F-Type=10(S11MME GTP-C interface))
		8a 00000003 ac1efc14
	57 0009 01 			# F-TEID(I/F-Type= 9(S5/S8 PGW PMIPv6 interface))
		89 00000000 AC1EBE44
	47 0020 00 
		06 6b6f70657261 # "kopera.ne.jp" #[POS_APN]
		02 6e65 
		02 6a70
		06 6d6e63303130	# "mnc010.mcc440.gprs"
		06 6d6363343430
		04 67707273
	80 0001 00		# selection mode 
		00
	63 0001 00
		01
	4f 0005 00
		01 00000000 
	7f 0001 00
		00
	48 0008 00 03e41800 03e41800	# AMBR
	
	### PCO
	4e 002d 00
		80	# ext
		8021 	# IPCP
		10
		01
		00
		0010
			03 06 00000000
			81 06 00000000
		c023	# PAP
		16
		01
		00
		0016
			06 757365726e31
			0a 70617373776f72646e31
	### Bearer Context
	5d 001f 00		
		49 0001 00 	# EBI
			05 		#[POS_BCTXT_EBI]
		50 0016 00	# QoS
			7c 09 0000000000 0000000000 
			      0000000000 0000000000
			      
	03 0001 00 07	# Recovery
	
	### PE
	ff 001e 00
		0580 
		01 0001 0a 	# Subscribed-Carrier-Name
		02 0003 2143f5	# CA-Code
		04 0001 01	# Low Class Type: 1:all, 2:A, 3:B, 4:C, 5:D #[POS_LOW_CLASS_TYPE]
		#05 0001 01	# 暫定開通フラグ: 1:オン暫, 2:OTA暫
		06 0001 00	# リミ契フラグ: 0:未超過, 1:超過   #[POS_LIMIT_FLAG]
		#08 0002 01 02 	# MVNO: Oct1:MVNO-ID,  Oct2: pad / pad / pad / S5-Ind / 3big:MVNO-Kind 1:専, 2:汎基, 3:汎オ
		09 0001 01	# Packet-Schceduling-Indicator: 0:非対象, 1:A, 2:B, 3:C  #[POS_PACK_SHCE_IND]
		11 0003 	# DOCOMO-CONTAINER
			00 01 01	# User-Information #[POS_USER_INFORMATION]
}






#=======================================================================================
#     #   #   ###   ####   #####  ####   #   #      #####  #####  ###   ###     #    #   #  #   #  
#     ##  #  #   #  #   #  #      #   #  #   #        #    #       #   #       # #   #  #   #   #  
#     # # #  #   #  ####   ####   ####   #   #        #    ####    #   #  ##  #####  ###    #   #  
#     #  ##  #   #  #      #      #  #   #   #        #    #       #   #   #  #   #  # #    #   #  
#     #   #   ###   #      #####  #   #   ###         #    #####  ###   ###   #   #  #  ##   ###   
#=======================================================================================
pdu CREATE_SESSION_REQUEST_NOPERU_CONTRACT_TEIGAKU
{
	4820 0126 00000000 00000f00 
	01 0008 00 
		44101045000403f4
	4c 0006 00			# MSISDN
		180881171074		
	4b 0008 00 1111111111111111	# MEI
	56 000d 00 1844f0010903 44f00100 123450 	# ULI
	53 0003 00 44f001		# Serving network
	52 0001 00 06 			# RAT Type
	4d 0002 00 0004			# Indication
	57 0009 00			# F-TEID(I/F-Type=10(S11MME GTP-C interface))
		8a 00000003 ac1efc14
	57 0009 01 			# F-TEID(I/F-Type= 9(S5/S8 PGW PMIPv6 interface))
		89 00000000 AC1EBE44
	47 0020 00 
		06 6b6f70657261 # "kopera.ne.jp" #[POS_APN]
		02 6e65 
		02 6a70
		06 6d6e63303130	# "mnc010.mcc440.gprs"
		06 6d6363343430
		04 67707273
	80 0001 00		# selection mode 
		00
	63 0001 00
		01
	4f 0005 00
		01 00000000 
	7f 0001 00
		00
	48 0008 00 03e41800 03e41800	# AMBR
	
	### PCO
	4e 002d 00
		80	# ext
		8021 	# IPCP
		10
		01
		00
		0010
			03 06 00000000
			81 06 00000000
		c023	# PAP
		16
		01
		00
		0016
			06 757365726e31
			0a 70617373776f72646e31
	### Bearer Context
	5d 001f 00		
		49 0001 00 	# EBI
			05 		#[POS_BCTXT_EBI]
		50 0016 00	# QoS
			7c 09 0000000000 0000000000 
			      0000000000 0000000000
			      
	03 0001 00 07	# Recovery
	
	### PE
	ff 001a 00
		0580 
		01 0001 0a 	# Subscribed-Carrier-Name
		02 0003 2143f5	# CA-Code
		04 0001 01	# Low Class Type: 1:all, 2:A, 3:B, 4:C, 5:D #[POS_LOW_CLASS_TYPE]
		#05 0001 01	# 暫定開通フラグ: 1:オン暫, 2:OTA暫
		#06 0001 00	# リミ契フラグ: 0:未超過, 1:超過   #[POS_LIMIT_FLAG]
		#08 0002 01 02 	# MVNO: Oct1:MVNO-ID,  Oct2: pad / pad / pad / S5-Ind / 3big:MVNO-Kind 1:専, 2:汎基, 3:汎オ
		09 0001 01	# Packet-Schceduling-Indicator: 0:非対象, 1:A, 2:B, 3:C  #[POS_PACK_SHCE_IND]
		11 0003 	# DOCOMO-CONTAINER
			00 01 01	# User-Information #[POS_USER_INFORMATION]
}








#=======================================================================================
#     #   #   ###   ####   #####  ####   #   #        ###    ###   #   #  #####
#     ##  #  #   #  #   #  #      #   #  #   #       #   #  #   #  ##  #    #  
#     # # #  #   #  ####   ####   ####   #   #       #      #   #  # # #    #  
#     #  ##  #   #  #      #      #  #   #   #       #   #  #   #  #  ##    #  
#     #   #   ###   #      #####  #   #   ###         ###    ###   #   #    #  
#=======================================================================================
#### 
#### 「PEにMVNO有り」以外はNEPERUと同じ、直接は弄らない
#### 
pdu CREATE_SESSION_REQUEST_NOPERU_CONTRACT_MVNO
{
	4820 0123 00000000 00000f00 
	01 0008 00 
		44101045000403f4
	4c 0006 00			# MSISDN
		180881171074		
	4b 0008 00 1111111111111111	# MEI
	56 000d 00 1844f0010903 44f00100 123450 	# ULI
	53 0003 00 44f001		# Serving network
	52 0001 00 06 			# RAT Type
	4d 0002 00 0004			# Indication
	57 0009 00			# F-TEID(I/F-Type=10(S11MME GTP-C interface))
		8a 00000003 ac1efc14
	57 0009 01 			# F-TEID(I/F-Type= 9(S5/S8 PGW PMIPv6 interface))
		89 00000000 AC1EBE44
	47 0020 00 
		06 6b6f70657261 # "kopera.ne.jp" #[POS_APN]
		02 6e65 
		02 6a70
		06 6d6e63303130	# "mnc010.mcc440.gprs"
		06 6d6363343430
		04 67707273
	80 0001 00		# selection mode 
		00
	63 0001 00
		01
	4f 0005 00
		01 00000000 
	7f 0001 00
		00
	48 0008 00 03e41800 03e41800	# AMBR
	
	### PCO
	4e 002d 00
		80	# ext
		8021 	# IPCP
		10
		01
		00
		0010
			03 06 00000000
			81 06 00000000
		c023	# PAP
		16
		01
		00
		0016
			06 757365726e31
			0a 70617373776f72646e31
	### Bearer Context
	5d 001f 00		
		49 0001 00 	# EBI
			05 		#[POS_BCTXT_EBI]
		50 0016 00	# QoS
			7c 09 0000000000 0000000000 
			      0000000000 0000000000
			      
	03 0001 00 07	# Recovery
	
	### PE
	ff 0017 00
		0580 
		01 0001 0a 	# Subscribed-Carrier-Name
		02 0003 2143f5	# CA-Code
		#04 0001 01	# Low Class Type: 1:all, 2:A, 3:B, 4:C, 5:D
		#05 0001 01	# 暫定開通フラグ: 1:オン暫, 2:OTA暫
		#06 0001 00	# リミ契フラグ: 0:未超過, 1:超過
		08 0002 01 02 	# MVNO: Oct1:MVNO-ID,  Oct2: pad / pad / pad / S5-Ind / 3big:MVNO-Kind 1:専, 2:汎基, 3:汎オ
		#09 0001 00	# Packet-Schceduling-Indicator: 0:非対象, 1:A, 2:B, 3:C
		11 0003 	# DOCOMO-CONTAINER
			00 01 01	# User-Information #[POS_USER_INFORMATION]
}




#=======================================================================================
#     #   #   ###   ####   #####  ####   #   #     #####    #    #   #  #####    #    ###  
#     ##  #  #   #  #   #  #      #   #  #   #        #    # #   ##  #    #     # #    #   
#     # # #  #   #  ####   ####   ####   #   #       #    #####  # # #    #    #####   #   
#     #  ##  #   #  #      #      #  #   #   #      #  #  #   #  #  ##    #    #   #   #   
#     #   #   ###   #      #####  #   #   ###      #####  #   #  #   #    #    #   #  ###  
#=======================================================================================
pdu CREATE_SESSION_REQUEST_NOPERU_CONTRACT_ZANTEI
{
	4820 0122 00000000 00000f00 
	01 0008 00 
		44101045000403f4
	4c 0006 00			# MSISDN
		180881171074		
	4b 0008 00 1111111111111111	# MEI
	56 000d 00 1844f0010903 44f00100 123450 	# ULI
	53 0003 00 44f001		# Serving network
	52 0001 00 06 			# RAT Type
	4d 0002 00 0004			# Indication
	57 0009 00			# F-TEID(I/F-Type=10(S11MME GTP-C interface))
		8a 00000003 ac1efc14
	57 0009 01 			# F-TEID(I/F-Type= 9(S5/S8 PGW PMIPv6 interface))
		89 00000000 AC1EBE44
	47 0020 00 
		06 6b6f70657261 # "kopera.ne.jp" #[POS_APN]
		02 6e65 
		02 6a70
		06 6d6e63303130	# "mnc010.mcc440.gprs"
		06 6d6363343430
		04 67707273
	80 0001 00		# selection mode 
		00
	63 0001 00
		01
	4f 0005 00
		01 00000000 
	7f 0001 00
		00
	48 0008 00 03e41800 03e41800	# AMBR
	
	### PCO
	4e 002d 00
		80	# ext
		8021 	# IPCP
		10
		01
		00
		0010
			03 06 00000000
			81 06 00000000
		c023	# PAP
		16
		01
		00
		0016
			06 757365726e31
			0a 70617373776f72646e31
	### Bearer Context
	5d 001f 00		
		49 0001 00 	# EBI
			05 		#[POS_BCTXT_EBI]
		50 0016 00	# QoS
			7c 09 0000000000 0000000000 
			      0000000000 0000000000
			      
	03 0001 00 07	# Recovery
	
	### PE
	ff 0016 00
		0580 
		01 0001 0a 	# Subscribed-Carrier-Name
		02 0003 2143f5	# CA-Code
		#04 0001 01	# Low Class Type: 1:all, 2:A, 3:B, 4:C, 5:D
		05 0001 01	# 暫定開通フラグ: 1:オン暫, 2:OTA暫 #[POS_ZANTEI]
		#06 0001 00	# リミ契フラグ: 0:未超過, 1:超過
		#08 0002 01 02 	# MVNO: Oct1:MVNO-ID,  Oct2: pad / pad / pad / S5-Ind / 3big:MVNO-Kind 1:専, 2:汎基, 3:汎オ
		#09 0001 00	# Packet-Schceduling-Indicator: 0:非対象, 1:A, 2:B, 3:C
		11 0003 	# DOCOMO-CONTAINER
			00 01 01	# User-Information #[POS_USER_INFORMATION]
}




#=======================================================================================
#     #   #  #   #  #   #   ###   
#     ## ##  #   #  ##  #  #   #  
#     # # #   # #   # # #  #   #  
#     #   #   # #   #  ##  #   #  
#     #   #    #    #   #   ###   tag_mvno ok
#=======================================================================================
pdu CREATE_SESSION_REQUEST_MVNO
{     # LTE attach
	4820 012b 00000000 00000f00 
	01 0008 00 
		44101045000403f4
	4c 0006 00			# MSISDN
		180881171074		
	4b 0008 00 1111111111111111	# MEI
	56 000d 00 1844f0010903 44f00100 123450 	# ULI
	53 0003 00 44f001		# Serving network
	52 0001 00 06 			# RAT Type
	4d 0002 00 0000			# Indication
	57 0009 00			# F-TEID(I/F-Type=10(S11MME GTP-C interface))
		8a 00000003 C0A8D948
	57 0009 01 			# F-TEID(I/F-Type= 9(S5/S8 PGW PMIPv6 interface))
		87 00000000 0202000c
	47 0020 00 
		06 6d766e6f3031 # "mvno01.ne.jp" #[POS_APN]
		02 6e65 
		02 6a70
		06 6d6e63303130	# "mnc010.mcc440.gprs"
		06 6d6363343430
		04 67707273
	80 0001 00		# selection mode 
		00
	63 0001 00
		01
	4f 0005 00
		01 00000000 
	7f 0001 00
		00
	48 0008 00 03e41800 03e41800	# AMBR
	
	### PCO
	4e 0035 00
		80	# ext
		c023	# PAP
		18
		01
		00
		0018
			0d 646267406e65632e636f2e6a70
			05 6775657374
		8021 	# IPCP
		16
		01
		00
		0016
			03 06 00000000
			81 06 00000000
			83 06 00000000
	### Bearer Context
	5d 001f 00		
		49 0001 00 	# EBI
			05 		#[POS_BCTXT_EBI]
		50 0016 00	# QoS
			7c 09 0000000000 0000000000 
			      0000000000 0000000000
			      
	03 0001 00 07	# Recovery
	
	### PE
	ff 0017 00
		0580 
		01 0001 0a 	# Subscribed-Carrier-Name
		02 0003 2143f5	# CA-Code
		#04 0001 01	# Low Class Type: 1:all, 2:A, 3:B, 4:C, 5:D
		#05 0001 01	# 暫定開通フラグ: 1:オン暫, 2:OTA暫
		#06 0001 00	# リミ契フラグ: 0:未超過, 1:超過
		08 0002 01 12 	# MVNO: Oct1:MVNO-ID,  Oct2: pad / pad / pad / S5-Ind / 3big:MVNO-Kind 1:専, 2:汎基, 3:汎オ
		#09 0001 00	# Packet-Schceduling-Indicator: 0:非対象, 1:A, 2:B, 3:C
		11 0003 	# DOCOMO-CONTAINER
			00 01 01	# User-Information #[POS_USER_INFORMATION]
}



#------------------------------------------------------------------------------------------------
pdu MODIFY_BEARER_REQUEST {
	48 22 0029 00000001 00000200
	4d 0002 00 0000		# Indication Flags
	5d 0012 00		# Bearer Context
        	49 0001 00		# EPS BearerID
        		05		#[POS_BCTXT_EBI]
        	57 0009 00 		# F-TEID(U-Plane)
        		80
			00000000 	#[POS_BCTXT_ENB_TEID_U]
			c0a8d84c 	#[POS_BCTXT_ENB_IPADDR_U]	
	03 0001 00 07                      # Recovery
}




#------------------------------------------------------------------------------------------------
pdu MODIFY_BEARER_REQUEST_UE_SERV {
	48 22 0033 00000001 00000200
	52 0001 00		# RAT-Type
		06
	4d 0002 00 0000		# Indication Flags
	5C 0001 00 01		# Data Notification Delay
	5d 0012 00		# Bearer Context
        	49 0001 00		# EPS BearerID
        		05		#[POS_BCTXT_EBI]
        	57 0009 00 		# F-TEID(U-Plane)
        		80
			00000000 	#[POS_BCTXT_ENB_TEID_U]
			c0a8d84c 	#[POS_BCTXT_ENB_IPADDR_U]	
	03 0001 00 07                      # Recovery
}




#------------------------------------------------------------------------------------------------
pdu_nocheck MODIFY_BEARER_REQUEST_TAU_WO_SGW {
	48 22 0029 00000001 00000200
	52 0001 00		# RAT-Type
		06
	4d 0002 00 0000		# Indication Flags
	5C 0001 00 01		# Data Notification Delay
	5d 0012 00		# Bearer Context
        	49 0001 00		# EPS BearerID
        		05		#[POS_BCTXT_EBI]
        	57 0009 00 		# F-TEID(U-Plane)
        		80
			00000000 	#[POS_BCTXT_ENB_TEID_U]
			c0a8d84c 	#[POS_BCTXT_ENB_IPADDR_U]	
	03 0001 00 07                      # Recovery
}




pdu DELETE_SESSION_REQUEST{
	48 24 0013		# GTP Header
		00000001	#[POS_HEADER_TEID]
		000600 00      
	49 0001 00 	# EBI
		05	#[POS_BCTXT_EBI]
	4d 0002 00 	# Indication
		0800    #[POS_INDICATION]
				
}

pdu DELETE_SESSION_REQUEST_RAU_WO_SGW_TARGET_SGSN{
	48 24 0019		# GTP Header
		00000001	#[POS_HEADER_TEID]
		000600 00      
	02 0002 00  # Cause
		05		# Cause Value
		00		# spare/CS
	49 0001 00 	# EBI
		05	#[POS_BCTXT_EBI]
	4d 0002 00 	# Indication
		0800    #[POS_INDICATION]
				
}

pdu DELETE_SESSION_REQUEST_SGWCHANGE {
	48 24 000e 00000001 000600 00      # GTP Header
	4d 0002 00 	# Indication
		0002    #[POS_INDICATION]
				
}




pdu RELEASE_ACCESS_BEARERS_REQUEST{
	48AA 0008 0000 0001 0006 0000	# GTP Header
}




pdu DOWNLINK_DATA_NOTIFICATION_ACKNOWLEDGEMENT {
	48B1 0018 0000 0000 0000 0000	# GTP Header
	
	02 0002 00	 # Cause
		1000	
	5C 0001 00 	# Data Notification Delay
		FF
	03 0001 00	# Recovery
		07
}




  pdu DOWNLINK_DATA_NOTIFICATION_FAILURE_INDICATION {
    4846000E0000000000000000           # GTP Header
    020002001000                       # Cause
  }

  pdu TAUOUT_MODIFY_BEARER_REQUEST {
    482200400000000100030000           # GTP Header
    5200010006                         # RAT Type
    570009008a07000001c0a8f4c8         # F-TEID(I/F-Type=10(S11MME GTP-C interface))
                                       # 192.168.241.200
    5C00010001                         # Delay Value
    5d001a00                           # Bearer Context
      4900010005                       # EPS BearerID
      570009008000000001e00a0004       # F-TEID(U-Plane)
      5E00040000000000                 # Charging ID
    0300010007                         # Recovery
  }







#------------------------------------------------------------------------------------------------
pdu TAU_CREATE_SESSION_REQUEST_YMODE {
	4820 00c4 00000000 00000f00 
	01 0008 00 
		44101045000403f4
	4b 0008 00 1111111111111111	# MEI
	53 0003 00 44f001		# Serving network
	52 0001 00 06 			# RAT Type
	4d 0002 00 			# Indication
		0804				#[POS_INDICATION]
	57 0009 00			# F-TEID(I/F-Type=10(S11MME GTP-C interface))
		8a 00000003 ac1efc14
	57 0009 01 			# F-TEID(I/F-Type= 9(S5/S8 PGW PMIPv6 interface))
		89 
		00000000 		#[POS_PGW_TEID_C]
		AC1EBE44
	47 0027 00 
		06 792d6d6f6465 # "y-mode.docomo.ne.jp" #[POS_APN]
		06 646f636f6d6f
		02 6e65 
		02 6a70
		06 6d6e63303130	# "mnc010.mcc440.gprs"
		06 6d6363343430
		04 67707273
	80 0001 00		# selection mode 
		00
	4f 0012 00		# PAA
		02 40 
		0000000000000000 0000000000000000	#[POS_PAA]
	7f 0001 00		# MAX APN Restriction
		00
	49 0001 00 	# EBI
		05 		#[POS_EBI]
	### Bearer Context
	5d 001f 00		
		49 0001 00 	# EBI
			05 		#[POS_BCTXT_EBI]
		50 0016 00	# QoS
			7c 09 0000000000 0000000000 
			      0000000000 0000000000
	03 0001 00 07	# Recovery
}


pdu TAU_CREATE_SESSION_REQUEST_NOPERU {
	4820 00b0 00000000 00000f00 
	01 0008 00 
		44101045000403f4
	4b 0008 00 1111111111111111	# MEI
	53 0003 00 44f001		# Serving network
	52 0001 00 06 			# RAT Type
	4d 0002 00 			# Indication 
		0804				#[POS_INDICATION]
	57 0009 00			# F-TEID(I/F-Type=10(S11MME GTP-C interface))
		8a 00000003 ac1efc14
	57 0009 01 			# F-TEID(I/F-Type= 9(S5/S8 PGW PMIPv6 interface))
		89 
		00000000 		#[POS_PGW_TEID_C]
		AC1EBE44
	47 0020 00 
		06 6b6f70657261 # "kopera.ne.jp" #[POS_APN]
		02 6e65 
		02 6a70
		06 6d6e63303130	# "mnc010.mcc440.gprs"
		06 6d6363343430
		04 67707273
	80 0001 00		# selection mode 
		00
	4f 0005 00		# PAA
		01 
		00000000 	#[POS_PAA]
	7f 0001 00		# MAX APN Restriction
		00
	49 0001 00 	# EBI
		05 		#[POS_EBI]
	### Bearer Context
	5d 001f 00		
		49 0001 00 	# EBI
			05 		#[POS_BCTXT_EBI]
		50 0016 00	# QoS
			7c 09 0000000000 0000000000 
			      0000000000 0000000000
			      
	03 0001 00 07	# Recovery
}







  pdu HOOUT_MODIFY_BEARER_REQUEST {
    482200420000000100030000           # GTP Header
    5200010006                         # RAT Type
    570009008a07000001c0a8f4c8         # F-TEID(I/F-Type=10(S11MME GTP-C interface))
                                       # 192.168.241.200
    5C00010001                         # Delay Value
    5d001a00                           # Bearer Context
      4900010005                       # EPS BearerID
      570009008000000001e00a0004       # F-TEID(U-Plane)
      5E00040000000000                 # Charging ID
    0300010007                         # Recovery
  }

  pdu HO_MODIFY_BEARER_REQUEST_601-002-001 {
    4822003B 800073e3 00030000           # GTP Header
    5200010006                         # RAT Type
    4d0002000010
    570009008a07000001c0a8f4c8         # F-TEID(I/F-Type=10(S11MME GTP-C interface))
                                       # 192.168.241.200
    5d001200                           # Bearer Context
      4900010005                       # EPS BearerID
      570009008000000001c0a8d84b       # F-TEID(U-Plane)
    0300010007                         # Recovery
  }

  pdu HO_CREATE_SESSION_REQUEST {
    482000C80000000100010000           # GTP Header
    0100080044101045000403f4           # IMSI
    4b0008001111111111111111           # MEI
    5300030044f001                     # Serving Network(3oct)(MCC: 440  MNC: 01f)
    5200010006                         # RAT Type
    4d0002000004                       # Indication
                                       #   DAF=0 DTF=0 HI=0 DFI=0 OI=0 ISRSI=0 ISRAI=0 SGWCI=0
                                       #   CRSI=0 P=0 PT=1 SI=0 MSV=0
    570009008a07000001c0a8f4c8         # F-TEID(I/F-Type=10(S11MME GTP-C interface))
                                       # 192.168.241.200
    570009018900000001ac1eff5a         # F-TEID(I/F-Type= 9(S5/S8 PGW PMIPv6 interface))
                                       # 192.16.13.200
    47002000                           # APN
      066d6f70657261026e65026a70       # (.mopera.ne.jp.mnc010.mcc440.gprs)
      066d6e63303130066d63633434
      300467707273
    6300010001                         # PDN Type
    7f00010000                         # APN Restriction
    4800080003e4180003e41800           # AMBR
    4900010005                         # Linked EPS BearerID
    5d003400                           # Bearer Context
      4900010005                       # EPS BearerID
      570009008000000000c0a8d84b       # S1-U eNodeB F-TEID
      500016003C0900000000000000       # Bearer Level QoS
      00000000000000000000000000
      5E00040000000000                 # Charging ID
    0300010007                         # Recovery
  }

  pdu CREATE_SESSION_REQUEST_601-001-001 {
    482000b00000000100010000           # GTP Header
    0100080044101045000403f4           # IMSI
    4b0008001111111111111111           # MEI
    5300030044f001                     # Serving Network(3oct)(MCC: 440  MNC: 01f)
    5200010006                         # RAT Type
    4d0002000014                       # Indication
                                       #   DAF=0 DTF=0 HI=0 DFI=0 OI=0 ISRSI=0 ISRAI=0 SGWCI=0
                                       #   CRSI=0 P=0 PT=1 SI=0 MSV=0
    570009008a07000001c0a8d94b         # F-TEID(I/F-Type=10(S11MME GTP-C interface))
                                       # 192.168.241.200
    5700090189c0000043ac1eff5a         # F-TEID(I/F-Type= 9(S5/S8 PGW PMIPv6 interface))★suck
                                       # 192.16.13.200
    47002000                           # APN
      066d6f70657261026e65026a70       # (.mopera.ne.jp.mnc010.mcc440.gprs)
      066d6e63303130066d63633434
      300467707273
#★#    6300010001                         # PDN Type    #9-5-C-D-8
  8000010002
  4f00050001c0a8e390                   #★
    7f00010000                         # APN Restriction
    4900010005                         # Linked EPS BearerID
#★#    4800080003e4180003e41800           # AMBR
    5d001f00                           # Bearer Context
      4900010005                       # EPS BearerID
#★#      570009008000000000c0a8d84b       # S1-U eNodeB F-TEID
      500016003C0900000000000000       # Bearer Level QoS
      00000000000000000000000000
#★#      5E00040000000000                 # Charging ID
    0300010007                         # Recovery
  }

  pdu HO_MODIFY_BEARER_REQUEST
  {
    4822003c00000001000e0000           # GTP Header
    56000d00                           # User Location Info (ULI)(13oct)
     18                                #   Flag: ECGI=1 TAI=1 RAI=0 SAI=0 CGI=0
     44f001                            #   MCC: 440  MNC: 01f
     0009                              #   TAC: 9
     44f001                            #   MCC: 440  MNC: 01f
     01111111                          #   ECI: 17895697
    5d001a00                           # Bearer Contexts to be modified(24oct)
     4900010005                        #   EPS Bearer ID (EBI)(1oct): 5
     57000900                          #   S1 eNodeB F-TEID(9oct)
      80                               #     Flag: IPv4=1 IPv6=0 I/F-Type=0(S1-U eNodeB GTP-U interface)
      00000001                         #     TEID/GRE Key: 1
      e00a0004                         #     IPv4: 224.10.0.4
     5E00040000000000                  #   Charging ID(4oct): 0
    0300010007                         # Recovery (Restart Counter)(1oct): 14
  }

#  pdu CREATE_INDIRECT_DATA_FORWARDING_TUNNEL_REQUEST {
#    ## GTP Header ##
#    4                                    # Ver:2 / PT:GTP
#    8                                    # P:0 / T:1 (12oct Header)
#    a6                                   # MsgType = Create Indirect Data Forwarding Tunnel Request
#    001e                                 # PduLen = 30oct (全信号長 = 34oct)
#    00000000                             # TEID
#    0000                                 # Sequence Number
#    0000                                 # (Spare)
#    ## GTP PDU ##
#    5d 	0012 00                           # Bearer Context(18oct)
#    49 0001 00 05                        #   EPS Bearer ID (EBI)(1oct): 5
#    57 0009 02                           #   SGSN F-TEID for data forwarding(9oct)
#    96                                   #     Flag: IPv4=1 IPv6=0 I/F-Type=15(S4 SGSN GTP-U interface)
#    00000002                             #     TEID/GRE Key: 2
#    c0a8d855                             #     IPv4: 224.10.0.5
#  }

  pdu CREATE_INDIRECT_DATA_FORWARDING_TUNNEL_REQUEST_NEW {
    ## GTP Header ##
    4                                    # Ver:2 / PT:GTP
    8                                    # P:0 / T:1 (12oct Header)
    a6                                   # MsgType = Create Indirect Data Forwarding Tunnel Request
    001e                                 # PduLen = 30oct (全信号長 = 34oct)
    00000000                             # TEID
    0000                                 # Sequence Number
    0000                                 # (Spare)
    ## GTP PDU ##
    5d 	0012 00                           # Bearer Context(18oct)
    49 0001 00 05                        #   EPS Bearer ID (EBI)(1oct): 5
    57 0009 00                           #   SGSN F-TEID for data forwarding(9oct)
    93                                   #     Flag: IPv4=1 IPv6=0 I/F-Type=15(S4 SGSN GTP-U interface)
    00000002                             #     TEID/GRE Key: 2
    c0a8d84b                             #     IPv4: 224.10.0.5
  }

  pdu OLD_SGW_DELETE_SESSION_REQUEST{
    482400140000000100060000           # GTP Header
    02 0002 00 05 00                   # Cause
    4d0002000002                       # Indication
  }

#  pdu_nocheck DELETE_INDIRECT_DATA_FORWARDING_TUNNEL_REQUEST{
#  pdu DELETE_INDIRECT_DATA_FORWARDING_TUNNEL_REQUEST{
#    ## GTP Header ##
#    4                                    # Ver:2 / PT:GTP
#    8                                    # P:0 / T:1 (12oct Header)
#    a8                                   # MsgType = Delete Indirect Data Forwarding Tunnel Request
#    0008                                 # PduLen = 8oct (全信号長 = 12oct)
#    00000001                             # TEID
#    0000                                 # Sequence Number
#    2300                                 # (Spare)
#  }

  pdu DELETE_INDIRECT_DATA_FORWARDING_TUNNEL_REQUEST_603-001-003{
    ## GTP Header ##
    4                                    # Ver:2 / PT:GTP
    8                                    # P:0 / T:1 (12oct Header)
    a8                                   # MsgType = Delete Indirect Data Forwarding Tunnel Request
    0008                                 # PduLen = 8oct (全信号長 = 12oct)
    00000001                             # TEID
    0000                                 # Sequence Number
    2300                                 # (Spare)
    FFFFFF
  }

pdu DELETE_BEARER_RESPONSE{
    48 64 0018 00000000 00000000        # GTP Header
    02 0002 00 10 00                    # Cause
    49 0001 00 00                       # Linked EPS Bearer ID
    03 0001 00 07                       # Recovery
}

pdu UPDATE_BEARER_RESPONSE{
    48 62 0022 00000000 000000 00       # GTP Header
    02 0002 00 1000                     # Cause
    5d 000b 00                          # Bearer Contexts
        49 0001 00 05                       # EPS Bearer ID
        02 0002 00 1000                     # Cause
    03 0001 00 07                       # Recovery
}
  sdu PING {
    4500 0054 75cc 0000 4001 d897 c0a8 d84d
    c0a8 d2a6 0800 446f a801 0000 cc98 1c3f
    36b4 0100 0809 0a0b 0c0d 0e0f 1011 1213
    1415 1617 1819 1a1b 1c1d 1e1f 2021 2223
    2425 2627 2829 2a2b 2c2d 2e2f 3031 3233
    3435 3637
  }



#=======================================================================================
#    SPMODE   tag_spmode ok
#=======================================================================================
pdu CREATE_SESSION_REQUEST_SPMODE
{
	4820 0132 00000000 00000f00 
	01 0008 00 
		44101045000403f4
	4c 0006 00			# MSISDN
		180881171074		
	4b 0008 00 1111111111111111	# MEI
	56 000d 00 1844f0010903 44f00100 123450 	# ULI
	53 0003 00 44f001		# Serving network
	52 0001 00 06 			# RAT Type
	4d 0002 00 8004			# Indication
	57 0009 00			# F-TEID(I/F-Type=10(S11MME GTP-C interface))
		8a 00000003 C0A8D948                             #   IPv4: 192.168.217.72
	57 0009 01 			# F-TEID(I/F-Type= 9(S5/S8 PGW PMIPv6 interface))
		89 00000000 AC1EBF84                             #   IPv4: 172.30.191.68
	47 0020 00 
		06 73706d6f6465 # "spmode.ne.jp" #[POS_APN]
		02 6e65 
		02 6a70
		06 6d6e63303130	# "mnc010.mcc440.gprs"
		06 6d6363343430
		04 67707273
	80 0001 00		# selection mode 
		00
	63 0001 00		# PDN Type
		03		#   IPv4=1, IPv6=2, IPv4/IPv6=3
	4f 0016 00		# PAA
		03		#   IPv4/IPv6
		00					# Prefix
		00000000000000000000000000000000	# IPv6 Address
		00000000				# IPv4 Address
	7f 0001 00
		00
	48 0008 00 03e41800 03e41800	# AMBR
	
	### PCO
	4e 0038 00
		80	# ext
		c023	# PAP
		18	# Length of protocol ID content
		01	# code(Configure-Request)
		00	# identifier
		0018	# data length
			0d		# Peer-ID Length
			646267406e65632e636f2e6a70
			05		# Passwd-Length
			6775657374
		8021 	# IPCP
		16	# length
		01	# code(Configure-Request)
		00	# identifier
		0016	# deta length
			03		# IP Address
			06		# length
			00000000	# 0.0.0.0
			81		# Primary DNS Address(=81)
			06		# length
			00000000	# 0.0.0.0
            83
            06
            00000000
		0003	# DNS Server IPv6 Address
		00	# length
	### Bearer Context
	5d 001f 00		
		49 0001 00 	# EBI
			05 		#[POS_BCTXT_EBI]
		50 0016 00	# QoS
			7c 09 0000000000 0000000000 
			      0000000000 0000000000
			      
	03 0001 00 07	# Recovery
	
	### PE
	ff 0012 00
		0580 
		01 0001 0a 	# Subscribed-Carrier-Name
		02 0003 2143f5	# CA-Code
		#04 0001 01	# Low Class Type: 1:all, 2:A, 3:B, 4:C, 5:D
		#05 0001 01	# 暫定開通フラグ: 1:オン暫, 2:OTA暫
		#06 0001 00	# リミ契フラグ: 0:未超過, 1:超過
		#08 0002 01 02 	# MVNO: Oct1:MVNO-ID,  Oct2: pad / pad / pad / S5-Ind / 3big:MVNO-Kind 1:専, 2:汎基, 3:汎オ
		#09 0001 00	# Packet-Schceduling-Indicator: 0:非対象, 1:A, 2:B, 3:C
		11 0003 	# DOCOMO-CONTAINER
			00 01 00	# User-Information #[POS_USER_INFORMATION]
}



pdu CREATE_SESSION_REQUEST_SPMODE_CONTRACT_LIMIT
{
	4820 0136 00000000 00000f00 
	01 0008 00 
		44101045000403f4
	4c 0006 00			# MSISDN
		180881171074		
	4b 0008 00 1111111111111111	# MEI
	56 000d 00 1844f0010903 44f00100 123450 	# ULI
	53 0003 00 44f001		# Serving network
	52 0001 00 06 			# RAT Type
	4d 0002 00 8004			# Indication
	57 0009 00			# F-TEID(I/F-Type=10(S11MME GTP-C interface))
		8a 00000003 C0A8D948                             #   IPv4: 192.168.217.70
	57 0009 01 			# F-TEID(I/F-Type= 9(S5/S8 PGW PMIPv6 interface))
		89 00000000 AC1EBF84                             #   IPv4: 172.30.191.68
	47 0020 00 
		06 73706d6f6465 # "spmode.ne.jp" #[POS_APN]
		02 6e65 
		02 6a70
		06 6d6e63303130	# "mnc010.mcc440.gprs"
		06 6d6363343430
		04 67707273
	80 0001 00		# selection mode 
		00
	63 0001 00		# PDN Type
		03		#   IPv4=1, IPv6=2, IPv4/IPv6=3
	4f 0016 00		# PAA
		03		#   IPv4/IPv6
		00					# Prefix
		00000000000000000000000000000000	# IPv6 Address
		00000000				# IPv4 Address
	7f 0001 00
		00
	48 0008 00 03e41800 03e41800	# AMBR
	
	### PCO
	4e 0030 00
		80	# ext
		8021 	# IPCP
		10	# length
		01	# code(Configure-Request)
		00	# identifier
		0010	# deta length
			03		# IP Address
			06		# length
			00000000	# 0.0.0.0
			81		# Primary DNS Address(=81)
			06		# length
			00000000	# 0.0.0.0
		c023	# PAP
		16	# Length of protocol ID content
		01	# code(Configure-Request)
		00	# identifier
		0016	# data length
			06		# Peer-ID Length
			757365726e31	# Peer-ID: usern1
			0a		# Passwd-Length
			70617373776f72646e31	# passwordn1
		0003	# DNS Server IPv6 Address
		00	# length
	### Bearer Context
	5d 001f 00		
		49 0001 00 	# EBI
			05 		#[POS_BCTXT_EBI]
		50 0016 00	# QoS
			7c 09 0000000000 0000000000 
			      0000000000 0000000000
			      
	03 0001 00 07	# Recovery
	
	### PE
	ff 0016 00
		0580 
		01 0001 0a 	# Subscribed-Carrier-Name
		02 0003 2143f5	# CA-Code
		#04 0001 01	# Low Class Type: 1:all, 2:A, 3:B, 4:C, 5:D
		#05 0001 01	# 暫定開通フラグ: 1:オン暫, 2:OTA暫
		06 0001	01	# リミ契フラグ: 0:未超過, 1:超過 #[POS_LIMIT_FLAG]
		#08 0002 01 02 	# MVNO: Oct1:MVNO-ID,  Oct2: pad / pad / pad / S5-Ind / 3big:MVNO-Kind 1:専, 2:汎基, 3:汎オ
		#09 0001 00	# Packet-Schceduling-Indicator: 0:非対象, 1:A, 2:B, 3:C
		11 0003 	# DOCOMO-CONTAINER
			00 01 00	# User-Information #[POS_USER_INFORMATION]
}



#------------------------------------------------------------------------------------------------
pdu MODIFY_BEARER_REQUEST_TAU_WO_SGW_TARGET_MME {
	## GTP Header ##
	4                                    # Ver:2 / PT:GTP
	8                                    # P:0 / T:1 (12oct Header)
	22                                   # MsgType = Modify Bearer Request
	0029                                 # PduLen = 41oct (全信号長 = 45oct)
	80003a98                             # TEID = 2147498648		#[POS_HEADER_TEID]
	2f5e86                               # Sequence Number = 3104390
	00                                   # (Spare)

	## GTP PDU ##
	4d 0002 00                           # Indication(2oct)
	00                                   #   DAF=0 DTF=0 HI=0 DFI=0 OI=0 ISRSI=0 ISRAI=0 SGWCI=0 #[POS_INDICATION]
	00                                   #   CRSI=0 P=0 PT=0 SI=0 MSV=0
	57 0009 00                           # Sender F-TEID for Control Plane(9oct)
	8a                                   #   Flag: IPv4=1 IPv6=0 I/F-Type=10(S11 MME GTP-C interface)
	0003cd22                             #   TEID/GRE Key: 249122		#[POS_SENDER_F_TEID_C]
	c0a8d950                             #   IPv4: 192.168.217.80		#[POS_SENDER_ADDRESS]
	5d 0005 00                           # Bearer Contexts to be modified(5oct)
	49 0001 00                           #   EPS Bearer ID (EBI)(1oct): 5
	05                                   #[POS_EBI]
	03 0001 00 07                        # Recovery (Restart Counter)(1oct): 7
}


#------------------------------------------------------------------------------------------------
# tag_mbr_rau ok
pdu MODIFY_BEARER_REQUEST_RAU_WO_SGW_TARGET_SGSN {
	## GTP Header ##
	4                                    # Ver:2 / PT:GTP
	8                                    # P:0 / T:1 (12oct Header)
	22                                   # MsgType = Modify Bearer Request
	002e                                 # PduLen = 46oct (全信号長 = 50oct)
	80003a98                             # TEID = 2147498648		#[POS_HEADER_TEID]
	000a                                 # Sequence Number = 10
	0000                                 # (Spare)

	## GTP PDU ##
	52 0001 00 01                        # RAT Type(1oct): 1 (UTRAN)
	4d 0002 00                           # Indication(2oct)
	00                                   #   DAF=0 DTF=0 HI=0 DFI=0 OI=0 ISRSI=0 ISRAI=0 SGWCI=0 #[POS_INDICATION]
	00                                   #   CRSI=0 P=0 PT=0 SI=0 MSV=0
	57 0009 00                           # Sender F-TEID for Control Plane(9oct)
	91                                   #   Flag: IPv4=1 IPv6=0 I/F-Type=17(S4 SGSN GTP-C interface)
	0003cd22                             #   TEID/GRE Key: 249122		#[POS_SENDER_F_TEID_C]
	c0a8d950                             #   IPv4: 192.168.217.80		#[POS_SENDER_ADDRESS]
	5d 0005 00                           # Bearer Contexts to be modified(5oct)
	49 0001 00                           #   EPS Bearer ID (EBI)(1oct): 5
	05                                   #[POS_EBI]
	03 0001 00 07                        # Recovery (Restart Counter)(1oct): 7
}



#---------------------------------------------------------------------------------------
# 11A_SGSN対向用に修正。3G→LTE HO with SGW change時のみ正常動作
pdu CREATE_INDIRECT_DATA_FORWARDING_TUNNEL_REQUEST {
        48a6 001e 0000 0001 0000 0000
	### Bearer Context
        5D 0012 00
                ### EBI
                49 0001 00
                        05                              #[POS_BCTXT_EBI]
                ### F-TEID
                57 0009 01
                        97 00010001
                           C0A8D8C8                    
    #                    96 00010001
    #                       C0A8D858                    #[POS_NODE_IP]
        ### Recovery
    #    03 0001 00
    #    07
}


pdu DELETE_INDIRECT_DATA_FORWARDING_TUNNEL_REQUEST {
        48a8 0008 0000 0001 0000 0200
}


pdu CREATE_INDIRECT_DATA_FORWARDING_TUNNEL_REQUEST__3G {
        48a6 001e 0000 0001 0000 0000
        ### Bearer Context
        5D 0012 00
                ### EBI
                49 0001 00
                        05                              #[POS_BCTXT_EBI]
                ### F-TEID
                57 0009 00
                        93 00010000
                           C0A8D858                     #[POS_NODE_IP]
}


pdu DELETE_INDIRECT_DATA_FORWARDING_TUNNEL_REQUEST__3G {
        48a8 0008 0000 0001 0000 0000
}



#---------------------------------------------------------------------------------------
# tag_mbr_wo_sgw ok
pdu MODIFY_BEARER_REQUEST_HO_WO_SGW {
        4822 003b
	0000				#[POS_HEADER_TEID]
	0001 0000 0200
        ### RAT Type
        52 0001 00
                06
        ### Indication
        4d 0002 00
                0000    #[POS_INDICATION]
        ### F-TEID
        57 0009 00                      # F-TEID(I/F-Type=10(S11MME GTP-C interface))
                8a
		   00000003		#[POS_SENDER_F_TEID_C]
                   ac1efc14             #[POS_SENDER_ADDRESS]
        ### Bearer Context
        5d 0012 00
                ### EBI
                49 0001 00
                        05              #[POS_EBI]
                ### F-TEID
                57 0009 00
                        80 00000000 C0A8D852
        ### Recovery
        03 0001 00
                07
}

# tag_mbr_wo_sgw_3g ok
pdu MODIFY_BEARER_REQUEST_HO_WO_SGW__3G {
        4822 003b
	8000		#[POS_HEADER_TEID]
	007d 0003 0000
        ### RAT Type
        52 0001 00
                01
        ### Indication
        4d 0002 00
                0000    #[POS_INDICATION]
        ### F-TEID
        57 0009 00
                91
		   00000001			#[POS_SENDER_F_TEID_C]
                   c0a8d89a                     #[POS_SENDER_ADDRESS]
        ### Bearer Context
        5d 0012 00
                ### EBI
                49 0001 00
                        05                      #[POS_EBI]
                ### F-TEID
                57 0009 03
                        8f 00000001 C0A8D852
        ### Recovery
        03 0001 00
                07
}


#===========================================================
# tag_kopera_3g ok
pdu CREATE_SESSION_REQUEST_NOPERU__3G
{
    ## GTP Header ##
    4                                    # Ver:2 / PT:GTP
    8                                    # P:0 / T:1 (12oct Header)
    20                                   # MsgType = Create Session Request
    012e                                 # PduLen = 281oct (全信号長 = 285oct)
    00000000                             # TEID = 0
    000f                                 # Sequence Number = 15
    0000                                 # (Spare)
    
    ## GTP PDU ##
    01 0008 00 44101045000403f4          # IMSI : 440101540040305f
    4c 0006 00 180881171074              # MSISDN : 818018710147
    4b 0008 00                           # Mobile Equipment Identity (MEI)(8oct)
    1111111111111111
    56 0008 00                           # User Location Info (ULI)(8oct)
    04                                   #   Flag: ECGI=0 TAI=0 RAI=1 SAI=0 CGI=0
    44f001                               #   MCC: 440  MNC: 01f
    0003                                 #   LAC: 3
    00ff                                 #   RAC: 255
    53 0003 00                           # Serving Network(3oct)
    44f001                               #   MCC: 440  MNC: 01f
    52 0001 00 01                        # RAT Type(1oct): 1 (UTRAN)
    4d 0002 00                           # Indication(2oct)
    00                                   #   DAF=0 DTF=0 HI=0 DFI=0 OI=0 ISRSI=0 ISRAI=0 SGWCI=0
    04                                   #   CRSI=0 P=0 PT=1 SI=0 MSV=0
    57 0009 00                           # Sender F-TEID for Control Plane(9oct)
    91                                   #   Flag: IPv4=1 IPv6=0 I/F-Type=17(S4 SGSN GTP-C interface)
    00000003                             #   TEID/GRE Key: 3
    C0A8D888                             #   IPv4: 172.30.252.20 C0A8D888
    57 0009 01                           # PGW S5/S8 Address for Control Plane or PMIP(9oct)
    89                                   #   Flag: IPv4=1 IPv6=0 I/F-Type=9(S5/S8 PGW PMIPv6 interface)
    00000000                             #   TEID/GRE Key: 0
    AC1EBF84                             #   IPv4: 172.30.191.132
    47 0020 00                           # Access Point Name (APN)(32oct)
            06 6b6f70657261 # "kopera.ne.jp" #[POS_APN]
            02 6e65
            02 6a70
            06 6d6e63303130 # "mnc010.mcc440.gprs"
            06 6d6363343430
            04 67707273
    80 0001 00 01                        # Selection Mode(1oct): 1 (MS provided APN, subscription not veri
                                         # fied)
    63 0001 00 01                        # PDN Type(1oct): 1 (IPv4)
    4f 0005 00                           # PDN Address Allocation (PAA)(5oct)
    01                                   #   PDN Type: 1 (IPv4)
    00000000                             #   IPv4: 0.0.0.0
    7f 0001 00 00                        # Maximum APN Restriction(1oct): 0 (No Existing Contexts or Restr
                                         # iction)
    48 0008 00                           # Aggregate Maximum Bit Rate (AMBR)(8oct)
    03e41800                             #   APN-AMBR for uplink:   4294967 (Kbps)
    03e41800                             #   APN-AMBR for downlink: 4294967 (Kbps)
    4e 0035 00 80                        # Protocol Configuration Options (PCO)(45oct)
    c023
    18
    01 00
    0018 
      0d 646267406e65632e636f2e6a70
      05 6775657374
    8021
    16 
    0100
    0016 
      03 06 00000000
      81 06 00000000
      83 06 00000000

    5d 002c 00                           # Bearer Contexts to be created(31oct)
    49 0001 00                           #   EPS Bearer ID
            05                           #[POS_BCTXT_EBI]
    57 0009 01                           ### F-TEID
            8f 00000001
               C0A8D848
    50 0016 00                           #   Bearer Level Quality of Service (Bearer QoS)(22oct)
    7c09
    0000000000
    0000000000
    0000000000
    0000000000
    03 0001 00 07                        # Recovery (Restart Counter)(1oct): 7
    ff 0012 00                           # Private Extension(18oct)
    0580                                 #   Enterprise  ID : 1408 (NTT Mobile Communications Network Inc.
                                         #   )
    0100010a0200032300f0110003000140     #   Proprietary value
}

# tag_spmode_3g ok
pdu CREATE_SESSION_REQUEST_SPMODE__3G
{
    ## GTP Header ##
    4                                    # Ver:2 / PT:GTP
    8                                    # P:0 / T:1 (12oct Header)
    20                                   # MsgType = Create Session Request
    012e                                 # PduLen = 281oct (全信号長 = 285oct)
    00000000                             # TEID = 0
    000f                                 # Sequence Number = 15
    0000                                 # (Spare)
    
    ## GTP PDU ##
    01 0008 00 44101045000403f4          # IMSI : 440101540040305f
    4c 0006 00 180881171074              # MSISDN : 818018710147
    4b 0008 00                           # Mobile Equipment Identity (MEI)(8oct)
    1111111111111111
    56 0008 00                           # User Location Info (ULI)(8oct)
    04                                   #   Flag: ECGI=0 TAI=0 RAI=1 SAI=0 CGI=0
    44f001                               #   MCC: 440  MNC: 01f
    0003                                 #   LAC: 3
    00ff                                 #   RAC: 255
    53 0003 00                           # Serving Network(3oct)
    44f001                               #   MCC: 440  MNC: 01f
    52 0001 00 01                        # RAT Type(1oct): 1 (UTRAN)
    4d 0002 00                           # Indication(2oct)
    00                                   #   DAF=0 DTF=0 HI=0 DFI=0 OI=0 ISRSI=0 ISRAI=0 SGWCI=0
    04                                   #   CRSI=0 P=0 PT=1 SI=0 MSV=0
    57 0009 00                           # Sender F-TEID for Control Plane(9oct)
    91                                   #   Flag: IPv4=1 IPv6=0 I/F-Type=17(S4 SGSN GTP-C interface)
    00000003                             #   TEID/GRE Key: 3
    C0A8D888                             #   IPv4: 172.30.252.20 C0A8D888
    57 0009 01                           # PGW S5/S8 Address for Control Plane or PMIP(9oct)
    89                                   #   Flag: IPv4=1 IPv6=0 I/F-Type=9(S5/S8 PGW PMIPv6 interface)
    00000000                             #   TEID/GRE Key: 0
    AC1EBF84                             #   IPv4: 172.30.191.132
    47 0020 00                           # Access Point Name (APN)(32oct)
            06 73706d6f6465 # "spmode.ne.jp" #[POS_APN]
            02 6e65
            02 6a70
            06 6d6e63303130 # "mnc010.mcc440.gprs"
            06 6d6363343430
            04 67707273
    80 0001 00 01                        # Selection Mode(1oct): 1 (MS provided APN, subscription not veri
                                         # fied)
    63 0001 00 01                        # PDN Type(1oct): 1 (IPv4)
    4f 0005 00                           # PDN Address Allocation (PAA)(5oct)
    01                                   #   PDN Type: 1 (IPv4)
    00000000                             #   IPv4: 0.0.0.0
    7f 0001 00 00                        # Maximum APN Restriction(1oct): 0 (No Existing Contexts or Restr
                                         # iction)
    48 0008 00                           # Aggregate Maximum Bit Rate (AMBR)(8oct)
    03e41800                             #   APN-AMBR for uplink:   4294967 (Kbps)
    03e41800                             #   APN-AMBR for downlink: 4294967 (Kbps)
    4e 0035 00 80                        # Protocol Configuration Options (PCO)(45oct)
    c023
    18
    01 00
    0018 
      0d 646267406e65632e636f2e6a70
      05 6775657374
    8021
    16 
    0100
    0016 
      03 06 00000000
      81 06 00000000
      83 06 00000000

    5d 002c 00                           # Bearer Contexts to be created(31oct)
    49 0001 00                           #   EPS Bearer ID
            05                           #[POS_BCTXT_EBI]
    57 0009 01                           ### F-TEID
            8f 00000001
               C0A8D848
    50 0016 00                           #   Bearer Level Quality of Service (Bearer QoS)(22oct)
    7c09
    0000000000
    0000000000
    0000000000
    0000000000
    03 0001 00 07                        # Recovery (Restart Counter)(1oct): 7
    ff 0012 00                           # Private Extension(18oct)
    0580                                 #   Enterprise  ID : 1408 (NTT Mobile Communications Network Inc.
                                         #   )
    0100010a0200032300f0110003000140     #   Proprietary value
}