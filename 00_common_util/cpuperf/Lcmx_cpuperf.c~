#include <sys/types.h>
#include <sys/resource.h>
#include <unistd.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <sched.h>
#include <signal.h>
#include <errno.h>

static int nr_cpus;

/* returns msec */
uint32_t utime(void)
{
    struct rusage r;
    getrusage(RUSAGE_SELF, &r);

    return r.ru_utime.tv_sec * 1000 + r.ru_utime.tv_usec / 1000;
}

uint32_t calc(uint32_t nr)
{
    uint32_t i, k;
    uint32_t x, y = 0;
    for (i = nr; i > 0; i--) {
	for (k = 1000000; k > 0; k--) {
	    x = i;
	    y ^= x | k;
	}
    }
    return y;
}

uint32_t check(uint32_t nr)
{
    uint32_t ms1, ms2;
    ms2 = utime();
    do {
	ms1 = utime();
    } while (ms1 == ms2);
    calc(nr);
    ms2 = utime();
    return ms2 - ms1;
}

uint32_t calibrate(void)
{
    uint32_t ms, x = 1, step = 1;
    int i;

  retry:
    for (;;) {
	ms = check(x);
	if (ms < 50) {
	    x *= 100 / (ms + 1);
	} else if (ms < 100) {
	    x += step;
	    step++;
	} else {
	    break;
	}
    }

    x = (x * 1000) / ms;

    for (i = 0; i < 3; i++) {
	ms = check(x);
	if (ms <= 950 || 1050 <= ms) {
	    x -= step;
	    step /= 4;
	    goto retry;
	}
    }

    printf("calibrated: %u\n", x);
    return 1;
}

void output(uint32_t ms)
{
    uint32_t x = 1000 * 100 / ms;
    printf("%u%%", x);
}

int main(int argc, char **argv)
{
    uint32_t max, min, ms, x;
    int i;
    unsigned long mask;

    calc(1);

    if (argc == 1)
	return calibrate();

    if (argc < 3) {
	printf("cpuperf nr_cpus calc\n");
	return 1;
    }

    nr_cpus = strtoul(argv[1], NULL, 0);
    x = strtoul(argv[2], NULL, 0);

    if (sched_getaffinity(0, sizeof(mask), &mask) == -1) {
	printf("Unable to get cpu affinity. errno=%d\n", errno);
	return 1;
    }

    max = min = 0;
    for (i = 0; i < nr_cpus; i++) {
	mask = 1 << i;
	if (sched_setaffinity(0, sizeof(mask), &mask) == -1) {
	    printf("Unable to set cpu affinity. errno=%d\n", errno);
	    return 1;
	}
	usleep(10000);
	sched_yield();
	usleep(10000);
	sched_yield();
	usleep(10000);
	sched_yield();
	ms = check(x);
	printf("CPU%d: ", i);
	output(ms);
	printf("\n");
	if (max < ms)
	    max = ms;
	if (!min || ms < min)
	    min = ms;
    }
    printf("MAX: ");
    output(min);
    printf("\n");
    printf("MIN: ");
    output(max);
    printf("\n");
    x = (min * 100) / max;
    printf("MIN/MAX: %u.%02u\n", x / 100, x % 100);

    return 0;
}
